{
  "README.html": {
    "href": "README.html",
    "title": "| 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Liability Disclaimer Blue Byte Systems Inc. provides the SOLIDWORKS VBA Macro Library as a free resource intended to assist users in automating repetitive tasks within SOLIDWORKS. While we strive to ensure that the macros are efficient, accurate, and beneficial, they are provided as-is, without any guarantees or warranties, either expressed or implied, including but not limited to the accuracy, reliability, or fitness for a particular purpose. By using any of the macros from this library, you acknowledge and agree to the following: Use at Your Own Risk: The use of these macros is entirely at your own risk. Blue Byte Systems Inc. assumes no responsibility or liability for any direct, indirect, incidental, or consequential damages, including but not limited to loss of data, disruption of workflow, damage to hardware or software, or loss of business profits arising out of or in connection with the use of the macros provided. No Warranty: The macros are provided without any warranty, either expressed or implied, including but not limited to warranties of performance, merchantability, non-infringement, or fitness for a particular purpose. We do not guarantee that the macros will meet your specific requirements or that they will be error-free, bug-free, or free of unintended consequences. Modifications: Any modifications made to the macros are done at your own discretion and risk. Blue Byte Systems Inc. is not liable for any issues arising from user modifications to the original code. We recommend testing any macros thoroughly before implementing them into a production environment. Backup and Testing: It is strongly recommended that users create appropriate backups of all important files before using any macro from this library. Furthermore, users should conduct extensive testing of any macro in a non-production environment before applying it to live data or systems. No Support Obligations: Blue Byte Systems Inc. is not obligated to provide any form of technical support, bug fixes, or updates to the macros. Users may submit inquiries, but there is no guarantee of response or resolution. Legal Limitations: In jurisdictions that do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, the liability of Blue Byte Systems Inc. will be limited to the greatest extent permitted by law. By downloading, modifying, or using any VBA macro from this library, you agree that Blue Byte Systems Inc., its employees, affiliates, and partners will not be held liable for any damages or issues resulting from the use or misuse of these macros. In Summary: You use the VBA Macro Library at your own risk. Blue Byte Systems Inc. is not responsible for any adverse outcomes that may arise from using the provided macros, and it is solely your responsibility to ensure that the macros are suitable for your specific use case. If you do not agree to these terms, do not use the macros provided by Blue Byte Systems Inc."
  },
  "index.html": {
    "href": "index.html",
    "title": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library A macro is a small, self-contained program that automates repetitive tasks in SOLIDWORKS. Our VBA Macro Library is designed to streamline your workflow by providing a collection of pre-written macros that help automate common tasks in SOLIDWORKS such as part creation, assembly management, and sketching. Getting Started Explore the VBA Macro Library to find pre-built automation solutions for your SOLIDWORKS projects. Free and Organized by Category All of our VBA macros are free to use and are carefully organized into the following categories: Parts: Automate tasks related to part creation, modifications, and features. Assemblies: Manage assemblies, components, and mates efficiently. Sketching: Simplify sketch-related tasks, including constraints, dimensions, and geometry creation. Drawings: Generate or modify drawing views and annotations quickly. Bill Of Materials: Macros that manage Bill Of Materials. Each macro is designed to save you time and reduce repetitive tasks, helping you work more efficiently with SOLIDWORKS. Contact Us For more information or to contact us about our VBA Macro Library, please visit our Contact Us page."
  },
  "src/3DPoints.html": {
    "href": "src/3DPoints.html",
    "title": "Import 3D Points into a SolidWorks Part Model | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Import 3D Points into a SolidWorks Part Model Description This macro imports 3D points from a text file into a 3D sketch in a SolidWorks part model. It ensures that the active document is a valid part model and creates a new part if none is open. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A blank part model should be active before running this macro. The text file containing 3D points must be accessible and formatted correctly. Results Note Imports 3D points from a text file into a new 3D sketch in the part model. If no part is open, a new part model will be created using the default template. STEPS to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., Macro1) and select Insert > UserForm. Rename the form to UserForm1. Design the form with the following: Add a Label at the top: Select file to open. Add a ListBox named ListBox1 for displaying file contents. Add two buttons: Import: Set Name = CmdImport and Caption = Import. Close: Set Name = CmdClose and Caption = Close. Add VBA Code: Copy the Macro Code provided below into the module. Copy the UserForm Code into the UserForm1 code-behind. Save and Run the Macro: Save the macro file (e.g., 3DPoints.swp). Run the macro by going to Tools > Macro > Run in SolidWorks, then select your saved macro. Import 3D Points: The macro will open the 3D Point Import UserForm. Follow these steps: Click Import and select the text file containing 3D points. Ensure the text file is formatted as comma-separated values, e.g.: 0.0,0.0,0.0 1.0,1.0,1.0 2.0,2.0,2.0 The macro will insert the points into a new 3D Sketch in the part model. Click Close to exit the UserForm. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part model) Dim ModelDocExt As Object ' ModelDocExtension object for extended functionalities Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long ' Long status for capturing operation results Dim longwarnings As Long ' Long warnings for capturing warnings ' Enumeration for SolidWorks document types Public Enum swDocumentTypes_e swDocNONE = 0 ' No document type swDocPART = 1 ' Part document type swDocASSEMBLY = 2 ' Assembly document type swDocDRAWING = 3 ' Drawing document type swDocSDM = 4 ' Solid data manager document type End Enum Sub main() Dim FileTyp As Integer ' Type of the active file Dim MassStatus As Long ' Status of the mass properties ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set Part = swApp.ActiveDoc ' Check if a document is open If Not Part Is Nothing Then FileTyp = Part.GetType ' Get document type ' Check if the document is a part model If FileTyp = swDocPART Then Set Part = swApp.ActiveDoc Set ModelDocExt = Part.Extension ' Get mass properties of the part Dim MassValue As Variant MassValue = ModelDocExt.GetMassProperties(1, MassStatus) ' Check if the part is blank (no mass) If MassStatus = 2 Then PointImport.Show ' Show user form for point import Else MsgBox \"Part model has mass. Please start with a blank part model.\", vbExclamation, \"Invalid Part Model\" End If Else MsgBox \"Current document is not a part model. Please start with a blank part model.\", vbExclamation, \"Invalid Document Type\" End If Else ' Load a new part using the default template Dim DefaultPart As String DefaultPart = swApp.GetUserPreferenceStringValue(swDefaultTemplatePart) Set Part = swApp.NewDocument(DefaultPart, 0, 0, 0) ' Check if the new part was created successfully If Not Part Is Nothing Then Set ModelDocExt = Part.Extension UserForm1.Show ' Show user form for user input Else MsgBox \"Could not automatically load part. Please start with a blank part model.\", vbExclamation, \"Part Creation Failed\" MsgBox \"File \" & DefaultPart & \" not found\", vbCritical, \"Template Not Found\" End If End If End Sub VBA UserForm Code Option Explicit Dim WorkDirectory As String Dim FileName As String '------------------------------------------------------------------------------ ' Add files to list '------------------------------------------------------------------------------ Private Sub AddToFileList(Extension) ListBoxFiles.Clear FileName = Dir(WorkDirectory + Extension) ' Retrieve file list Do While FileName <> \"\" ListBoxFiles.AddItem FileName FileName = Dir Loop End Sub ' Close Button Event Private Sub CommandClose_Click() End End Sub ' Import Button Event Private Sub CommandImport_Click() Dim Source As String Dim ReadLine As String Dim PntCnt As Long Dim DimX As Double, DimY As Double, DimZ As Double Dim Axis1 As Double, Axis2 As Double, Axis3 As Double ' Start a 3D Sketch Part.Insert3DSketch PntCnt = 0 Source = WorkDirectory & ListBoxFiles.List(ListBoxFiles.ListIndex, 0) Open Source For Input As #1 ' Open the source file Do While Not EOF(1) Input #1, ReadLine ' Check for lines containing \"HITS\" If Right$(UCase(ReadLine), 4) = \"HITS\" Then Input #1, DimX, DimY, DimZ, Axis1, Axis2, Axis3 PntCnt = PntCnt + 1 LabelProcessing.Caption = \"Processing:\" & Chr(13) & \"Point # \" & CStr(PntCnt) Me.Repaint ' Update form UI Part.CreatePoint2 DimX, DimY, DimZ End If Loop EndRead: Close #1 ' Close the file LabelProcessing.Caption = \"Processed:\" & Chr(13) & CStr(PntCnt) & \" points.\" Part.SketchManager.InsertSketch True Part.ClearSelection2 True Part.ViewZoomtofit End Sub ' ListBox File Click Event Private Sub ListBoxFiles_Click() CommandImport.Enabled = True End Sub ' UserForm Initialization Private Sub UserForm_Initialize() CommandImport.Enabled = False WorkDirectory = swApp.GetCurrentWorkingDirectory AddToFileList \"*.txt\" If ListBoxFiles.ListCount < 1 Then MsgBox \"No data files found.\", vbExclamation, \"File Not Found\" End End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Align_All_Dimensions_Automatically.html": {
    "href": "src/Align_All_Dimensions_Automatically.html",
    "title": "Align All Dimensions Automatically | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Align All Dimensions Automatically Description This VBA macro automates selecting and arranging dimensions in SOLIDWORKS drawings. It loops through views, selects display dimensions, and auto-arranges them. System Requirements SOLIDWORKS 2014 or newer Active drawing document open in SOLIDWORKS VBA Code: ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Option Explicit Public swApp As SldWorks.SldWorks Public swModel As SldWorks.ModelDoc2 Public swDraw As SldWorks.DrawingDoc Public swView As SldWorks.View Public swDispDim As SldWorks.DisplayDimension Public swAnn As SldWorks.Annotation Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings!\", vbCritical, \"Error\" Exit Sub End If Set swDraw = swModel Set swView = swDraw.GetFirstView swModel.ClearSelection2 True ' Loop through all views and select display dimensions Do While Not swView Is Nothing Set swDispDim = swView.GetFirstDisplayDimension5 Do While Not swDispDim Is Nothing Set swAnn = swDispDim.GetAnnotation swAnn.Select True Set swDispDim = swDispDim.GetNext5 Loop Set swView = swView.GetNextView Loop ' Auto-arrange dimensions swModel.Extension.AlignDimensions swAlignDimensionType_AutoArrange, 0.06 swModel.ClearSelection2 True End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/AnnotationsPro.html": {
    "href": "src/AnnotationsPro.html",
    "title": "Annotations Pro SolidWorks Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Annotations Pro SolidWorks Macro Description This macro automates the adjustment of annotations within SolidWorks drawings and models to match specified document settings. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks document should be active before running this macro. Ensure all required libraries and constants (swconst.bas) are included. Results Sets annotations and dimensions to use the document font. Adjusts view titles, BOM balloon sizes, and arrowhead styles to match document settings. Ensures consistent sizing for revision triangles and weld symbol notes. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks with Alt + F11. In Project Explorer, right-click the project and select Insert > UserForm. Rename to Form_AnnotationsPro. In Project Explorer, right-click the project and select Insert > Module. Rename to swConst. Design the form with a ListBox and two buttons (Process and Close). Add VBA Code: Insert the macro code into the main module. Insert the UserForm code into the Form_AnnotationsPro code-behind. Insert the swConst code into the swConst module. Save and Run the Macro: Save the macro (e.g., AnnotationsPro.swp). Run by navigating to Tools > Macro > Run and selecting your macro. Using the Macro: The UserForm Annotations Pro will appear for interaction. Select settings from the ListBox and press Process to apply. Close the form when done. VBA Macro Code '----------------------------------------------------------------------------- ' Annotations_Pro.swp ' This macro requires SolidWorks constants (swconst.bas) module to be inserted. ' ' This macro completes the folowing tasks when run on a model or drawing: ' * Set annotations and dimensions to 'Use Document Font'. (All) ' * Set view titles to match appropriate text format and underline (Dwg) ' * Set BOM balloon size/fit and bent leader to match document setting (Dwg) ' * Set arrowhead for annotations to match document setting (All) ' * Set arrowhead for dimensions to match document setting (All) ' * Set annotations with triangle border to a consistent size (revision)(Dwg) ' * Trims/Pads spaces in weld symbol notes for consistent weld symbols (Dwg) ' ' Start this macro with 'Main' subroutine below '------------------------------------------------------------------------------ ' Predefine common objects and variables used in this module '------------------------------------------------------------------------------ Global swApp As Object ' SolidWorks application Global Document As Object ' Active document '------------------------------------------------------------------------------ ' Start this macro here '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set Document = swApp.ActiveDoc ' Grab active doc If Document Is Nothing Then ' Is doc loaded MsgBox \"No model loaded.\" ' Nothing - Warn Else ' Check doc loaded Form_AnnotationsPro.Show End If ' Check doc loaded If Not Document Is Nothing Then ' If document is loaded Document.GraphicsRedraw2 ' Redraw gfx window End If End Sub VBA UserForm Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim FileType As Integer ' Active document type Dim Annotation As Object ' Current annotation Dim Note As Object ' Specific annotation Dim TextFormat As Object ' Annotation text format Dim DisplayDim As Object ' Dimension object Dim View As Object ' Current drawing view Dim Feature As Object ' Current model feature Dim TriangleSize As Integer ' Triangle size preset Dim FirstView As Boolean ' First drawing view indicator Const Version = \"1.21\" '------------------------------------------------------------------------------ ' Set annotation text to correct text format, and set 'Use Document Font'. '------------------------------------------------------------------------------ Private Sub FixAnnotationFont() ' Detect type of annotation, then reset all annotations to match current ' document based settings. Select Case Annotation.GetType ' Detect type of annotation Case swCThread ' Cosmetic Thread Case swDatumTag ' Datum Feature Case swDatumTargetSym ' Datum Target Case swDisplayDimension ' Component Dimensions ' Updated via FixDisplayDims routine Case swGTol ' Geometric Tolerance ' Set text format to swDetailingNoteTextFormat If ListBoxAnnotations.Selected(5) = True Then Annotation.SetTextFormat 0, True, _ Document.GetUserPreferenceTextFormat(swDetailingNoteTextFormat) End If Case swNote ' Note FixNoteText ' Fix text settings FixLeaders ' Fix leader settings Case swSFSymbol ' Surface Finish Symbol ' Set text format to swDetailingSurfaceFinishTextFormat If ListBoxAnnotations.Selected(8) = True Then Annotation.SetTextFormat 0, True, _ Document.GetUserPreferenceTextFormat(swDetailingSurfaceFinishTextFormat) End If Case swWeldSymbol ' Weld Symbol ' Set text format to swDetailingWeldSymbolTextFormat If ListBoxAnnotations.Selected(6) = True Then Annotation.SetTextFormat 0, True, _ Document.GetUserPreferenceTextFormat(swDetailingWeldSymbolTextFormat) End If Case swCustomSymbol ' Custom Symbol Case swDowelSym ' Dowel Symbol Case swLeader ' Leader Note FixNoteText ' Fix text settings FixLeaders ' Fix leader settings Case Else End Select End Sub '------------------------------------------------------------------------------ ' Set view titles (SECTION/DETAIL/VIEW) to appropriate text format & underline ' Set annotations with triangle border to a consistent size (revision) '------------------------------------------------------------------------------ Private Sub FixNoteText() Dim NoteVal As String Set Note = Annotation.GetSpecificAnnotation ' Get note text ' Get contents of the note text NoteVal = Note.GetText ' Detect content of note text ' Update text format to current note text format If ListBoxAnnotations.Selected(0) = True Then Annotation.SetTextFormat 0, True, _ Document.GetUserPreferenceTextFormat(swDetailingNoteTextFormat) ' True = 'Use Doc Format' End If ' If annotation balloon style matches BOM balloon style set use of ' bent leader to match document based settings If ListBoxAnnotations.Selected(3) = True Then If Note.GetBalloonStyle = _ Document.GetUserPreferenceIntegerValue(swDetailingBOMBalloonStyle) _ Then ' Update balloon leader settings Annotation.SetLeader2 True, swLS_SMART, True, _ Document.GetUserPreferenceToggle(swDetailingBalloonsDisplayWithBentLeader), _ False, False ' Update balloon size Note.SetBalloon _ Document.GetUserPreferenceIntegerValue(swDetailingBOMBalloonStyle), _ Document.GetUserPreferenceIntegerValue(swDetailingBOMBalloonFit) End If End If ' If annotation balloon style is a triangle, treat it as a ' revision triangle and update its size. If Note.GetBalloonStyle = swBS_Triangle Then ' Triangle Balloon = Rev If ListBoxAnnotations.Selected(4) = True Then Annotation.SetLeader2 False, swLS_SMART, True, False, False, False Note.SetBalloon swBS_Triangle, TriangleSize ' Update triangle size End If End If If ListBoxAnnotations.Selected(1) = True Then If Mid$(NoteVal, 1, 7) = \"SECTION\" Then ' If note text begins with \"SECTION\", then set to section font & underline Set TextFormat = _ Document.GetUserPreferenceTextFormat(swDetailingSectionTextFormat) TextFormat.Underline = True ' Underline note Note.SetTextFormat False, TextFormat ' False = use my settings ElseIf Mid$(NoteVal, 1, 6) = \"DETAIL\" Then ' If note text begins with \"DETAIL\", then set to detail font & underline Set TextFormat = _ Document.GetUserPreferenceTextFormat(swDetailingDetailTextFormat) TextFormat.Underline = True ' Underline note Note.SetTextFormat False, TextFormat ' False = use my settings ElseIf Mid$(NoteVal, 1, 4) = \"VIEW\" Then ' If note text begins with \"VIEW\", then set to view arrow font & underline Set TextFormat = _ Document.GetUserPreferenceTextFormat(swDetailingViewArrowTextFormat) TextFormat.Underline = True ' Underline note Note.SetTextFormat False, TextFormat ' False = use my settings ElseIf NoteVal = \"NOTES:\" Or NoteVal = \"NOTE:\" Then ' If note text equals \"NOTES:\" or \"NOTE:\", then set text to note font, ' underline, and increase text size Set TextFormat = _ Document.GetUserPreferenceTextFormat(swDetailingNoteTextFormat) TextFormat.Underline = True ' Underline note TextFormat.CharHeight = TextFormat.CharHeight * 1.5 ' Set char height Note.SetTextFormat False, TextFormat ' False = use my settings ElseIf NoteVal = \"<MOD-CL>\" Then ' If note equals \"<MOD-CL>\" (Centerline) then set text to note font ' and increase text size Set TextFormat = _ Document.GetUserPreferenceTextFormat(swDetailingNoteTextFormat) TextFormat.Underline = True ' Remove underline TextFormat.CharHeight = TextFormat.CharHeight * 1.5 ' Set char height Note.SetTextFormat False, TextFormat ' False = use my settings End If End If End Sub '------------------------------------------------------------------------------ ' Sets arrowhead for annotations to match document setting '------------------------------------------------------------------------------ Private Sub FixLeaders() If Annotation.GetLeader = True Then ' If a leader exists For i = 0 To Annotation.GetLeaderCount ' Get number of leaders Annotation.GetArrowHeadStyleAtIndex (i) ' Fix arrow for each leader Annotation.SetLeader2 Annotation.GetLeader, _ Annotation.GetLeaderSide, _ True, Annotation.GetBentLeader, _ Annotation.GetLeaderPerpendicular, _ Annotation.GetLeaderAllAround ' True = smartArrowHeadStyle Next i ' Next leader End If ' Leader displayed End Sub '------------------------------------------------------------------------------ ' Sets arrowhead for dimensions to match document setting '------------------------------------------------------------------------------ Private Sub FixDisplayDims(MyDim) If ListBoxAnnotations.Selected(2) = True Then ' Reset arrow selections MyDim.SetArrowHeadStyle False, _ Document.GetUserPreferenceIntegerValue(swDetailingArrowStyleForDimensions) ' False = use my setting ' Set arrow selections to use document settings. MyDim.SetArrowHeadStyle True, _ Document.GetUserPreferenceIntegerValue(swDetailingArrowStyleForDimensions) ' True = use doc setting ' Reset dimension font to use document font. Set Annotation = DisplayDim.GetAnnotation ' Get next annotation Annotation.SetTextFormat 0, True, _ Document.GetUserPreferenceTextFormat(swDetailingDimensionTextFormat) ' Reset tolerance font to use document font. Set DimObj = DisplayDim.GetDimension ' Get dimension FontInfo = DimObj.GetToleranceFontInfo ' Get tolerance font info DimHt = Document.GetUserPreferenceDoubleValue(swDetailingToleranceTextHeight) DimObj.SetToleranceFontInfo True, 1, DimHt ' Use doc setting End If End Sub '------------------------------------------------------------------------------ ' Trims/Pads spaces in weld symbol notes '------------------------------------------------------------------------------ Private Sub FixWeldSym(MyDoc) Dim NewText(9) As String ' Trim spaces from each weld annotation For z = 1 To 9 text = MyDoc.GetText(z) ' Get individual text text = RTrim(LTrim(text)) ' Trim left and right spaces If text = \" \" Then text = \"\" ' Trim single space NewText(z) = UCase(text) ' Force annotation to upper case Next z ' Pad spaces for weld length above weld line If NewText(1) <> \"\" And Len(NewText(3)) < 4 Then NewText(3) = Left$(NewText(3) + \" \", 4) End If ' Pad spaces for weld length below weld line If NewText(5) <> \"\" And Len(NewText(7)) < 4 Then NewText(7) = Left$(NewText(7) + \" \", 4) End If ' Update annotations above weld line MyDoc.SetText True, NewText(1), NewText(2), _ NewText(3), NewText(4), MyDoc.GetContour(True) ' Update annotations below weld line MyDoc.SetText False, NewText(5), NewText(6), _ NewText(7), NewText(8), MyDoc.GetContour(False) ' Update weld process annotations. Use existing settings MyDoc.SetProcess MyDoc.GetProcess, _ NewText(9), MyDoc.GetProcessReference End Sub '------------------------------------------------------------------------------ ' Traverse each sheet of the drawing, then each drawing view and update/repair ' all annotations and dimensions '------------------------------------------------------------------------------ Sub RepairDrawing() SheetNames = Document.GetSheetNames ' Get names of sheets For i = 0 To Document.GetSheetCount - 1 ' For each sheet Document.ActivateSheet (SheetNames(i)) ' Activate sheet Set View = Document.GetFirstView ' Get first view FirstView = True While Not View Is Nothing ' View is valid ' Do the following only if current view is not FirstView (Sheet Format) If FirstView = False Then ' If not FirstView Set Annotation = View.GetFirstAnnotation2 ' Get first annotation While Not Annotation Is Nothing ' Annotation is valid Set Note = Annotation.GetSpecificAnnotation ' Get note text FixAnnotationFont ' Set correct text format Set Annotation = Annotation.GetNext2 ' Get next annotation Wend ' Repeat each annotation End If ' FirstView check FirstView = False ' Traverse thru all DisplayDim's in drawing view Set DisplayDim = View.GetFirstDisplayDimension3 ' Get first dimension While Not DisplayDim Is Nothing ' dimension valid FixDisplayDims DisplayDim ' Fix dimension settings Set DisplayDim = DisplayDim.GetNext3 ' Get next dimension Wend ' Repeat for all dimension ' Traverse thru all WeldSymbols in drawing view If ListBoxAnnotations.Selected(7) = True Then Set WeldSymbol = View.GetFirstWeldSymbol ' Get first weld symb While Not WeldSymbol Is Nothing ' Weld symb valid FixWeldSym WeldSymbol ' Fix weld symb notes Set WeldSymbol = WeldSymbol.GetNext ' Next weld symb Wend ' Repeat for all weld symbs End If Set View = View.GetNextView ' Get next view Wend ' Repeat for all views Next i ' Next sheet If i > 0 Then ' More than 1 sheet Document.ActivateSheet (SheetNames(0)) ' Back to 1st sheet End If End Sub '------------------------------------------------------------------------------ ' Traverse each annotation and update/repair text format ' Traverse each model feature and update/repair all dimensions '------------------------------------------------------------------------------ Sub RepairModel() Set Annotation = Document.GetFirstAnnotation2 ' Get first annot While Not Annotation Is Nothing ' Annotation is valid Set Note = Annotation.GetSpecificAnnotation ' Get note text FixAnnotationFont ' Fix annotation font Set Annotation = Annotation.GetNext2 ' Get next annotation Wend ' Repeat for each annotation ' Update dimensions in a SolidWorks model by traversing thru each feature ' in the model, then traversing thru each dimension in the feature. Set Feature = Document.FirstFeature ' Get the 1st feature While Not Feature Is Nothing ' Feature is valid ' Traverse thru all DisplayDim's in model feature Set DisplayDim = Feature.GetFirstDisplayDimension ' Get first dimension While Not DisplayDim Is Nothing ' dimension valid FixDisplayDims DisplayDim ' Fix dimension settings Set DisplayDim = _ Feature.GetNextDisplayDimension(DisplayDim) ' Get next dimension Wend ' Repeat for all dimension Set SubFeat = Feature.GetFirstSubFeature ' Get first feature ' Traverse thru all sub features in model feature While Not SubFeat Is Nothing ' Feature is valid ' Traverse thru all DisplayDim's in model sub feature Set DisplayDim = SubFeat.GetFirstDisplayDimension ' Get first dim While Not DisplayDim Is Nothing ' dimension valid FixDisplayDims DisplayDim ' Fix dimension settings Set DisplayDim = _ Feature.GetNextDisplayDimension(DisplayDim) ' Get next dimension Wend ' Repeat for all dimension Set SubFeat = SubFeat.GetNextSubFeature ' Get next feature Wend Set Feature = Feature.GetNextFeature() ' Get next feature Wend ' Repeat for all features End Sub Private Sub CommandClose_Click() End End Sub Private Sub CommandProcess_Click() ' Settings for revision triangle size BalloonSize = Document.GetUserPreferenceIntegerValue(swDetailingBOMBalloonFit) If BalloonSize > 0 Then TriangleSize = BalloonSize - 1 ' 1 less than BOM balloon Else TriangleSize = BalloonSize ' Size equals BOM balloon End If FirstView = False ' Clear FirstView indicator FileType = Document.GetType ' Get doc type If FileType = swDocDRAWING Then ' Is doc type drawing RepairDrawing ElseIf FileType = swDocPART Or _ FileType = swDocASSEMBLY Then ' Is doc type model RepairModel End If ' Check doc type For i = 0 To ListBoxAnnotations.ListCount - 1 ListBoxAnnotations.Selected(i) = False Next i Document.WindowRedraw ' Redraw screen End Sub Private Sub UserForm_Initialize() Form_AnnotationsPro.Caption = Form_AnnotationsPro.Caption + \" \" + Version ListBoxAnnotations.Clear ListBoxAnnotations.AddItem \"Correct note fonts.\" ' 0 ListBoxAnnotations.AddItem \"Highlight view and note titles.\" ' 1 ListBoxAnnotations.AddItem \"Correct Dimension fonts.\" ' 2 ListBoxAnnotations.AddItem \"Correct BOM ballons sizes.\" ' 3 ListBoxAnnotations.AddItem \"Correct Revision triangle size.\" ' 4 ListBoxAnnotations.AddItem \"Correct Geometric Tolerance fonts.\" ' 5 ListBoxAnnotations.AddItem \"Correct weld symbol note fonts.\" ' 6 ListBoxAnnotations.AddItem \"Correct weld symbol note padding.\" ' 7 ListBoxAnnotations.AddItem \"Correct surface finish symbol fonts.\" ' 8 End Sub swConst Code ' Defines Public Const swTnChamfer As String = \"Chamfer\" Public Const swTnFillet As String = \"Fillet\" Public Const swTnCavity As String = \"Cavity\" Public Const swTnDraft As String = \"Draft\" Public Const swTnMirrorSolid As String = \"MirrorSolid\" Public Const swTnCirPattern As String = \"CirPattern\" Public Const swTnLPattern As String = \"LPattern\" Public Const swTnMirrorPattern As String = \"MirrorPattern\" Public Const swTnShell As String = \"Shell\" Public Const swTnBlend As String = \"Blend\" Public Const swTnBlendCut As String = \"BlendCut\" Public Const swTnExtrusion As String = \"Extrusion\" Public Const swTnBoss As String = \"Boss\" Public Const swTnCut As String = \"Cut\" Public Const swTnRefCurve As String = \"RefCurve\" Public Const swTnRevolution As String = \"Revolution\" Public Const swTnRevCut As String = \"RevCut\" Public Const swTnSweep As String = \"Sweep\" Public Const swTnSweepCut As String = \"SweepCut\" Public Const swTnStock As String = \"Stock\" Public Const swTnSurfCut As String = \"SurfCut\" Public Const swTnThicken As String = \"Thicken\" Public Const swTnThickenCut As String = \"ThickenCut\" Public Const swTnVarFillet As String = \"VarFillet\" Public Const swTnSketchHole As String = \"SketchHole\" Public Const swTnHoleWzd As String = \"HoleWzd\" Public Const swTnImported As String = \"Imported\" Public Const swTnBaseBody As String = \"BaseBody\" Public Const swTnDerivedLPattern As String = \"DerivedLPattern\" Public Const swTnCosmeticThread As String = \"CosmeticThread\" Public Const swTnSheetMetal As String = \"SheetMetal\" Public Const swTnFlattenBends As String = \"FlattenBends\" Public Const swTnProcessBends As String = \"ProcessBends\" Public Const swTnOneBend As String = \"OneBend\" Public Const swTnBaseFlange As String = \"SMBaseFlange\" Public Const swTnSketchBend As String = \"SketchBend\" Public Const swTnSM3dBend As String = \"SM3dBend\" Public Const swTnEdgeFlange As String = \"EdgeFlange\" Public Const swTnFlatPattern As String = \"FlatPattern\" Public Const swTnCenterMark As String = \"CenterMark\" Public Const swTnDrSheet As String = \"DrSheet\" Public Const swTnAbsoluteView As String = \"AbsoluteView\" Public Const swTnDetailView As String = \"DetailView\" Public Const swTnRelativeView As String = \"RelativeView\" Public Const swTnSectionPartView As String = \"SectionPartView\" Public Const swTnSectionAssemView As String = \"SectionAssemView\" Public Const swTnUnfoldedView As String = \"UnfoldedView\" Public Const swTnAuxiliaryView As String = \"AuxiliaryView\" Public Const swTnDetailCircle As String = \"DetailCircle\" Public Const swTnDrSectionLine As String = \"DrSectionLine\" Public Const swTnMateCoincident As String = \"MateCoincident\" Public Const swTnMateConcentric As String = \"MateConcentric\" Public Const swTnMateDistanceDim As String = \"MateDistanceDim\" Public Const swTnMateParallel As String = \"MateParallel\" Public Const swTnMateTangent As String = \"MateTangent\" Public Const swTnReference As String = \"Reference\" Public Const swTnRefPlane As String = \"RefPlane\" Public Const swTnRefAxis As String = \"RefAxis\" Public Const swTnReferenceCurve As String = \"ReferenceCurve\" Public Const swTnRefSurface As String = \"RefSurface\" Public Const swTnCoordinateSystem As String = \"CoordSys\" Public Const swTnAttribute As String = \"Attribute\" Public Const swTnProfileFeature As String = \"ProfileFeature\" Public Const SYMBOL_MARKER_START As String = \"<\" Public Const SYMBOL_MARKER_END As String = \">\" Public Const SYMBOL_MARKER_SPACE As String = \"-\" Public Const PLANE_TYPE As Integer = 4001 Public Const CYLINDER_TYPE As Integer = 4002 Public Const CONE_TYPE As Integer = 4003 Public Const SPHERE_TYPE As Integer = 4004 Public Const TORUS_TYPE As Integer = 4005 Public Const BSURF_TYPE As Integer = 4006 Public Const BLEND_TYPE As Integer = 4007 Public Const OFFSET_TYPE As Integer = 4008 Public Const EXTRU_TYPE As Integer = 4009 Public Const SREV_TYPE As Integer = 4010 Public Const LINE_TYPE As Integer = 3001 Public Const CIRCLE_TYPE As Integer = 3002 Public Const ELLIPSE_TYPE As Integer = 3003 Public Const INTERSECTION_TYPE As Integer = 3004 Public Const BCURVE_TYPE As Integer = 3005 Public Const SPCURVE_TYPE As Integer = 3006 Public Const CONSTPARAM_TYPE As Integer = 3008 Public Const TRIMMED_TYPE As Integer = 3009 Public Const TIME_ORIGIN As String = \"1990, 1, 1, 0, 0, 0\" Public Const SWBODYINTERSECT As Integer = 15901 Public Const SWBODYCUT As Integer = 15902 Public Const SWBODYADD As Integer = 15903 Public Const NUM_HOLE_GENERIC_TYPES As Integer = 6 Public Const NUM_HOLE_TYPES As Integer = 57 Public Const NUM_HOLE_STANDARD_TYPES As Integer = 249 ' Enumerations ' ---- ' Document Types ' ---- Public Enum swDocumentTypes_e swDocNONE = 0 ' Used to be TYPE_NONE swDocPART = 1 ' Used to be TYPE_PART swDocASSEMBLY = 2 ' Used to be TYPE_ASSEMBLY swDocDRAWING = 3 ' Used to be TYPE_DRAWING swDocSDM = 4 ' Solid data manager. End Enum ' ---- ' Selection Types ' ---- ' The following are the possible type ids returned by the function ' ISelectionMgr::GetSelectedObjectType. ' The string names to the right of the type id definition is the \"type name\" ' used by the methods: IModelDoc::SelectByID && AndSelectByID Public Enum swSelectType_e swSelNOTHING = 0 swSelEDGES = 1 ' \"EDGE\" swSelFACES = 2 ' \"FACE\" swSelVERTICES = 3 ' \"VERTEX\" swSelDATUMPLANES = 4 ' \"PLANE\" swSelDATUMAXES = 5 ' \"AXIS\" swSelDATUMPOINTS = 6 ' \"DATUMPOINT\" swSelOLEITEMS = 7 ' \"OLEITEM\" swSelATTRIBUTES = 8 ' \"ATTRIBUTE\" swSelSKETCHES = 9 ' \"SKETCH\" swSelSKETCHSEGS = 10 ' \"SKETCHSEGMENT\" swSelSKETCHPOINTS = 11 ' \"SKETCHPOINT\" swSelDRAWINGVIEWS = 12 ' \"DRAWINGVIEW\" swSelGTOLS = 13 ' \"GTOL\" swSelDIMENSIONS = 14 ' \"DIMENSION\" swSelNOTES = 15 ' \"NOTE\" swSelSECTIONLINES = 16 ' \"SECTIONLINE\" swSelDETAILCIRCLES = 17 ' \"DETAILCIRCLE\" swSelSECTIONTEXT = 18 ' \"SECTIONTEXT\" swSelSHEETS = 19 ' \"SHEET\" swSelCOMPONENTS = 20 ' \"COMPONENT\" swSelMATES = 21 ' \"MATE\" swSelBODYFEATURES = 22 ' \"BODYFEATURE\" swSelREFCURVES = 23 ' \"REFCURVE\" swSelEXTSKETCHSEGS = 24 ' \"EXTSKETCHSEGMENT\" swSelEXTSKETCHPOINTS = 25 ' \"EXTSKETCHPOINT\" swSelHELIX = 26 ' \"HELIX\" (is this wrong?) swSelREFERENCECURVES = 26 ' \"REFERENCECURVES\" swSelREFSURFACES = 27 ' \"REFSURFACE\" swSelCENTERMARKS = 28 ' \"CENTERMARKS\" swSelINCONTEXTFEAT = 29 ' \"INCONTEXTFEAT\" swSelMATEGROUP = 30 ' \"MATEGROUP\" swSelBREAKLINES = 31 ' \"BREAKLINE\" swSelINCONTEXTFEATS = 32 ' \"INCONTEXTFEATS\" swSelMATEGROUPS = 33 ' \"MATEGROUPS\" swSelSKETCHTEXT = 34 ' \"SKETCHTEXT\" swSelSFSYMBOLS = 35 ' \"SFSYMBOL\" swSelDATUMTAGS = 36 ' \"DATUMTAG\" swSelCOMPPATTERN = 37 ' \"COMPPATTERN\" swSelWELDS = 38 ' \"WELD\" swSelCTHREADS = 39 ' \"CTHREAD\" swSelDTMTARGS = 40 ' \"DTMTARG\" swSelPOINTREFS = 41 ' \"POINTREF\" swSelDCABINETS = 42 ' \"DCABINET\" swSelEXPLVIEWS = 43 ' \"EXPLODEDVIEWS\" swSelEXPLSTEPS = 44 ' \"EXPLODESTEPS\" swSelEXPLLINES = 45 ' \"EXPLODELINES\" swSelSILHOUETTES = 46 ' \"SILHOUETTE\" swSelCONFIGURATIONS = 47 ' \"CONFIGURATIONS\" swSelOBJHANDLES = 48 swSelARROWS = 49 ' \"VIEWARROW\" swSelZONES = 50 ' \"ZONES\" swSelREFEDGES = 51 ' \"REFERENCE-EDGE\" swSelREFFACES = 52 swSelREFSILHOUETTE = 53 swSelBOMS = 54 ' \"BOM\" swSelEQNFOLDER = 55 ' \"EQNFOLDER\" swSelSKETCHHATCH = 56 ' \"SKETCHHATCH\" swSelIMPORTFOLDER = 57 ' \"IMPORTFOLDER\" swSelVIEWERHYPERLINK = 58 ' \"HYPERLINK\" swSelMIDPOINTS = 59 swSelCUSTOMSYMBOLS = 60 ' \"CUSTOMSYMBOL\" swSelCOORDSYS = 61 ' \"COORDSYS\" swSelDATUMLINES = 62 ' \"REFLINE\" swSelROUTECURVES = 63 swSelBOMTEMPS = 64 ' \"BOMTEMP\" swSelROUTEPOINTS = 65 ' \"ROUTEPOINT\" swSelCONNECTIONPOINTS = 66 ' \"CONNECTIONPOINT\" swSelROUTESWEEPS = 67 swSelPOSGROUP = 68 ' \"POSGROUP\" swSelBROWSERITEM = 69 ' \"BROWSERITEM\" swSelFABRICATEDROUTE = 70 ' \"ROUTEFABRICATED\" swSelSKETCHPOINTFEAT = 71 ' \"SKETCHPOINTFEAT\" swSelEMPTYSPACE = 72 ' (is this wrong?) swSelCOMPSDONTOVERRIDE = 72 swSelLIGHTS = 73 ' \"LIGHTS\" swSelWIREBODIES = 74 swSelSURFACEBODIES = 75 ' \"SURFACEBODY\" swSelSOLIDBODIES = 76 ' \"SOLIDBODY\" swSelFRAMEPOINT = 77 ' \"FRAMEPOINT\" swSelSURFBODIESFIRST = 78 swSelMANIPULATORS = 79 ' \"MANIPULATOR\" swSelPICTUREBODIES = 80 ' \"PICTURE BODY\" swSelSOLIDBODIESFIRST = 81 swSelDOWELSYMS = 86 ' \"DOWELSYM\" swSelEXTSKETCHTEXT = 88 ' \"EXTSKETCHTEXT\" swSelBLOCKINST = 93 ' \"BLOCKINST\" swSelSKETCHREGION = 95 ' \"SKETCHREGION\" swSelSKETCHCONTOUR = 96 ' \"SKETCHCONTOUR\" swSelBLOCKDEF = 99 ' \"BLOCKDEF\" swSelCENTERMARKSYMS = 100 ' \"CENTERMARKSYMS\" swSelCENTERLINES = 103 ' \"CENTERLINE\" ' swSelEVERYTHING = 4294967293 ' swSelLOCATIONS = 4294967294 ' swSelUNSUPPORTED = 4294967295 End Enum ' ---- ' Events Notifications ' ---- Public Enum swViewNotify_e ' For IModelView ( DIID_DSldWorksEvents swViewRepaintNotify = 1 swViewChangeNotify = 2 swViewDestroyNotify = 3 swViewRepaintPostNotify = 4 swViewBufferSwapNotify = 5 swViewDestroyNotify2 = 6 End Enum Public Enum swFMViewNotify_e ' For IFeatMgrView ( DIID_DSldWorksEvents swFMViewActivateNotify = 1 swFMViewDeactivateNotify = 2 swFMViewDestroyNotify = 3 End Enum Public Enum swPartNotify_e ' For IPartDoc ( DIID_DPartDocEvents ) swPartRegenNotify = 1 swPartDestroyNotify = 2 swPartRegenPostNotify = 3 swPartViewNewNotify = 4 swPartNewSelectionNotify = 5 swPartFileSaveNotify = 6 swPartFileSaveAsNotify = 7 swPartLoadFromStorageNotify = 8 swPartSaveToStorageNotify = 9 swPartConfigChangeNotify = 10 swPartConfigChangePostNotify = 11 swPartAutoSaveNotify = 12 swPartAutoSaveToStorageNotify = 13 swPartViewNewNotify2 = 14 swPartLightingDialogCreateNotify = 15 swPartAddItemNotify = 16 swPartRenameItemNotify = 17 swPartDeleteItemNotify = 18 swPartModifyNotify = 19 swPartFileReloadNotify = 20 swPartAddCustomPropertyNotify = 21 swPartChangeCustomPropertyNotify = 22 swPartDeleteCustomPropertyNotify = 23 swPartFeatureEditPreNotify = 24 swPartFeatureSketchEditPreNotify = 25 swPartFileSaveAsNotify2 = 26 swPartDeleteSelectionPreNotify = 27 swPartFileReloadPreNotify = 28 swPartBodyVisibleChangeNotify = 29 swPartRegenPostNotify2 = 30 swPartFileSavePostNotify = 31 swPartLoadFromStorageStoreNotify = 32 swPartSaveToStorageStoreNotify = 33 End Enum Public Enum swDrawingNotify_e ' For IDrawingDoc ( DIID_DDrawingDocEvents ) swDrawingRegenNotify = 1 swDrawingDestroyNotify = 2 swDrawingRegenPostNotify = 3 swDrawingViewNewNotify = 4 swDrawingNewSelectionNotify = 5 swDrawingFileSaveNotify = 6 swDrawingFileSaveAsNotify = 7 swDrawingLoadFromStorageNotify = 8 swDrawingSaveToStorageNotify = 9 swDrawingAutoSaveNotify = 10 swDrawingAutoSaveToStorageNotify = 11 swDrawingConfigChangeNotify = 12 swDrawingConfigChangePostNotify = 13 swDrawingViewNewNotify2 = 14 swDrawingAddItemNotify = 15 swDrawingRenameItemNotify = 16 swDrawingDeleteItemNotify = 17 swDrawingModifyNotify = 18 swDrawingFileReloadNotify = 19 swDrawingAddCustomPropertyNotify = 20 swDrawingChangeCustomPropertyNotify = 21 swDrawingDeleteCustomPropertyNotify = 22 swDrawingFileSaveAsNotify2 = 23 swDrawingDeleteSelectionPreNotify = 24 swDrawingFileReloadPreNotify = 25 swDrawingFileSavePostNotify = 26 swDrawingLoadFromStorageStoreNotify = 27 swDrawingSaveToStorageStoreNotify = 28 End Enum Public Enum swAssemblyNotify_e ' For IAssemblyDoc ( DIID_DAssemblyDocEvents ) swAssemblyRegenNotify = 1 swAssemblyDestroyNotify = 2 swAssemblyRegenPostNotify = 3 swAssemblyViewNewNotify = 4 swAssemblyNewSelectionNotify = 5 swAssemblyFileSaveNotify = 6 swAssemblyFileSaveAsNotify = 7 swAssemblyLoadFromStorageNotify = 8 swAssemblySaveToStorageNotify = 9 swAssemblyConfigChangeNotify = 10 swAssemblyConfigChangePostNotify = 11 swAssemblyAutoSaveNotify = 12 swAssemblyAutoSaveToStorageNotify = 13 swAssemblyBeginInContextEditNotify = 14 swAssemblyEndInContextEditNotify = 15 swAssemblyViewNewNotify2 = 16 swAssemblyLightingDialogCreateNotify = 17 swAssemblyAddItemNotify = 18 swAssemblyRenameItemNotify = 19 swAssemblyDeleteItemNotify = 20 swAssemblyModifyNotify = 21 swAssemblyComponentStateChangeNotify = 22 swAssemblyFileDropNotify = 23 swAssemblyFileReloadNotify = 24 swAssemblyComponentStateChangeNotify2 = 25 swAssemblyAddCustomPropertyNotify = 26 swAssemblyChangeCustomPropertyNotify = 27 swAssemblyDeleteCustomPropertyNotify = 28 swAssemblyFeatureEditPreNotify = 29 swAssemblyFeatureSketchEditPreNotify = 30 swAssemblyFileSaveAsNotify2 = 31 swAssemblyInterferenceNotify = 32 swAssemblyDeleteSelectionPreNotify = 33 swAssemblyFileReloadPreNotify = 34 swAssemblyComponentMoveNotify = 35 swAssemblyComponentVisibleChangeNotify = 36 swAssemblyBodyVisibleChangeNotify = 37 swAssemblyFileDropPreNotify = 38 swAssemblyFileSavePostNotify = 39 swAssemblyLoadFromStorageStoreNotify = 40 swAssemblySaveToStorageStoreNotify = 41 End Enum Public Enum swAppNotify_e ' For ISldWorks ( DIID_DSldWorksEvents ) swAppFileOpenNotify = 1 swAppFileNewNotify = 2 swAppDestroyNotify = 3 swAppActiveDocChangeNotify = 4 swAppActiveModelDocChangeNotify = 5 swAppPropertySheetCreateNotify = 6 swAppNonNativeFileOpenNotify = 7 swAppLightSheetCreateNotify = 8 swAppDocumentConversionNotify = 9 swAppLightweightComponentOpenNotify = 10 swAppDocumentLoadNotify = 11 swAppFileNewNotify2 = 12 swAppFileOpenNotify2 = 13 swAppReferenceNotFoundNotify = 14 swAppPromptForFilenameNotify = 15 swAppBeginTranslationNotify = 16 swAppEndTranslationNotify = 17 End Enum Public Enum swPropertySheetNotify_e swPropertySheetDestroyNotify = 1 swPropertySheetHelpNotify = 2 End Enum ' ---- ' Parameter Types ' ---- Public Enum swParamType_e ' For use with IAttributeDef::AddParameter (for example) swParamTypeDouble = 0 swParamTypeString = 1 swParamTypeInteger = 2 swParamTypeDVector = 3 End Enum ' ---- ' The following is for angular dimension info returned GetDimensionInfo() ' ---- Public Enum swQuadant_e swQuadUnknown = 0 swQuadPosQ1 = 1 swQuadNegQ1 = 2 swQuadPosQ2 = 3 swQuadNegQ2 = 4 End Enum ' ---- ' The following enum is for interpreting ellipse data ' ---- Public Enum swEllipsePts_e swEllipseStartPt = 0 swEllipseEndPt = 1 swEllipseCenterPt = 2 swEllipseMajorPt = 3 swEllipseMinorPt = 4 End Enum Public Enum swParabolaPts_e swParabolaStartPt = 0 swParabolaEndPt = 1 swParabolaFocusPt = 2 swParabolaApexPt = 3 End Enum ' ---- ' The following define gtol symbol indices ' ---- Public Enum swGtolMatCondition_e swMcNONE = 0 swMcMMC = 1 swMcRFS = 2 swMcLMC = 3 swMsNONE = 4 swMsPROJTOLZONE = 5 swMsDIA = 6 swMsSPHDIA = 7 swMsRAD = 8 swMsSPHRAD = 9 swMsREF = 10 swMsARCLEN = 11 End Enum Public Enum swGtolGeomCharSymbol_e swGcsNONE = 12 swGcsSYMMETRY = 13 swGcsSTRAIGHT = 14 swGcsFLAT = 15 swGcsROUND = 16 swGcsCYL = 17 swGcsLINEPROF = 18 swGcsSURFPROF = 19 swGcsANG = 20 swGcsPERP = 21 swGcsPARALLEL = 22 swGcsPOSITION = 23 swGcsCONC = 24 swGcsCIRCRUNOUT = 25 swGcsTOTALRUNOUT = 26 swGcsCIRCOPENRUNOUT = 27 swGcsTOTALOPENRUNOUT = 28 End Enum Public Enum swMateType_e swMateCOINCIDENT = 0 swMateCONCENTRIC = 1 swMatePERPENDICULAR = 2 swMatePARALLEL = 3 swMateTANGENT = 4 swMateDISTANCE = 5 swMateANGLE = 6 swMateUNKNOWN = 7 swMateSYMMETRIC = 8 swMateCAMFOLLOWER = 9 End Enum ' Enumerations for Detail View Creation Public Enum swDetCircleShowType_e swDetCirclePROFILE = 0 swDetCircleCIRCLE = 1 swDetCircleDONTSHOW = 2 End Enum ' Enumerations for Detail View Style Public Enum swDetViewStyle_e swDetViewSTANDARD = 0 swDetViewBROKEN = 1 swDetViewLEADER = 2 swDetViewNOLEADER = 3 swDetViewCONNECTED = 4 End Enum ' This enum has been changed to correct improper mate alignment mapping Public Enum swMateAlign_e swMateAlignALIGNED = 0 swMateAlignANTI_ALIGNED = 1 swMateAlignCLOSEST = 2 swAlignNONE = 0 swAlignSAME = 1 swAlignAGAINST = 2 End Enum Public Enum swDisplayMode_e swWIREFRAME = 0 swHIDDEN_GREYED = 1 swHIDDEN = 2 swSHADED = 3 swFACETED_WIREFRAME = 4 swFACETED_HIDDEN_GREYED = 5 swFACETED_HIDDEN = 6 End Enum Public Enum swArrowStyle_e swOPEN_ARROWHEAD = 0 swCLOSED_ARROWHEAD = 1 swSLASH_ARROWHEAD = 2 swDOT_ARROWHEAD = 3 swORIGIN_ARROWHEAD = 4 swWIDE_ARROWHEAD = 5 swISOWIDE_ARROWHEAD = 6 swRUS_ARROWHEAD = 7 swCLOSETOP_ARROWHEAD = 8 swCLOSEBOT_ARROWHEAD = 9 swNO_ARROWHEAD = 10 End Enum Public Enum swLeaderSide_e swLS_SMART = 0 swLS_LEFT = 1 swLS_RIGHT = 2 End Enum ' ---- ' The following define Surface Finish Symbol types and options ' Used by InsertSurfaceFinishSymbol, ModifySurfaceFinishSymbol ' ---- Public Enum swSFSymType_e swSFBasic = 0 swSFMachining_Req = 1 swSFDont_Machine = 2 swSFJIS_Surface_Texture_1 = 3 ' Add next 5 JIS types, 08/26/99 swSFJIS_Surface_Texture_2 = 4 swSFJIS_Surface_Texture_3 = 5 swSFJIS_Surface_Texture_4 = 6 swSFJIS_No_Machining = 7 End Enum Public Enum swSFLaySym_e swSFNone = 0 swSFCircular = 1 swSFCross = 2 swSFMultiDir = 3 swSFParallel = 4 swSFPerp = 5 swSFRadial = 6 swSFParticulate = 7 End Enum ' The different possibilities for types of texts in a Surface Finish symbol. (SFSymbol::Get/SetText) Public Enum swSurfaceFinishSymbolText_e swSFSymbolMaterialRemovalAllowance = 1 swSFSymbolProductionMethod = 2 swSFSymbolSamplingLength = 3 swSFSymbolOtherRoughnessValue = 4 swSFSymbolMaximumRoughness = 5 swSFSymbolMinimumRoughness = 6 swSFSymbolRoughnessSpacing = 7 End Enum Public Enum swLeaderStyle_e swNO_LEADER = 0 swSTRAIGHT = 1 swBENT = 2 End Enum ' ---- ' Balloon Information. swBS_SplitCirc is not valid for Notes only for Balloons ' ---- Public Enum swBalloonStyle_e swBS_None = 0 swBS_Circular = 1 swBS_Triangle = 2 swBS_Hexagon = 3 swBS_Box = 4 swBS_Diamond = 5 swBS_SplitCirc = 6 swBS_Pentagon = 7 swBS_FlagPentagon = 8 swBS_FlagTriangle = 9 swBS_Underline = 10 End Enum Public Enum swBalloonFit_e swBF_Tightest = 0 swBF_1Char = 1 swBF_2Chars = 2 swBF_3Chars = 3 swBF_4Chars = 4 swBF_5Chars = 5 End Enum ' Possible values for the Balloon upper and lower text content. Public Enum swBalloonTextContent_e swBalloonTextCustom = 0 swBalloonTextItemNumber = 1 swBalloonTextQuantity = 2 End Enum ' ---- ' The following define length and angle unit types ' ---- Public Enum swLengthUnit_e swMM = 0 swCM = 1 swMETER = 2 swINCHES = 3 swFEET = 4 swFEETINCHES = 5 swANGSTROM = 6 swNANOMETER = 7 swMICRON = 8 swMIL = 9 swUIN = 10 End Enum Public Enum swAngleUnit_e swDEGREES = 0 swDEG_MIN = 1 swDEG_MIN_SEC = 2 swRADIANS = 3 End Enum Public Enum swFractionDisplay_e swNONE = 0 swDECIMAL = 1 swFRACTION = 2 End Enum ' ---- ' Drawing Paper Sizes ' ---- Public Enum swDwgPaperSizes_e swDwgPaperAsize = 0 swDwgPaperAsizeVertical = 1 swDwgPaperBsize = 2 swDwgPaperCsize = 3 swDwgPaperDsize = 4 swDwgPaperEsize = 5 swDwgPaperA4size = 6 swDwgPaperA4sizeVertical = 7 swDwgPaperA3size = 8 swDwgPaperA2size = 9 swDwgPaperA1size = 10 swDwgPaperA0size = 11 swDwgPapersUserDefined = 12 End Enum ' ---- ' Drawing Templates ' ---- Public Enum swDwgTemplates_e swDwgTemplateAsize = 0 swDwgTemplateAsizeVertical = 1 swDwgTemplateBsize = 2 swDwgTemplateCsize = 3 swDwgTemplateDsize = 4 swDwgTemplateEsize = 5 swDwgTemplateA4size = 6 swDwgTemplateA4sizeVertical = 7 swDwgTemplateA3size = 8 swDwgTemplateA2size = 9 swDwgTemplateA1size = 10 swDwgTemplateA0size = 11 swDwgTemplateCustom = 12 swDwgTemplateNone = 13 End Enum ' ---- ' Drawing Templates ' ---- Public Enum swStandardViews_e swFrontView = 1 swBackView = 2 swLeftView = 3 swRightView = 4 swTopView = 5 swBottomView = 6 swIsometricView = 7 swTrimetricView = 8 swDimetricView = 9 End Enum ' ---- ' Repaint Notification types ' ---- Public Enum swRepaintTypes_e swStandardUpdate = 0 swLightUpdate = 1 swMaterialUpdate = 2 swSectionedUpdate = 3 swExplodedUpdate = 4 swInsertSketchUpdate = 5 swViewDisplayUpdate = 6 swDamageRepairUpdate = 7 swSelectionUpdate = 8 swSectionedExitUpdate = 9 swScrollViewUpdate = 10 End Enum ' ---- ' User Interface State ' ---- Public Enum swUIStates_e swIsHiddenInFeatureMgr = 1 End Enum ' ---- ' Type names ' ---- ' Body Features ' Sheet Metal features ' Drawing Related ' Assembly Related ' Reference Geometry ' Misc ' Symbol markers ' ---- ' Surface Types. For use with Surface::Identity method. ' ---- ' ---- ' Curve Types. For use with Curve::Identity method. ' ---- ' ---- ' This is the beginning of time. Used to initialize su_CTime. ' ---- ' Items that can be configured to have a line style in drawings. Public Enum swLineTypes_e swLF_VISIBLE = 0 swLF_HIDDEN = 1 swLF_SKETCH = 2 swLF_DETAIL = 3 swLF_SECTION = 4 swLF_DIMENSION = 5 swLF_CENTER = 6 swLF_HATCH = 7 swLF_TANGENT = 8 End Enum ' Dimension tolerance types Public Enum swTolType_e swTolNONE = 0 swTolBASIC = 1 swTolBILAT = 2 swTolLIMIT = 3 swTolSYMMETRIC = 4 swTolMIN = 5 swTolMAX = 6 swTolMETRIC = 7 ' same as swTolFIT as of 2001Plus swTolFIT = 7 swTolFITWITHTOL = 8 swTolFITTOLONLY = 9 End Enum Public Enum swFitType_e swFitUSER = 0 swFitCLEARANCE = 1 swFitTRANSITIONAL = 2 swFitPRESS = 3 End Enum ' Tolerances which the user can set using Modeler::SetTolerances Public Enum swTolerances_e swBSCurveOutputTol = 0 ' 3D bspline curve output tolerance (meters) swBSCurveNonRationalOutputTol = 1 ' 3D non-rational bspline curve output tolerance (meters) swUVCurveOutputTol = 2 ' 2D trim curve output tolerance (fraction of characteristic min. face dimension) swSurfChordTessellationTol = 3 ' chord tolerance or deviation for tessellation for surfaces swSurfAngularTessellationTol = 4 ' angular tolerance or deviation for tessellation for surfaces swCurveChordTessellationTol = 5 ' chord tolerance or deviation for tessellation for curves End Enum ' ---- ' Mate Entity Types ' ' The following are the possible mate entity type ids returned by the function ' IMateEntity::GetEntityType. ' ---- Public Enum swMateEntityTypes_e swMateUnsupported = 0 swMatePoint = 1 swMateLine = 2 swMatePlane = 3 swMateCylinder = 4 swMateCone = 5 End Enum ' ---- ' Attribute Callback Support ' ' The following are the possible callback types for IAttributeDefs ' ---- Public Enum swAttributeCallbackTypes_e swACBDelete = 0 End Enum Public Enum swAttributeCallbackOptions_e swACBRequiresCallback = 1 End Enum Public Enum swAttributeCallbackReturnValues_e swACBDeleteIt = 1 End Enum ' Text reference point position Public Enum swTextPosition_e swUPPER_LEFT = 0 swLOWER_LEFT = 1 swCENTER = 2 swUPPER_RIGHT = 3 swLOWER_RIGHT = 4 swUPPER_CENTER = 5 End Enum ' ---- ' The following are the different types of topology resulting from a call to GetTrimCurves ' ---- Public Enum swTopologyTypes_e swTopologyNull = 0 swTopologyCoEdge = 1 swTopologyVertex = 2 End Enum ' ---- ' Attributes associated entity state ' ---- Public Enum swAssociatedEntityStates_e swIsEntityInvalid = 0 swIsEntitySuppressed = 1 swIsEntityAmbiguous = 2 swIsEntityDeleted = 3 End Enum ' --- ' Search Folder Types ' --- Public Enum swSearchFolderTypes_e swDocumentType = 0 End Enum ' --- ' User Preference Toggles. ' The different User Preference Toggles for GetUserPreferenceToggle & SetUserPreferenceToggle ' --- Public Enum swUserPreferenceToggle_e swUseFolderSearchRules = 0 swDisplayArcCenterPoints = 1 swDisplayEntityPoints = 2 swIgnoreFeatureColors = 3 swDisplayAxes = 4 swDisplayPlanes = 5 swDisplayOrigins = 6 swDisplayTemporaryAxes = 7 swDxfMapping = 8 swSketchAutomaticRelations = 9 swInputDimValOnCreate = 10 swFullyConstrainedSketchMode = 11 swXTAssemSaveFormat = 12 swDisplayCoordSystems = 13 swExtRefOpenReadOnly = 14 swExtRefNoPromptOrSave = 15 swExtRefMultipleContexts = 16 swExtRefAutoGenNames = 17 swExtRefUpdateCompNames = 18 swDisplayReferencePoints = 19 swUseShadedFaceHighlight = 20 swDXFDontShowMap = 21 swThumbnailGraphics = 22 swUseAlphaTransparency = 23 swDynamicDrawingViewActivation = 24 swAutoLoadPartsLightweight = 25 swIGESStandardSetting = 26 swIGESNurbsSetting = 27 swTiffPrintScaleToFit = 28 swDisplayVirtualSharps = 29 swUpdateMassPropsDuringSave = 30 swDisplayAnnotations = 31 swDisplayFeatureDimensions = 32 swDisplayReferenceDimensions = 33 swDisplayAnnotationsUseAssemblySettings = 34 swDisplayNotes = 35 swDisplayGeometricTolerances = 36 swDisplaySurfaceFinishSymbols = 37 swDisplayWeldSymbols = 38 swDisplayDatums = 39 swDisplayDatumTargets = 40 swDisplayCosmeticThreads = 41 swDetailingDisplayWithBrokenLeaders = 42 swDetailingDualDimensions = 43 swDetailingDisplayDatumsPer1982 = 44 swDetailingDisplayAlternateSection = 45 swDetailingCenterMarkShowLines = 46 swDetailingFixedSizeWeldSymbol = 47 swDetailingDimsShowParenthesisByDefault = 48 swDetailingDimsSnapTextToGrid = 49 swDetailingDimsCenterText = 50 swDetailingRadialDimsDisplay2ndOutsideArrow = 51 swDetailingRadialDimsArrowsFollowText = 52 swDetailingDimLeaderOverrideStandard = 53 swDetailingNotesDisplayWithBentLeader = 54 swDisplayTextAtSameSizeAlways = 55 swDisplayOnlyInViewOfCreation = 56 swGridDisplay = 57 swGridDisplayDashed = 58 swGridAutomaticScaling = 59 swSnapToPoints = 60 swSnapToAngle = 61 swUnitsLinearRoundToNearestFraction = 62 swUnitsLinearFeetAndInchesFormat = 63 swFeatureManagerEnsureVisible = 64 swFeatureManagerNameFeatureWhenCreated = 65 swFeatureManagerKeyboardNavigation = 66 swFeatureManagerDynamicHighlight = 67 swColorsGradientPartBackground = 68 swSTLBinaryFormat = 69 swSTLShowInfoOnSave = 70 swSTLDontTranslateToPositive = 71 swSTLComponentsIntoOneFile = 72 swSTLCheckForInterference = 73 swOpenLastUsedDocumentAtStart = 74 swSingleCommandPerPick = 75 swShowDimensionNames = 76 swShowErrorsEveryRebuild = 77 swMaximizeDocumentOnOpen = 78 swEditDesignTableInSeparateWindow = 80 swEnablePropertyManager = 81 swUseSystemSeparatorForDims = 82 swUseEnglishLanguage = 83 swDrawingAutomaticModelDimPlacement = 84 swDrawingDisplayViewBorders = 85 swAutomaticScaling3ViewDrawings = 86 swDrawingAutomaticBomUpdate = 87 swDrawingSelectHiddenEntities = 88 swDrawingCreateDetailAsCircle = 89 swAutomaticDrawingViewUpdate = 90 swDrawingDetailInferCorner = 91 swDrawingDetailInferCenter = 92 swDrawingViewShowContentsWhileDragging = 93 swSketchAlternateSplineCreation = 94 swSketchInferFromModel = 95 swSketchPromptToCloseSketch = 96 swSketchCreateSketchOnNewPart = 97 swSketchOverrideDimensionsOnDrag = 98 swSketchDisplayPlaneWhenShaded = 99 swSketchOverdefiningDimsPromptToSetState = 100 swSketchOverdefiningDimsSetDrivenByDefault = 101 swPerformanceVerifyOnRebuild = 102 swPerformanceDynamicUpdateOnMove = 103 swPerformanceAlwaysGenerateCurvature = 104 swPerformanceWin95ZoomClipping = 105 swIGESDuplicateEntities = 106 swIGESHighTrimCurveAccuracy = 107 swIGESExportSketchEntities = 108 swIGESComponentsIntoOneFile = 109 swIGESFlattenAssemHierarchy = 110 swAlwaysUseDefaultTemplates = 111 swUseSimpleOpenGL = 112 swShowRefGeomName = 113 swUseShadedPreview = 114 swEdgesHiddenEdgeSelectionInWireframe = 115 swEdgesHiddenEdgeSelectionInHLR = 116 swEdgesRepaintAfterSelectionInHLR = 117 swEdgesHighlightFeatureEdges = 118 swEdgesDynamicHighlight = 119 swEdgesHighQualityDisplay = 120 swEdgesOpenEdgesDifferentColor = 121 swEnableConfirmationCorner = 122 swAutoShowPropertyManager = 123 swIncontextFeatureHolderVisibility = 124 swTransparencyHighQualityDynamic = 125 swEdgesShadedEdgesDifferentColor = 126 swEdgesAntiAlias = 127 swPageSetupPrinterUsePrinterMargin = 128 swPageSetupPrinterDrawingScaleToFit = 129 swPageSetupPrinterPartAsmPrintWindow = 130 swDisplayShadowsInShadedMode = 131 swDrawingViewSmoothDynamicMotion = 132 swDrawingEliminateDuplicateDimsOnInsert = 133 swRapidDraftPrintOutOfSynchWaterMark = 134 swDrawingViewAutoHideComponents = 135 swEdgesDisplayShadedPlanes = 136 swPlaneDisplayShowEdges = 137 swPlaneDisplayShowIntersections = 138 swColorsUseSpecifiedEditColors = 139 swEnablePerformanceEmail = 141 swSnapOnlyIfGridDisplayed = 142 swDetailingBalloonsDisplayWithBentLeader = 143 swBOMConfigurationLocked = 144 swBOMConfigurationUseDocumentFont = 145 swBOMConfigurationUseSummaryInfo = 146 swBOMConfigurationAlignBottom = 147 swBOMContentsDisplayAtTop = 148 swBOMControlIdFromAssembly = 149 swBOMControlMissingRows = 150 swBOMControlSplitTable = 151 swAutomaticDrawingViewUpdateDefault = 152 swAutomaticDrawingViewUpdateForceOff = 153 swAnnotationDisplayHideDanglingDim = 154 swDetailingDimBreakAroundArrow = 155 swDetailingDimensionsToleranceUseParentheses = 156 swDetailingDimensionsToleranceUseDimensionFont = 157 swImageQualityApplyToAllReferencedPartDoc = 158 swPrintBackground = 159 swEDrawingsCompression = 160 swImportSolidSurface = 161 swImportFreeCurves = 162 swImport2dCurvesAs2dSketch = 163 swLargeAsmModeAutoLoadLightweight = 166 swLargeAsmModeUpdateMassPropsOnSave = 167 swLargeAsmModeAutoRecover = 168 swLargeAsmModeRemoveDetail = 169 swLargeAsmModeHideAllItems = 170 swLargeAsmModeDynHighlightFeatureMgr = 171 swLargeAsmModeDynHighlightGraphicsView = 172 swLargeAsmModeAntiAliasEdgesFastMode = 173 swLargeAsmModeShadowsShadedMode = 174 swLargeAsmModeTransparencyNormalViewMode = 175 swLargeAsmModeTransparencyDynamicViewMode = 176 swLargeAsmModeShowContentsDragDrawView = 177 swLargeAsmModeSmoothDynamicMotionDrawView = 178 swLargeAsmModeDrawingHLREdgesWhenShaded = 179 swLargeAsmModeAutoHideCompsDrawViewCreation = 180 swLargeAsmModeDrawingAutoLoadModels = 181 swLargeAsmModeAlwaysGenerateCurvature = 182 swImportStepConfigData = 183 swIGESExportSolidAndSurface = 184 swIGESExportFreeCurves = 185 swIGESExportAsWireframe = 186 swDetailingDimensionsAngularToleranceUseParentheses = 187 swDetailingDimensionsToleranceFitTolUseDimensionFont = 188 swDetailingAutoInsertCenterMarks = 189 swDetailingAutoInsertCenterLines = 190 swSTLPreview = 191 swDetailingCenterMarkUseCenterLine = 192 swMaterialPropertySolidFill = 193 swSaveEModelData = 194 swDisplayCurves = 195 swDisplaySketches = 196 swDisplayAllAnnotations = 197 swViewDisplayHideAllTypes = 198 End Enum ' --- ' User Preference Integer Values ' The different User Preference Integer Values for GetUserPreferenceIntegerValue & SetUserPreferenceIntegerValue ' --- Public Enum swUserPreferenceIntegerValue_e swDxfVersion = 0 swDxfOutputFonts = 1 swDxfMappingFileIndex = 2 swAutoSaveInterval = 3 swResolveLightweight = 4 swAcisOutputVersion = 5 swTiffScreenOrPrintCapture = 6 swTiffImageType = 7 swTiffCompressionScheme = 8 swTiffPrintDPI = 9 swTiffPrintPaperSize = 10 swTiffPrintScaleFactor = 11 swCreateBodyFromSurfacesOption = 12 ' Used by API CreateBodyFromSurfaces swDetailingDimensionStandard = 13 swDetailingDualDimPosition = 14 swDetailingDimTrailingZero = 15 swDetailingArrowStyleForDimensions = 16 swDetailingDimensionArrowPosition = 17 swDetailingLinearDimLeaderStyle = 18 swDetailingRadialDimLeaderStyle = 19 swDetailingAngularDimLeaderStyle = 20 swDetailingLinearToleranceStyle = 21 swDetailingAngularToleranceStyle = 22 swDetailingToleranceTextSizing = 23 swDetailingLinearDimPrecision = 24 swDetailingLinearTolPrecision = 25 swDetailingAltLinearDimPrecision = 26 swDetailingAltLinearTolPrecision = 27 swDetailingAngularDimPrecision = 28 swDetailingAngularTolPrecision = 29 swDetailingNoteTextAlignment = 30 swDetailingNoteLeaderSide = 31 swDetailingBalloonStyle = 32 swDetailingBalloonFit = 33 swDetailingBOMBalloonStyle = 34 swDetailingBOMBalloonFit = 35 swDetailingBOMUpperText = 36 swDetailingBOMLowerText = 37 swDetailingArrowStyleForEdgeVertexAttachment = 38 swDetailingArrowStyleForFaceAttachment = 39 swDetailingArrowStyleForUnattached = 40 swDetailingVirtualSharpStyle = 41 swGridMinorLinesPerMajor = 42 swSnapPointsPerMinor = 43 swImageQualityShaded = 44 swImageQualityWireframe = 45 swImageQualityWireframeValue = 46 swUnitsLinear = 47 swUnitsLinearDecimalDisplay = 48 swUnitsLinearDecimalPlaces = 49 swUnitsLinearFractionDenominator = 50 swUnitsAngular = 51 swUnitsAngularDecimalPlaces = 52 swLineFontVisibleEdgesThickness = 53 swLineFontVisibleEdgesStyle = 54 swLineFontHiddenEdgesThickness = 55 swLineFontHiddenEdgesStyle = 56 swLineFontSketchCurvesThickness = 57 swLineFontSketchCurvesStyle = 58 swLineFontDetailCircleThickness = 59 swLineFontDetailCircleStyle = 60 swLineFontSectionLineThickness = 61 swLineFontSectionLineStyle = 62 swLineFontDimensionsThickness = 63 swLineFontDimensionsStyle = 64 swLineFontConstructionCurvesThickness = 65 swLineFontConstructionCurvesStyle = 66 swLineFontCrosshatchThickness = 67 swLineFontCrosshatchStyle = 68 swLineFontTangentEdgesThickness = 69 swLineFontTangentEdgesStyle = 70 swLineFontDetailBorderThickness = 71 swLineFontDetailBorderStyle = 72 swLineFontCosmeticThreadThickness = 73 swLineFontCosmeticThreadStyle = 74 swStepAP = 75 swHiddenEdgeDisplayDefault = 76 swTangentEdgeDisplayDefault = 77 swSTLQuality = 78 swDrawingProjectionType = 79 swDrawingPrintCrosshatchOutOfDateViews = 80 swPerformanceAssemRebuildOnLoad = 81 swLoadExternalReferences = 82 swIGESRepresentation = 83 swIGESSystem = 84 swIGESCurveRepresentation = 85 swViewRotationMouseSpeed = 86 swBackupCopiesPerDocument = 87 swCheckForOutOfDateLightweightComponents = 88 swParasolidOutputVersion = 89 swLineFontHideTangentEdgeThickness = 90 swLineFontHideTangentEdgeStyle = 91 swLineFontViewArrowThickness = 92 swLineFontViewArrowStyle = 93 swEdgesHiddenEdgeDisplay = 94 swEdgesTangentEdgeDisplay = 95 swEdgesShadedModeDisplay = 96 swDetailingBOMStackedBalloonStyle = 97 swDetailingBOMStackedBalloonFit = 98 swSystemColorsViewportBackground = 99 swSystemColorsTopGradientColor = 100 swSystemColorsBottomGradientColor = 101 swSystemColorsDynamicHighlight = 102 swSystemColorsHighlight = 103 swSystemColorsSelectedItem1 = 104 swSystemColorsSelectedItem2 = 105 swSystemColorsSelectedItem3 = 106 swSystemColorsSelectedFaceShaded = 107 swSystemColorsDrawingsVisibleModelEdge = 108 swSystemColorsDrawingsHiddenModelEdge = 109 swSystemColorsDrawingsPaperBorder = 110 swSystemColorsDrawingsPaperShadow = 111 swSystemColorsImportedDrivingAnnotation = 112 swSystemColorsImportedDrivenAnnotation = 113 swSystemColorsSketchOverDefined = 114 swSystemColorsSketchFullyDefined = 115 swSystemColorsSketchUnderDefined = 116 swSystemColorsSketchInvalidGeometry = 117 swSystemColorsSketchNotSolved = 118 swSystemColorsGridLinesMinor = 119 swSystemColorsGridLinesMajor = 120 swSystemColorsConstructionGeometry = 121 swSystemColorsDanglingDimension = 122 swSystemColorsText = 123 swSystemColorsAssemblyEditPart = 124 swSystemColorsAssemblyEditPartHiddenLines = 125 swSystemColorsAssemblyNonEditPart = 126 swSystemColorsInactiveEntity = 127 swSystemColorsTemporaryGraphics = 128 swSystemColorsTemporaryGraphicsShaded = 129 swSystemColorsActiveSelectionListBox = 130 swSystemColorsSurfacesOpenEdge = 131 swSystemColorsTreeViewBackground = 132 swAcisOutputUnits = 133 swSystemColorsShadedEdge = 134 swDxfOutputLineStyles = 135 swDxfOutputNoScale = 136 swPageSetupPrinterOrientation = 138 swPageSetupPrinterDrawingColor = 139 swImportCheckAndRepair = 140 swUseCustomizedImportTolerance = 141 swStepExportPreference = 142 swEdgesInContextEditTransparencyType = 143 swEdgesInContextEditTransparency = 144 swPlaneDisplayFrontFaceColor = 145 swPlaneDisplayBackFaceColor = 146 swPlaneDisplayTransparency = 147 swPlaneDisplayIntersectionLineColor = 148 swDetailingDatumDisplayType = 149 swBOMConfigurationAnchorType = 150 swBOMConfigurationWhatToShow = 151 swBOMControlMissingRowDisplay = 152 swBOMControlSplitDirection = 153 swDetailingChamferDimLeaderStyle = 154 swDetailingChamferDimTextStyle = 155 swDetailingChamferDimXStyle = 156 swDocumentColorFeatBend = 157 swDocumentColorFeatBoss = 158 swDocumentColorFeatCavity = 159 swDocumentColorFeatChamfer = 160 swDocumentColorFeatCut = 161 swDocumentColorFeatLoftCut = 162 swDocumentColorFeatSurfCut = 163 swDocumentColorFeatSweepCut = 164 swDocumentColorFeatWeldBead = 165 swDocumentColorFeatExtrude = 166 swDocumentColorFeatFillet = 167 swDocumentColorFeatHole = 168 swDocumentColorFeatLibrary = 169 swDocumentColorFeatLoft = 170 swDocumentColorFeatMidSurface = 171 swDocumentColorFeatPattern = 172 swDocumentColorFeatRefSurface = 173 swDocumentColorFeatRevolution = 174 swDocumentColorFeatShell = 175 swDocumentColorFeatDerivedPart = 176 swDocumentColorFeatSweep = 177 swDocumentColorFeatThicken = 178 swDocumentColorFeatRib = 179 swDocumentColorFeatDome = 180 swDocumentColorFeatForm = 181 swDocumentColorFeatShape = 182 swDocumentColorFeatReplaceFace = 183 swDocumentColorWireFrame = 184 swDocumentColorShading = 185 swDocumentColorHidden = 186 swLineFontExplodedLinesThickness = 187 swLineFontExplodedLinesStyle = 188 swSystemColorsRefTriadX = 189 swSystemColorsRefTriadY = 190 swSystemColorsRefTriadZ = 191 swAcisOutputGeometryPreference = 192 swSystemColorsDTDim = 193 swLargeAsmModeThreshold = 194 swLargeAsmModeAutoActivate = 195 swLargeAsmModeCheckOutOfDateLightweight = 196 swLargeAsmModeAutoRecoverCount = 197 swLargeAsmModeDisplayModeForNewDrawViews = 198 swLineFontBreakLineThickness = 199 swLineFontBreakLineStyle = 200 swSaveAssemblyAsPartOptions = 201 swDetailingDimensionTextAlignmentVertical = 202 swDetailingDimensionTextAlignmentHorizontal = 203 swDetailingToleranceFitTolTextSizing = 204 swImportUnitPreference = 205 swImportCurvePreference = 206 swImportUseBrep = 207 swImportStlVrmlModelType = 208 swSystemColorsSelectedItem4 = 209 End Enum ' --- ' User Preference Double Values ' The different User Preference Double Values for GetUserPreferenceDoubleValue & SetUserPreferenceDoubleValue ' --- Public Enum swUserPreferenceDoubleValue_e swDetailingNoteFontHeight = 0 swDetailingDimFontHeight = 1 swSTLDeviation = 2 swSTLAngleTolerance = 3 swSpinBoxMetricLengthIncrement = 4 swSpinBoxEnglishLengthIncrement = 5 swSpinBoxAngleIncrement = 6 swMaterialPropertyDensity = 7 swTiffPrintPaperWidth = 8 swTiffPrintPaperHeight = 9 swTiffPrintDrawingPaperHeight = 8 swTiffPrintDrawingPaperWidth = 9 swDetailingCenterlineExtension = 10 swDetailingBreakLineGap = 11 swDetailingCenterMarkSize = 12 swDetailingWitnessLineGap = 13 swDetailingWitnessLineExtension = 14 swDetailingObjectToDimOffset = 15 swDetailingDimToDimOffset = 16 swDetailingMaxLinearToleranceValue = 17 swDetailingMinLinearToleranceValue = 18 swDetailingMaxAngularToleranceValue = 19 swDetailingMinAngularToleranceValue = 20 swDetailingToleranceTextScale = 21 swDetailingToleranceTextHeight = 22 swDetailingNoteBentLeaderLength = 23 swDetailingArrowHeight = 24 swDetailingArrowWidth = 25 swDetailingArrowLength = 26 swDetailingSectionArrowHeight = 27 swDetailingSectionArrowWidth = 28 swDetailingSectionArrowLength = 29 swGridMajorSpacing = 30 swSnapToAngleValue = 31 swImageQualityShadedDeviation = 32 swDrawingDefaultSheetScaleNumerator = 33 swDrawingDefaultSheetScaleDenominator = 34 swDrawingDetailViewScale = 35 swViewRotationArrowKeys = 36 swMateAnimationSpeed = 37 swViewAnimationSpeed = 38 swDetailingDimBentLeaderLength = 39 swMaterialPropertyCrosshatchScale = 40 swMaterialPropertyCrosshatchAngle = 41 swDrawingAreaHatchScale = 42 swDrawingAreaHatchAngle = 43 swPageSetupPrinterTopMargin = 44 swPageSetupPrinterBottomMargin = 45 swPageSetupPrinterLeftMargin = 46 swPageSetupPrinterRightMargin = 47 swPageSetupPrinterThinLineWeight = 48 swPageSetupPrinterNormalLineWeight = 49 swPageSetupPrinterThickLineWeight = 50 swPageSetupPrinterThick2LineWeight = 51 swPageSetupPrinterThick3LineWeight = 52 swPageSetupPrinterThick4LineWeight = 53 swPageSetupPrinterThick5LineWeight = 54 swPageSetupPrinterThick6LineWeight = 55 swPageSetupPrinterDrawingScale = 56 swPageSetupPrinterPartAsmScale = 57 swCustomizedImportTolerance = 58 swDetailingBalloonBentLeaderLength = 60 swBOMControlSplitHeight = 61 swAnnotationTextScaleNumerator = 62 swAnnotationTextScaleDenominator = 63 swDetailingDimBreakGap = 64 swCurvatureValue1 = 65 swCurvatureValue2 = 66 swCurvatureValue3 = 67 swCurvatureValue4 = 68 swCurvatureValue5 = 69 swDetailingBreakLineExtension = 70 swDetailingToleranceFitTolTextScale = 71 swDetailingToleranceFitTolTextHeight = 72 swDocumentColorAdvancedAmbient = 73 swDocumentColorAdvancedDiffuse = 74 swDocumentColorAdvancedSpecularity = 75 swDocumentColorAdvancedShininess = 76 swDocumentColorAdvancedTransparency = 77 swDocumentColorAdvancedEmission = 78 swDxfOutputScaleFactor = 79 End Enum ' --- ' User Preference String Values ' The different User Preference String Values for GetUserPreferenceStringValue & SetUserPreferenceStringValue ' --- Public Enum swUserPreferenceStringValue_e swFileLocationsDocuments = 1 swFileLocationsPaletteFeatures = 2 swFileLocationsPaletteParts = 3 swFileLocationsPaletteFormTools = 4 swFileLocationsBlocks = 5 swFileLocationsDocumentTemplates = 6 swFileLocationsSheetFormat = 7 swDefaultTemplatePart = 8 swDefaultTemplateAssembly = 9 swDefaultTemplateDrawing = 10 swBackupDirectory = 11 swFileLocationsBendTable = 12 swMaterialPropertyCrosshatchPattern = 13 swDrawingAreaHatchPattern = 14 swDetailingNextDatumFeatureLabel = 15 swFileSaveAsCoordinateSystem = 16 swFileLocationsPaletteAssemblies = 17 End Enum ' --- ' User Preference String List Values ' The different User Preference String List Values for GetUserPreferenceStringListValue & SetUserPreferenceStringListValue ' --- Public Enum swUserPreferenceStringListValue_e swDxfMappingFiles = 0 End Enum ' --- ' User Preference Text Formats ' The different User Preference Text Formats for Get/SetUserPreferenceTextFormat ' --- Public Enum swUserPreferenceTextFormat_e swDetailingNoteTextFormat = 0 swDetailingDimensionTextFormat = 1 swDetailingSectionTextFormat = 2 swDetailingDetailTextFormat = 3 swDetailingViewArrowTextFormat = 4 swDetailingSurfaceFinishTextFormat = 5 swDetailingWeldSymbolTextFormat = 6 End Enum ' --- ' View Display States ' The different View Display States for IModelView::GetDisplayState ' --- Public Enum swViewDisplayType_e swIsViewSectioned = 0 swIsViewPerspective = 1 swIsViewShaded = 2 swIsViewWireFrame = 3 swIsViewHiddenLinesRemoved = 4 swIsViewHiddenInGrey = 5 swIsViewCurvature = 6 End Enum ' ---- ' Control display of internal sketch points ' ---- Public Enum swSkInternalPntOpts_e swSkPntsOff = 0 swSkPntsOn = 1 swSkPntsDefault = 2 End Enum ' ---- ' DXF/DWG Output formats ' ---- Public Enum swDxfFormat_e swDxfFormat_R12 = 0 swDxfFormat_R13 = 1 swDxfFormat_R14 = 2 swDxfFormat_R2000 = 3 End Enum ' --- ' DXF/DWG output arrow directions ' --- Public Enum swArrowDirection_e swINSIDE = 0 swOUTSIDE = 1 swSMART = 2 End Enum ' --- ' Print Properties ' The different property types for IModelDoc::SetPrintSetUp ' --- Public Enum swPrintProperties_e swPrintPaperSize = 0 swPrintOrientation = 1 swPrintPaperLength = 2 swPrintPaperWidth = 3 End Enum ' --- ' Tiff Image types ' --- Public Enum swTiffImageType_e swTiffImageBlackAndWhite = 0 swTiffImageRGB = 1 End Enum ' --- ' Tiff Image Compression schemes ' --- Public Enum swTiffCompressionScheme_e swTiffUncompressed = 0 swTiffPackbitsCompression = 1 swTiffGroup4FaxCompression = 2 End Enum ' ---- ' Body operations. For use with Body::Operations method. ' ---- Public Enum swBodyOperationError_e swBodyOperationUnknownError = -1 swBodyOperationNoError = 0 swBodyOperationNonApiBody = 1 swBodyOperationWrongType = 2 swBodyOperationBooleanFail = 1058 swBodyOperationNoIntersect = 1067 swBodyOperationNonManifold = 547 swBodyOperationPartialCoincidence = 1040 swBodyOperationIntersectSolidWithSheets = 972 swBodyOperationUniteSolidSheet = 543 swBodyOperationMissingGeom = 96 swBodyOperationSameToolAndTarget = 545 swBodyOperationFailGeomCondition = 3 swBodyOperationFailToCutBody = 4 swBodyOperationDisjointBodies = 5 swBodyOperationEmptyBody = 6 swBodyOperationEmptyInputBody = 7 End Enum ' --- ' End Conditions. ' These are used with FeatureBoss, FeatureCut, FeatureExtrusion, etc. ' Not all types are valid for all body operations. Some of these end conditions require additional ' selections (ie - swEndCondUpToSurface, etc.) and some require additional data (ie - swEndCondOffsetFromSurface) ' --- Public Enum swEndConditions_e swEndCondBlind = 0 swEndCondThroughAll = 1 swEndCondThroughNext = 2 swEndCondUpToVertex = 3 swEndCondUpToSurface = 4 swEndCondOffsetFromSurface = 5 swEndCondMidPlane = 6 swEndCondUpToBody = 7 End Enum Public Enum swChamferType_e swChamferAngleDistance = 1 swChamferDistanceDistance = 2 swChamferVertex = 3 swChamferEqualDistance = 4 End Enum ' --- ' Line weights ' --- Public Enum swLineWeights_e swLW_NONE = -1 swLW_THIN = 0 swLW_NORMAL = 1 swLW_THICK = 2 swLW_THICK2 = 3 swLW_THICK3 = 4 swLW_THICK4 = 5 swLW_THICK5 = 6 swLW_THICK6 = 7 swLW_NUMBER = 8 swLW_LAYER = 9 End Enum ' --- ' Toolbar States. For use with ISldWorks::GetToolbarState() ' --- Public Enum swToolbarStates_e swToolbarHidden = 0 End Enum ' ---- ' Summary info fields for use with IModelDoc::Get/SetSummaryInfo ' ---- Public Enum swSummInfoField_e swSumInfoTitle = 0 swSumInfoSubject = 1 swSumInfoAuthor = 2 swSumInfoKeywords = 3 swSumInfoComment = 4 swSumInfoSavedBy = 5 swSumInfoCreateDate = 6 swSumInfoSaveDate = 7 swSumInfoCreateDate2 = 8 swSumInfoSaveDate2 = 9 End Enum ' CPropertySheet enumerated types. ' For use with the ISldWorks::PropertySheetCreateNotify notification Public Enum swPropSheetType_e swPropSheetNotValid = 0 swPropSheetLighting = 1 swPropSheetToolsOptions = 2 swPropSheetAmbientLight = 3 swPropSheetDirectionalLight = 4 swPropSheetPositionLight = 5 swPropSheetSpotLight = 6 End Enum Public Enum swWindowState_e swWindowNormal = 0 swWindowMaximized = 1 swWindowMinimized = 2 End Enum ' Possible values for Witness Line visibility, for use by ' auDisplayDimension_c::GetWitnessVisibility and SetWitnessVisibility. Public Enum swWitnessLineVisibility_e swWitnessLineBoth = 0 ' BOTH witness lines are displayed swWitnessLineFirst = 1 ' only FIRST witness line is displayed swWitnessLineSecond = 2 ' only SECOND witness line is displayed swWitnessLineNone = 3 ' NEITHER witness line is displayed End Enum ' Possible values for Leader Line visibility, for use by ' auDisplayDimension_c::GetLeaderVisibility and SetLeaderVisibility. Public Enum swLeaderLineVisibility_e swLeaderLineBoth = 0 ' BOTH leader lines are displayed swLeaderLineFirst = 1 ' only FIRST leader line is displayed swLeaderLineSecond = 2 ' only SECOND leader line is displayed swLeaderLineNone = 3 ' NEITHER leader line is displayed End Enum ' Possible values for Arrow positions, for use by ' auDisplayDimension_c::GetArrowSide and SetArrowSide. Public Enum swDimensionArrowsSide_e swDimArrowsInside = 0 ' place arrows INSIDE of the witness lines swDimArrowsOutside = 1 ' place arrows OUTSIDE of the witness lines swDimArrowsSmart = 2 ' place arrows inside if the text and arrows fit, outside if not swDimArrowsFollowDoc = 3 ' place arrows the same as the document default for placing arrows End Enum ' The different parts of the dimension text, for use by ' auDisplayDimension_c::GetText and SetText. Public Enum swDimensionTextParts_e swDimensionTextAll = 0 ' all pieces of text (used only by SetText) swDimensionTextPrefix = 1 ' the prefix portion of the text swDimensionTextSuffix = 2 ' the suffix portion of the text swDimensionTextCalloutAbove = 3 ' the callout portion of the text, above the dimension swDimensionTextCalloutBelow = 4 ' the callout portion of the text, below the dimension End Enum Public Enum swTopology_e swTopoSolidBody = 1 swTopoSheetBody = 2 swTopoWireBody = 3 swTopoMinimumBody = 4 End Enum Public Enum swTopoEntity_e swTopoVertex = 1 swTopoEdge = 2 swTopoLoop = 3 swTopoFace = 4 swTopoShell = 5 swTopoBody = 6 End Enum ' The alignment information possible for Views. For use with auDrView_c::GetAlignment. Public Enum swViewAlignment_e swViewAlignNone = 0 ' this view has no alignment restrictions swViewAlignedChildren = 1 ' this view has children aligned with it swViewAligned = 2 ' this view is aligned with a parent view swViewAlignBoth = 3 ' this view is aligned and has aligned children End Enum ' Toolbars Public Enum swToolbar_e swSketchToolsToolbar = 0 swMainToolbar = 1 swStandardToolbar = 2 swViewToolbar = 3 swSketchRelationsToolbar = 4 swMacroToolbar = 5 swSketchToolbar = 6 swAssemblyToolbar = 7 swDrawingToolbar = 8 swAnnotationToolbar = 9 swWebToolbar = 10 swFeatureToolbar = 11 swFontToolbar = 12 swLineToolbar = 13 swSelectionFilterToolbar = 14 swReferenceGeometryToolbar = 15 swStandardViewsToolbar = 16 swToolsToolbar = 17 swCurvesToolbar = 18 swMoldToolsToolbar = 19 swSheetMetalToolbar = 20 swSurfacesToolbar = 21 swAlignToolbar = 22 swLayerToolbar = 23 sw2Dto3DToolbar = 24 swRoutingToolbar = 25 swSimulationToolbar = 26 End Enum ' Annotations Public Enum swInsertAnnotation_e swInsertCThreads = &H1 swInsertDatums = &H2 swInsertDatumTargets = &H4 swInsertDimensions = &H8 swInsertInstanceCounts = &H10 swInsertGTols = &H20 swInsertNotes = &H40 swInsertSFSymbols = &H80 swInsertWelds = &H100 swInsertAxes = &H200 swInsertCurves = &H400 swInsertPlanes = &H800 swInsertSurfaces = &H1000 swInsertPoints = &H2000 swInsertOrigins = &H4000 End Enum ' MessageBox values Public Enum swMessageBoxIcon_e swMbWarning = 1 swMbInformation = 2 swMbQuestion = 3 swMbStop = 4 End Enum Public Enum swMessageBoxBtn_e swMbAbortRetryIgnore = 1 swMbOk = 2 swMbOkCancel = 3 swMbRetryCancel = 4 swMbYesNo = 5 swMbYesNoCancel = 6 End Enum Public Enum swMessageBoxResult_e swMbHitAbort = 1 swMbHitIgnore = 2 swMbHitNo = 3 swMbHitOk = 4 swMbHitRetry = 5 swMbHitYes = 6 swMbHitCancel = 7 End Enum ' Annotation types Public Enum swAnnotationType_e swCThread = 1 swDatumTag = 2 swDatumTargetSym = 3 swDisplayDimension = 4 swGTol = 5 swNote = 6 swSFSymbol = 7 swWeldSymbol = 8 swCustomSymbol = 9 swDowelSym = 10 swLeader = 11 swBlock = 12 swCenterMarkSym = 13 swTableAnnotation = 14 End Enum ' The possible Driven States for Dimensions. For use with auDimension_c::DrivenState. Public Enum swDimensionDrivenState_e swDimensionDrivenUnknown = 0 ' the driven/driving state is unknown swDimensionDriven = 1 ' the dimension is a driven dimension swDimensionDriving = 2 ' the dimension is a driving dimension End Enum Public Enum swFileLoadError_e swGenericError = &H1 swFileNotFoundError = &H2 swIdMatchError = &H4 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swReadOnlyWarn = &H8 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swSharingViolationWarn = &H10 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swDrawingANSIUpdateWarn = &H20 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swSheetScaleUpdateWarn = &H40 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swNeedsRegenWarn = &H80 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swBasePartNotLoadedWarn = &H100 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swFileAlreadyOpenWarn = &H200 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swInvalidFileTypeError = &H400 ' the type argument passed into the API is not valid swDrawingsOnlyRapidDraftWarn = &H800 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swViewOnlyRestrictions = &H1000 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swFutureVersion = &H2000 ' document being opened is of a future version. swViewMissingReferencedConfig = &H4000 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swDrawingSFSymbolConvertWarn = &H8000 ' NO LONGER USED as of OpenDoc6, moved to swFileLoadWarning_e swFileWithSameTitleAlreadyOpen = &H10000 End Enum ' Warnings that occured during a Open API, but did NOT cause the save to fail. Public Enum swFileLoadWarning_e swFileLoadWarning_IdMismatch = &H1 swFileLoadWarning_ReadOnly = &H2 swFileLoadWarning_SharingViolation = &H4 swFileLoadWarning_DrawingANSIUpdate = &H8 swFileLoadWarning_SheetScaleUpdate = &H10 swFileLoadWarning_NeedsRegen = &H20 swFileLoadWarning_BasePartNotLoaded = &H40 swFileLoadWarning_AlreadyOpen = &H80 swFileLoadWarning_DrawingsOnlyRapidDraft = &H100 swFileLoadWarning_ViewOnlyRestrictions = &H200 swFileLoadWarning_ViewMissingReferencedConfig = &H400 swFileLoadWarning_DrawingSFSymbolConvert = &H800 swFileLoadWarning_RevolveDimTolerance = &H1000 swFileLoadWarning_ModelOutOfDate = &H2000 End Enum ' Errors that caused the Save API to fail. Public Enum swFileSaveError_e swGenericSaveError = &H1 swReadOnlySaveError = &H2 swFileNameEmpty = &H4 ' The filename must not be empty swFileNameContainsAtSign = &H8 ' The filename can not contain an '@' character swFileLockError = &H10 swFileSaveFormatNotAvailable = &H20 ' The save as file type is not valid swFileSaveWithRebuildError = &H40 ' NO LONGER USED IN SW2001PLUS, moved to swFileSaveWarning_e swFileSaveAsDoNotOverwrite = &H80 ' The user chose not to overwrite an existing file swFileSaveAsInvalidFileExtension = &H100 ' The file extension differs from the Sw document type End Enum ' Warnings that occured during a Save API, but did NOT cause the save to fail. Public Enum swFileSaveWarning_e swFileSaveWarning_RebuildError = &H1 ' The file was saved, but with a rebuild error swFileSaveWarning_NeedsRebuild = &H2 ' The file was saved, but needs a rebuild swFileSaveWarning_ViewsNeedUpdate = &H4 ' The file was saved, but views of inactive sheets need updating End Enum Public Enum swActivateDocError_e swGenericActivateError = &H1 swDocNeedsRebuildWarning = &H2 End Enum ' The suppression information possible for Components. For use with auComponent_c::Suppression. Public Enum swComponentSuppressionState_e swComponentSuppressed = 0 ' Fully suppressed - nothing is loaded swComponentLightweight = 1 ' Featherweight - only graphics data is loaded swComponentFullyResolved = 2 ' Fully resolved - model is completly loaded End Enum ' The visibility information possible for Components. For use with auComponent_c::Visibility. Public Enum swComponentVisibilityState_e swComponentHidden = 0 swComponentVisible = 1 End Enum ' Possible values for the solving option of components. Public Enum swComponentSolvingOption_e swComponentRigidSolving = 0 swComponentFlexibleSolving = 1 End Enum Public Enum swCustomInfoType_e swCustomInfoUnknown = 0 swCustomInfoText = 30 ' VT_LPSTR swCustomInfoDate = 64 ' VT_FILETIME swCustomInfoNumber = 3 ' VT_I4 swCustomInfoYesOrNo = 11 ' VT_BOOL End Enum Public Enum swComponentResolveStatus_e swResolveOk = 0 swResolveAbortedByUser = 1 swResolveNotPerformed = 2 swResolveError = 3 End Enum Public Enum swSuppressionError_e swSuppressionBadComponent = 0 swSuppressionBadState = 1 swSuppressionChangeOk = 2 swSuppressionChangeFailed = 3 End Enum Public Enum swDynamicMode_e swNoDynamics = 0 swSpinDynamics = 1 swPanDynamics = 2 swZoomDynamics = 3 swUnknownDynamics = 4 swAnimDynamics = 5 End Enum ' The justification of text with respect to the note origin. ' Used by auNote_c::Get and SetTextJustification[AtIndex]. Public Enum swTextJustification_e swTextJustificationLeft = 1 ' Text is Left Justified (Top Justified is assumed?) swTextJustificationCenter = 2 ' Text is Center Justified (Top Justified is assumed?) swTextJustificationRight = 3 ' Text is Top Justified (Top Justified is assumed?) End Enum Public Enum swComponentReloadOption_e swAlwaysReload = 0 swDontReloadOldComponents = 1 End Enum Public Enum swComponentReloadError_e swReloadOkay = 0 swWriteAccessError = 1 swFutureVersionError = 2 swModifiedNotReloadedError = 3 swInvalidOption = 4 swFileNotSavedError = 5 swInvalidComponentError = 6 swUnexpectedError = 7 swComponentLightWeightError = 8 swFileDoesntExistError = 9 swFileInvalidOrSameNameError = 10 swDocumentHasNoView = 11 swDocumentAlreadyOpenedError = 12 End Enum Public Enum swIntersectionType_e swIntersectionSIMPLE = 1 swIntersectionTANGENT = 2 swIntersectionCOINCIDENCE_START = 3 swIntersectionCOINCIDENCE_END = 4 End Enum Public Enum swAddOrdinateDims_e swOrdinate = 1 swVerticalOrdinate = 2 swHorizontalOrdinate = 3 End Enum Public Enum swSheetSewingOption_e swSewToSolid = 0 swSewToSheets = 1 swSewToSolidOrSheets = 2 End Enum Public Enum swSheetSewingError_e swSewingOk = 0 swBadArgument = 1 swUnspecifiedError = 2 swSewingFailed = 3 swSewingIncomplete = 4 End Enum Public Enum swBodyType_e swAllBodies = -1 swSolidBody = 0 swSheetBody = 1 swWireBody = 2 swMinimumBody = 3 swGeneralBody = 4 swEmptyBody = 5 End Enum ' Which Configurations the Set Value applies to. Public Enum swSetValueInConfiguration_e swSetValue_UseCurrentSetting = 0 ' Use the setting this parameter currently has swSetValue_InThisConfiguration = 1 swSetValue_InAllConfigurations = 2 End Enum ' Return status of the Set Value operation. Public Enum swSetValueReturnStatus_e swSetValue_Successful = 0 swSetValue_Failure = 1 ' failed for an unknown reason swSetValue_InvalidValue = 2 ' not a valid value for Change Parameter swSetValue_DrivenDimension = 3 ' can not be done on a dimension driven by geometry swSetValue_ModelNotLoaded = 4 ' the model must be loaded in order to set this value End Enum ' Possible values for the bendState value for the Get/SetBendState APIs. Public Enum swSMBendState_e swSMBendStateNone = 0 ' No bend state - not a sheet metal part swSMBendStateSharps = 1 ' Bends are in the sharp state - bends currently not applied swSMBendStateFlattened = 2 ' Bends are flattened swSMBendStateFolded = 3 ' Bends are fully applied End Enum ' Possible return status of Sheet Metal APIs. Public Enum swSMCommandStatus_e swSMErrorNone = 0 swSMErrorUnknown = 1 ' failed for an unknown reason swSMErrorNotAPart = 2 ' Sheet Metal commands only apply to SW Parts swSMErrorNotASheetMetalPart = 3 ' the part contains no Sheet Metal features swSMErrorInvalidBendState = 4 ' an invalid bend state was specified (Set Bend State) End Enum ' Feature error code returned from Feature::GetErrorCode. Public Enum swFeatureError_e swFeatureErrorNone = 0 ' No error swFeatureErrorUnknown = 1 ' Unknown error swFeatureErrorFilletNoLoop = 10 ' Loop for fillet/chamfer does not exist swFeatureErrorFilletNoFace = 11 ' face for fillet/chamfer does not exist swFeatureErrorFilletInvalidRadius = 12 ' invalid fillet radius or a face blend fillet recommended swFeatureErrorFilletNoEdge = 13 ' Edge for fillet/chamfer does not exist swFeatureErrorFilletModelGeometry = 14 ' Failed to create fillet due to model geometry swFeatureErrorFilletRadiusTooSmall = 15 ' Radius value is too small swFeatureErrorFilletCannotExtend = 16 ' Selected elements cannot be extended to intersect swFeatureErrorFilletRadiusEliminateElement = 17 ' Specified radius would eliminate one of the elements swFeatureErrorFilletRadiusTooBig = 18 ' Radius is too big or the elements are tangent or nearly tangent swFeatureErrorFilletRadiusTooBig2 = 19 ' The radius of the fillet is too large to fit the surrounding geometry. Try adjusting the input geometry and radius values or try using a face blend fillet. swFeatureErrorExtrusionDisjoint = 30 ' This feature would create a disjoint body. The direction may be wrong swFeatureErrorExtrusionNoEndFound = 31 ' Cannot locate end of feature swFeatureErrorExtrusionBadGeometricConditions = 32 ' Unable to create this extruded feature due to geometric conditions swFeatureErrorExtrusionCutContourOpenAndClosed = 33 ' Extruded cuts cannot have both open and closed contours swFeatureErrorExtrusionCutContourInvalid = 34 ' Extruded cuts require at least one closed or open contour which does not self-intersect swFeatureErrorExtrusionOpenCutContourInvalid = 35 ' Open extruded cuts require a single open contour which does not self-intersect swFeatureErrorExtrusionBossContourOpenAndClosed = 36 ' Bosses cannot have both open and closed contours swFeatureErrorExtrusionBossContourInvalid = 37 ' Bosses require one or more closed contours which do not self-intersect End Enum ' Possible values for the saveAsVersion argument of the SaveAs2 API Public Enum swSaveAsVersion_e swSaveAsCurrentVersion = 0 ' default swSaveAsSW98plus = 1 ' save SW model in SW98plus model format - NO LONGER SUPPORTED swSaveAsFormatProE = 2 ' save Sw part as Pro/E format .prt/.asm extension (not as Sw .prt/.asm) End Enum ' Possible values for the leaderType argument of the Get/SetArcLengthLeader APIs Public Enum swArcLengthLeaderType_e swArcLengthLeaderParallel = 1 ' Leaders are parallel to each other swArcLengthLeaderRadial = 2 ' Leaders are radial, from the arc center point End Enum ' Possible values for the condition argument of the Get/SetArcEndCondition APIs ' These values should match up with the values in the moArcDimType_e enumeration. Public Enum swArcEndCondition_e swArcEndConditionNone = 0 ' The end point is not related to an arc swArcEndConditionCenter = 1 ' The end point is the center of the arc swArcEndConditionMin = 2 ' The end point is the nearest point on the arc swArcEndConditionMax = 3 ' The end point is the furthest point on the arc End Enum Public Enum swDestroyNotifyType_e swDestroyNotifyDestroy = 0 ' The view is being destroyed swDestroyNotifyHidden = 1 ' The view is actually being hidden, not destroyed End Enum Public Enum swSketchSegments_e swSketchLINE = 0 swSketchARC = 1 swSketchELLIPSE = 2 swSketchSPLINE = 3 swSketchTEXT = 4 swSketchPARABOLA = 5 End Enum Public Enum swPipingPenetrationStatus_e swPenetrationSucceeded = 0 swPenetrationFailed = 1 swPenetrationFailedPipeTooWide = 2 swPenetrationFailedDllNotLoaded = 3 swPenetrationFailedNoSelection = 4 swPenetrationFailedNotRouting = 5 swPenetrationFailedBadSelection = 6 swPenetrationFailedBadFitting = 7 swPenetrationFailedAlreadyPenetrating = 8 swPenetrationFailedMultiBody = 9 End Enum ' Enumerate the possible different entity types for passing as a notification argument. ' Currently used by AddItemNotify, RenameItemNotify, and DeleteItemNotify. Public Enum swNotifyEntityType_e swNotifyConfiguration = 1 ' Configuration is being added, renamed, or deleted swNotifyComponent = 2 End Enum Public Enum swRayPtsOpts_e swRayPtsOptsNORMALS = &H1 swRayPtsOptsTOPOLS = &H2 swRayPtsOptsENTRY_EXIT = &H4 swRayPtsOptsUNBLOCK = &H8 ' alow the system to respond while waiting End Enum Public Enum swRayPtsResults_e swRayPtsResultsFACE = &H1 swRayPtsResultsSILHOUETTE = &H2 swRayPtsResultsEDGE = &H4 swRayPtsResultsVERTEX = &H8 swRayPtsResultsENTER = &H10 swRayPtsResultsEXIT = &H20 End Enum ' The different pieces of text within a weld annotation. (WeldSymbol::GetText) Public Enum swWeldSymbolTextTypes_e swWeldLeftTextAbove = 1 ' The text just to the left of the weld symbol, above the horizontal line swWeldSymbolTextAbove = 2 ' The weld symbol, above the horizontal line swWeldRightTextAbove = 3 ' The text just to the right of the weld symbol, above the horizontal line swWeldStaggerTextAbove = 4 ' The text related to the stagger characteristic, above the horizontal line swWeldLeftTextBelow = 5 ' The text just to the left of the weld symbol, below the horizontal line swWeldSymbolTextBelow = 6 ' The weld symbol, below the horizontal line swWeldRightTextBelow = 7 ' The text just to the right of the weld symbol, below the horizontal line swWeldStaggerTextBelow = 8 ' The text related to the stagger characteristic, below the horizontal line swWeldProcessText = 9 ' The text related to the process indicators characteristic End Enum ' The different cases for contour symbols of a weld annotation. (WeldSymbol::GetContour/SetText) Public Enum swWeldSymbolContourTypes_e swWeldContourNone = 1 swWeldContourFlat = 2 swWeldContourConvex = 3 swWeldContourConcave = 4 End Enum ' The different cases for symmetric characteristic of a weld annotation. (WeldSymbol::Get/SetSymmetric) Public Enum swWeldSymbolSymmetric_e swWeldSymmetric = 1 ' The symbol is symmetric on this weld annotation swWeldDashedLineOnTop = 2 ' The symbol is not symmetric, with the dashed horizontal line above swWeldDashedLineOnBottom = 3 ' The symbol is not symmetric, with the dashed horizontal line below End Enum ' The different cases for field or site characteristic of a weld annotation. (WeldSymbol::Get/SetFieldWeld) Public Enum swWeldSymbolField_e swFieldWeldNone = 1 ' No field-site weld marking on this annotation swFieldWeldUp = 2 ' The field-site weld marking is pointing up swFieldWeldDown = 3 ' The field-site weld marking is pointing down End Enum ' The different cases for whether or not a Display Dimension leader is broken or not, and how the text is ' placed relative to the leader. Public Enum swDisplayDimensionLeaderText_e swSolidLeaderAlignedText = 1 swBrokenLeaderHorizontalText = 2 swBrokenLeaderAlignedText = 3 End Enum Public Enum swLineStyles_e swLineCONTINUOUS = 0 swLineHIDDEN = 1 swLinePHANTOM = 2 swLineCHAIN = 3 swLineCENTER = 4 swLineSTITCH = 5 swLineCHAINTHICK = 6 swLineDEFAULT = 7 End Enum ' The different types of drawing views. Public Enum swDrawingViewTypes_e swDrawingSheet = 1 swDrawingSectionView = 2 swDrawingDetailView = 3 swDrawingProjectedView = 4 swDrawingAuxiliaryView = 5 swDrawingStandardView = 6 swDrawingNamedView = 7 swDrawingRelativeView = 8 End Enum ' For the Sketch Fillet command, the different actions that can be taken when the fillet is being ' applied to a corner that has constraints. Public Enum swConstrainedCornerAction_e swConstrainedCornerInteract = 0 ' Ask the user whether to Delete the geometry or Stop Processing swConstrainedCornerKeepGeometry = 1 ' Keep the constrained geometry in the part swConstrainedCornerDeleteGeometry = 2 ' Delete the constrained geometry from the part swConstrainedCornerStopProcessing = 3 ' Do not do anything, stop processing immediately End Enum ' The different command mode that can be in effect. Used by the SldWorks::GetMouseDragMode API. Public Enum swMouseDragMode_e swTranslateAssemblyComponent = 1 ' Assembly Component Move mode swRotateAssemblyComponentAboutCenter = 2 ' Assembly Component Rotate mode swRotateAssemblyComponentAboutAxis = 3 ' Assembly Component Rotate About Axis mode swAssemblySmartMates = 4 ' Assembly Component Smart Mate mode swRotateView = 5 ' View Rotate mode swTranslateView = 6 ' View Translate mode swZoomView = 7 ' View Zoom mode swZoomToAreaOfView = 8 ' View Zoom To mode swInsertDimension = 9 ' Insert Dimension mode End Enum ' The different possibilities for types of Datum Target area shapes. (DatumTargetSym::Get/SetTargetShape) Public Enum swDatumTargetAreaShape_e swDatumTargetAreaNone = 0 swDatumTargetAreaPoint = 1 swDatumTargetAreaCircle = 2 swDatumTargetAreaRectangle = 3 End Enum ' Possible status values for the Edit Part command. Public Enum swEditPartCommandStatus_e swEditPartFailure = -1 swEditPartAsmMustBeSaved = -2 swEditPartCompMustBeSelected = -3 swEditPartCompMustBeResolved = -4 swEditPartCompMustHaveWriteAccess = -5 swEditPartSuccessful = 0 swEditPartCompNotPositioned = &H1 End Enum ' Possible values for the visibility state of an annotation. (Annotation::Visible property) Public Enum swAnnotationVisibilityState_e swAnnotationVisibilityUnknown = 0 swAnnotationVisible = 1 swAnnotationHalfHidden = 2 swAnnotationHidden = 3 End Enum ' This is used by the notification LightweightComponentOpenNotify() Public Enum swOutOfDateStatus_e swUnknownState = 0 swModelUpToDate = 1 swModelOutOfDate = 2 End Enum ' This is used by the API GetLocalizedMenuName() Public Enum swMenuIdentifiers_e swFileMenu = 0 swEditMenu = 1 swViewMenu = 2 swInsertMenu = 3 swToolsMenu = 4 swWindowMenu = 5 swHelpMenu = 6 swDeveloperToolsMenu = 7 swViewToolbarsMenu = 8 End Enum ' For InsertScale Public Enum swScaleType_e swScaleAboutCentroid = 0 swScaleAboutOrigin = 1 swScaleAboutCoordinateSystem = 2 End Enum ' For InsertCavity4 Public Enum swCavityScaleType_e swAboutCentroid = 0 swAboutOrigin = 1 swAboutMoldBaseOrigin = 2 swAboutCoordinateSystem = 3 End Enum Public Enum swFeatMgrPane_e swFeatMgrPaneTop = 0 swFeatMgrPaneBottom = 1 swFeatMgrPaneTopHidden = 2 swFeatMgrPaneBottomHidden = 3 End Enum ' Possible values for the swDetailingDualDimPosition User Preference setting. Public Enum swDetailingDualDimPosition_e swDualDimensionsSideBySide = 1 swDualDimensionsAboveAndBelow = 2 End Enum ' Possible values for the swDetailingDimTrailingZero User Preference setting Public Enum swDetailingDimTrailingZero_e swDimSmartTrailingZeroes = 0 swDimShowTrailingZeroes = 1 swDimRemoveTrailingZeroes = 2 End Enum ' Possible values for the swDetailingToleranceTextSizing User Preference setting Public Enum swDetailingToleranceTextSizing_e swToleranceTextSizeUsingScaleValue = 1 swToleranceTextSizeUsingHeightValue = 2 End Enum ' Possible values for the swDetailingDimensionStandard User Preference setting Public Enum swDetailingStandard_e swDetailingStandardANSI = 1 swDetailingStandardISO = 2 swDetailingStandardDIN = 3 swDetailingStandardJIS = 4 swDetailingStandardBS = 5 swDetailingStandardGOST = 6 swDetailingStandardGB = 7 End Enum ' Possible values for the swDetailingBOMUpperText and LowerText User Preference settings Public Enum swDetailingNoteTextContent_e swDetailingNoteTextCustom = 1 swDetailingNoteTextItemNumber = 2 swDetailingNoteTextQuantity = 3 End Enum ' Possible values for the swDetailingVirtualSharpStyle User Preference settings Public Enum swDetailingVirtualSharp_e swDetailingVirtualSharpNone = 0 swDetailingVirtualSharpPlus = 1 swDetailingVirtualSharpStar = 2 swDetailingVirtualSharpWitness = 3 swDetailingVirtualSharpDot = 4 End Enum ' Different types of dimensions. Used by DisplayDimension::GetType. Public Enum swDimensionType_e swDimensionTypeUnknown = 0 swOrdinateDimension = 1 swLinearDimension = 2 swAngularDimension = 3 swArcLengthDimension = 4 swRadialDimension = 5 End Enum ' Possible values for the swImageQualityShaded User Preference setting Public Enum swImageQualityShaded_e swShadedImageQualityCoarse = 1 swShadedImageQualityFine = 2 swShadedImageQualityCustom = 3 End Enum ' Possible values for the swImageQualityWireframe User Preference setting Public Enum swImageQualityWireframe_e swWireframeImageQualityOptimal = 1 swWireframeImageQualityCustom = 2 End Enum Public Enum swLoadDetachedModelRules_e swLoadDetachedModelPrompt = 0 swLoadDetachedModelAuto = 1 swDoNotLoadDetachedModel = 2 End Enum ' Possible value for different methods of display tangent edges. (View::Get/SetDisplayTangentEdges2) Public Enum swDisplayTangentEdges_e swTangentEdgesHidden = 0 swTangentEdgesVisibleAndFonted = 1 swTangentEdgesVisible = 2 End Enum ' Possible values for the swSTLQuality User Preference setting Public Enum swSTLQuality_e swSTLQuality_Coarse = 1 swSTLQuality_Fine = 2 swSTLQuality_Custom = 3 End Enum ' Possible values for the swDrawingProjectionType User Preference setting Public Enum swDrawingProjectionType_e swDrawing1stAngleProjection = 1 swDrawing3rdAngleProjection = 2 End Enum Public Enum swPromptAlwaysNever_e swResponsePrompt = 0 swResponseAlways = 1 swResponseNever = 2 End Enum ' Possible values for the swIGESRepresentation User Preference setting. Public Enum swIGESRepresentation_e swIGES_TRMSRF = 0 ' Trimmed surface representation swIGES_CURVES = 1 ' WireFrame representation swIGES_TRMSRFANDCURVES = 2 ' Both trimmed surface and wireframe representation swIGES_BREP = 3 End Enum ' Possible values for the swIGESSystem User Preference setting. Public Enum swIGESPreferredSystem_e swIGES_STANDARD = 0 swIGES_NURBS = 1 swIGES_ANSYS = 2 swIGES_COSMOS = 3 swIGES_MASCAM = 4 swIGES_SURFCAM = 5 swIGES_SMARTCAM = 6 swIGES_TEKSOFT = 7 swIGES_ALPHACAM = 8 swIGES_MULTICAM = 9 swIGES_ALIAS = 10 End Enum ' Possible values for the swIGESCurveRepresentation User Preference setting. Public Enum swIGESCurveRepresentation_e swIGES_CURVES_BSPLINE = 0 ' free form curves as bspline representation swIGES_CURVES_PSPLINE = 1 ' free form curves as parametric spline representation End Enum ' Possible value for the constraint status of a sketch Public Enum swConstrainedStatus_e swUnknownConstraint = 1 swUnderConstrained = 2 swFullyConstrained = 3 swOverConstrained = 4 swNoSolution = 5 swInvalidSolution = 6 swAutosolveOff = 7 End Enum ' Suppression actions for features. Public Enum swFeatureSuppressionAction_e swSuppressFeature = 0 ' Suppress the feature. swUnSuppressFeature = 1 ' Unsuppress the feature. swUnSuppressDependent = 2 ' Unsuppress the children of the features. End Enum ' HLR Quality Settings... Public Enum swHlrQuality_e swPreciseHlr = 0 swFastHlr = 1 End Enum ' Possible values for the entityType argument of the Sketch::SetEntityCount API. Public Enum swSketchEntityType_e swSketchEntityPoint = 1 swSketchEntityLine = 2 swSketchEntityArc = 3 swSketchEntityEllipse = 4 swSketchEntityParabola = 5 swSketchEntitySpline = 6 End Enum Public Enum swWzdGeneralHoleTypes_e swWzdCounterBore = 0 swWzdCounterSink = 1 swWzdHole = 2 swWzdPipeTap = 3 swWzdTap = 4 swWzdLegacy = 5 End Enum ' if additional hole types are added to the hole wizard dialog, this will be incremented. Public Enum swWzdHoleTypes_e swSimple = 0 swTapered = 1 swCounterBored = 2 swCounterSunk = 3 swCounterDrilled = 4 swSimpleDrilled = 5 swTaperedDrilled = 6 swCounterBoredDrilled = 7 swCounterSunkDrilled = 8 swCounterDrilledDrilled = 9 swCounterBoreBlind = 10 swCounterBoreBlindCounterSinkMiddle = 11 swCounterBoreBlindCounterSinkTop = 12 swCounterBoreBlindCounterSinkTopmiddle = 13 swCounterBoreThru = 14 swCounterBoreThruCounterSinkBottom = 15 swCounterBoreThruCounterSinkMiddle = 16 swCounterBoreThruCounterSinkMiddleBottom = 17 swCounterBoreThruCounterSinkTop = 18 swCounterBoreThruCounterSinkTopBottom = 19 swCounterBoreThruCounterSinkTopMiddle = 20 swCounterBoreThruCounterSinkTopMiddleBottom = 21 swHoleBlind = 22 swHoleBlindCounterSinkTop = 23 swCounterSinkBlind = 24 swHoleThru = 25 swHoleThruCounterSinkBottom = 26 swHoleThruCounterSinkTop = 27 swHoleThruCounterSinkTopBottom = 28 swCounterSinkThru = 29 swCounterSinkThruCounterSinkBottom = 30 swTapBlind = 31 swTapBlindCounterSinkTop = 32 swTapThru = 33 swTapThruCounterSinkBottom = 34 swTapThruCounterSinkTop = 35 swTapThruCounterSinkTopBottom = 36 swPipeTapBlind = 37 swPipeTapBlindCounterSinkTop = 38 swPipeTapThru = 39 swPipeTapThruCounterSinkBottom = 40 swPipeTapThruCounterSinkTop = 41 swPipeTapThruCounterSinkTopBottom = 42 swCounterSinkBlindWithoutHeadClearance = 43 swCounterSinkThruWithoutHeadClearance = 44 swCounterSinkThruCounterSinkBottomWithoutHeadClearance = 45 swTapBlindCosmeticThread = 46 swTapBlindCosmeticThreadCounterSinkTop = 47 swTapThruCosmeticThread = 48 swTapThruCosmeticThreadCounterSinkTop = 49 swTapThruCosmeticThreadCounterSinkBottom = 50 swTapThruCosmeticThreadCounterSinkTopBottom = 51 swTapThruThreadThru = 52 swTapThruThreadThruCounterSinkTop = 53 swTapThruThreadThruCounterSinkBottom = 54 swTapThruThreadThruCountersinkTopBottom = 55 End Enum ' Update this when you add new hole types. Public Enum swWzdHoleStandards_e swStandardAnsiInch = 0 swStandardAnsiMetric = 1 swStandardBSI = 2 swStandardDME = 3 swStandardDIN = 4 swStandardHascoMetric = 5 swStandardHelicoilInch = 6 swStandardHelicoilMetric = 7 swStandardISO = 8 swStandardJIS = 9 swStandardPCS = 10 swStandardProgressive = 11 swStandardSuperior = 12 End Enum Public Enum swWzdHoleStandardFastenerTypes_e swStandardAnsiInchBinding = 0 swStandardAnsiInchButton = 1 swStandardAnsiInchFillister = 2 swStandardAnsiInchHexBolt = 3 swStandardAnsiInchHexBoltFinished = 4 swStandardAnsiInchHexBoltHeavy = 5 swStandardAnsiInchHexScrew = 6 swStandardAnsiInchHexWasherScrew = 7 swStandardAnsiInchPan = 8 swStandardAnsiInchSocketCapScrew = 9 swStandardAnsiInchSocketShoulderScrew = 10 swStandardAnsiInchSquare = 11 swStandardAnsiInchTruss = 12 swStandardAnsiInchFlatSocket82 = 13 swStandardAnsiInchFlatHead100 = 14 swStandardAnsiInchFlatHead82 = 15 swStandardAnsiInchOval = 16 swStandardAnsiInchHcoilTapDrills = 17 swStandardAnsiInchAllDrillSizes = 18 swStandardAnsiInchFractionalDrillSizes = 19 swStandardAnsiInchLetterDrillSizes = 20 swStandardAnsiInchPipeTapDrills = 21 swStandardAnsiInchScrewClearances = 22 swStandardAnsiInchTapDrills = 23 swStandardAnsiInchNumberDrillSizes = 24 swStandardAnsiInchTaperedPipeTap = 25 swStandardAnsiInchBottomingTappedHole = 26 swStandardAnsiInchTappedHole = 27 swStandardAnsiMetricButton = 28 swStandardAnsiMetricHexBolt = 29 swStandardAnsiMetricHexCapScrew = 30 swStandardAnsiMetricHexScrewFormed = 31 swStandardAnsiMetricPan = 32 swStandardAnsiMetricSocketHeadCapScrew = 33 swStandardAnsiMetricSocketShoulderScrew = 34 swStandardAnsiMetricFlatSocket82 = 35 swStandardAnsiMetricFlatHead82 = 36 swStandardAnsiMetricOval = 37 swStandardAnsiMetricHcoilTapDrills = 38 swStandardAnsiMetricDrillSizes = 39 swStandardAnsiMetricScrewClearances = 40 swStandardAnsiMetricTapDrills = 41 swStandardAnsiMetricBottomingTappedHole = 42 swStandardAnsiMetricTappedHole = 43 swStandardBSICheese = 44 swStandardBSIHexBolt = 45 swStandardBSIHexCapScrew = 46 swStandardBSIHexMachineScrew = 47 swStandardBSIPanHead = 48 swStandardBSISocketCapScrew = 49 swStandardBSIFlatSocketCap = 50 swStandardBSIFlatHead = 51 swStandardBSIOvalHead = 52 swStandardBSIHcoilTapDrills = 53 swStandardBSIDrillSizes = 54 swStandardBSIScrewClearances = 55 swStandardBSITapDrills = 56 swStandardBSITappedHoleBottoming = 57 swStandardBSITappedHole = 58 swStandardBSITaperedPipeTap = 59 swStandardDINHeavyHexBolt = 60 swStandardDINHexFlangeBolt = 61 swStandardDINCheeseHead = 62 swStandardDINHexBolt = 63 swStandardDINHexCapScrew = 64 swStandardDINHexMachineScrew = 65 swStandardDINPan = 66 swStandardDINSocketHeadCap = 67 swStandardDINSocketCTSKFlatHead = 68 swStandardDINCTSKFlatHead = 69 swStandardDINCTSKRaisedHead = 70 swStandardDINHcoilTapDrills = 71 swStandardDINDrillSizes = 72 swStandardDINScrewClearances = 73 swStandardDINTapDrills = 74 swStandardDINTappedHoleBottoming = 75 swStandardDINTappedHole = 76 swStandardDINTaperedPipeTap = 77 swStandardDMECCorePins = 78 swStandardDMECXCorePins = 79 swStandardDMETHXEjectorPins = 80 swStandardDMEStandardLeaderPins = 81 swStandardDMEReturnPins = 82 swStandardDMESocketCapScrew = 83 swStandardDMESupportPillarSHCS = 84 swStandardDMESpruPullerPins = 85 swStandardDMEStripperBolt = 86 swStandardDMEFlatSocket82 = 87 swStandardDMEFlatHead100 = 88 swStandardDMEFlatHead82 = 89 swStandardDMEOval = 90 swStandardDMESupportPillarClearance = 91 swStandardDMEFractionalDrillSizes = 92 swStandardDMEHcoilTapDrills = 93 swStandardDMEAllDrillSizes = 94 swStandardDMELetterDrillSizes = 95 swStandardDMENumberDrillSizes = 96 swStandardDMEPipeTapDrills = 97 swStandardDMEScrewClearances = 98 swStandardDMECCorePinClearances = 99 swStandardDMECXCorePinClearances = 100 swStandardDMETHXEjectorPinClearances = 101 swStandardDMELeaderPinClearances = 102 swStandardDMEReturnPinClearances = 103 swStandardDMESpruPullerPinClearances = 104 swStandardDMETapDrills = 105 swStandardDMEBottomingTappedHole = 106 swStandardDMETappedHole = 107 swStandardDMETaperedPipeTap = 108 swStandardHascoMetricCCorePins = 109 swStandardHascoMetricGuideBushings = 110 swStandardHascoMetricGuidePillars = 111 swStandardHascoMetricLocatingGuideBushings = 112 swStandardHascoMetricLocatingGuidePillars = 113 swStandardHascoMetricSocketCapScrew = 114 swStandardHascoMetricShoulderScrew = 115 swStandardHascoMetricCTSKFlatHead = 116 swStandardHascoMetricDrillSizes = 117 swStandardHascoMetricScrewClearances = 118 swStandardHascoMetricCorePinClearances = 119 swStandardHascoMetricCenteringSleeve = 120 swStandardHascoMetricEjectorRodClearances = 121 swStandardHascoMetricBottomingTappedHole = 122 swStandardHascoMetricTappedHole = 123 swStandardHcoilInchInsert10Dia = 124 swStandardHcoilInchInsert15Dia = 125 swStandardHcoilInchInsert20Dia = 126 swStandardHcoilInchInsert25Dia = 127 swStandardHcoilInchInsert30Dia = 128 swStandardHcoilMetricInsert10Dia = 129 swStandardHcoilMetricInsert15Dia = 130 swStandardHcoilMetricInsert20Dia = 131 swStandardHcoilMetricInsert25Dia = 132 swStandardHcoilMetricInsert30Dia = 133 swStandardISOCheeseHead = 134 swStandardISOHexBolt = 135 swStandardISOHexCapScrew = 136 swStandardISOHexMachineScrew = 137 swStandardISOPan = 138 swStandardISOSocketHeadCap = 139 swStandardISOSocketCTSKFlatHead = 140 swStandardISOCTSKFlatHead = 141 swStandardISOCTSKRaisedHead = 142 swStandardISODrillSizes = 143 swStandardISOScrewClearances = 144 swStandardISOTapDrills = 145 swStandardISOTappedHoleBottoming = 146 swStandardISOTappedHole = 147 swStandardISOTaperedPipeTap = 148 swStandardJISCheeseHead = 149 swStandardJISFillisterHead = 150 swStandardJISButton = 151 swStandardJISHexBolt = 152 swStandardJISHexCapScrew = 153 swStandardJISHexMachineScrew = 154 swStandardJISPan = 155 swStandardJISSocketHeadCap = 156 swStandardJISSocketShoulderScrew = 157 swStandardJISFlatCTSKHead = 158 swStandardJISRaisedCTSKHead = 159 swStandardJISDrillSizes = 160 swStandardJISScrewClearances = 161 swStandardJISTapDrills = 162 swStandardJISTappedHoleBottoming = 163 swStandardJISTappedHole = 164 swStandardJISTaperedPipeTap = 165 swStandardPCSReturnPins = 166 swStandardPCSCorePins = 167 swStandardPCSEjectorPins = 168 swStandardPCSStandardLeaderPins = 169 swStandardPCSSocketCapScrew = 170 swStandardPCSStripperBolt = 171 swStandardPCSSupportPillarSHCS = 172 swStandardPCSFlatHead100 = 173 swStandardPCSFlatHead82 = 174 swStandardPCSOval = 175 swStandardPCSFlatSocket82 = 176 swStandardPCSHcoilTapDrills = 177 swStandardPCSFractionalDrillSizes = 178 swStandardPCSNumberDrillSizes = 179 swStandardPCSPipeTapDrills = 180 swStandardPCSScrewClearances = 181 swStandardPCSAllDrillSizes = 182 swStandardPCSEjectorPinClearances = 183 swStandardPCSLetterDrillSizes = 184 swStandardPCSSupportPillarClearances = 185 swStandardPCSCorePinClearances = 186 swStandardPCSLeaderPinClearances = 187 swStandardPCSReturnPinClearances = 188 swStandardPCSTapDrills = 189 swStandardPCSBottomingTappedHole = 190 swStandardPCSTappedHole = 191 swStandardPCSTaperedPipeTap = 192 swStandardProgressiveSocketCapScrew = 193 swStandardProgressiveReturnPins = 194 swStandardProgressiveCorePins = 195 swStandardProgressiveEjectorPins = 196 swStandardProgressiveSpruePullerPins = 197 swStandardProgressiveSupportPillarSHCS = 198 swStandardProgressiveStripperBolt = 199 swStandardProgressiveStandardLeaderPins = 200 swStandardProgressiveFlatSocket82 = 201 swStandardProgressiveOval = 202 swStandardProgressiveFlatHead100 = 203 swStandardProgressiveFlatHead82 = 204 swStandardProgressiveHcoilTapDrills = 205 swStandardProgressiveFractionalDrillSizes = 206 swStandardProgressiveNumberDrillSizes = 207 swStandardProgressivePipeTapDrills = 208 swStandardProgressiveScrewClearances = 209 swStandardProgressiveAllDrillSizes = 210 swStandardProgressiveEjectorPinClearances = 211 swStandardProgressiveLetterDrillSizes = 212 swStandardProgressiveSupportPillarClearances = 213 swStandardProgressiveCorePinClearances = 214 swStandardProgressiveLeaderPinClearances = 215 swStandardProgressiveSpruePullerPinClearances = 216 swStandardProgressiveReturnPinClearances = 217 swStandardProgressiveTapDrills = 218 swStandardProgressiveTappedHole = 219 swStandardProgressiveBottomingTappedHole = 220 swStandardProgressiveTaperedPipeTap = 221 swStandardSuperiorReturnPins = 222 swStandardSuperiorEjectorPins = 223 swStandardSuperiorSpruePullerPins = 224 swStandardSuperiorSupportPillarSHCS = 225 swStandardSuperiorStripperBolt = 226 swStandardSuperiorSocketCapScrew = 227 swStandardSuperiorStandardLeaderPins = 228 swStandardSuperiorFlatHead100 = 229 swStandardSuperiorFlatHead82 = 230 swStandardSuperiorOval = 231 swStandardSuperiorFlatSocket82 = 232 swStandardSuperiorHcoilTapDrills = 233 swStandardSuperiorFractionalDrillSizes = 234 swStandardSuperiorNumberDrillSizes = 235 swStandardSuperiorPipeTapDrills = 236 swStandardSuperiorScrewClearances = 237 swStandardSuperiorAllDrillSizes = 238 swStandardSuperiorEjectorPinClearances = 239 swStandardSuperiorLetterDrillSizes = 240 swStandardSuperiorSupportPillarClearances = 241 swStandardSuperiorLeaderPinClearances = 242 swStandardSuperiorSpruePullerPinClearances = 243 swStandardSuperiorReturnPinClearances = 244 swStandardSuperiorTapDrills = 245 swStandardSuperiorTappedHole = 246 swStandardSuperiorBottomingTappedHole = 247 swStandardSuperiorTaperedPipeTap = 248 End Enum Public Enum swWzdHoleCounterSinkHeadClearanceTypes_e swHeadClearanceIncreasedCsink = 0 swHeadClearanceAddToCbore = 1 End Enum Public Enum swWzdHoleHcoilTapTypes_e swTapTypePlug = 0 swTapTypeBottom = 1 End Enum Public Enum swWzdHoleScrewClearanceTypes_e swScrewClearanceClose = 0 swScrewClearanceNormal = 1 swScrewClearanceLoose = 2 End Enum Public Enum swWzdHoleCosmeticThreadTypes_e swCosmeticThreadNone = 0 swCosmeticThreadWithCallout = 1 swCosmeticThreadWithoutCallout = 2 End Enum Public Enum swWzdHoleThreadEndCondition_e swEndThreadTypeBLIND = 0 swEndThreadTypeTHROUGH_ALL = 1 swEndThreadTypeTHROUGH_NEXT = 2 End Enum Public Enum swCreateFacesBodyAction_e swCreateFacesBodyActionCap = 1 swCreateFacesBodyActionGrow = 2 swCreateFacesBodyActionGrowFromParent = 3 swCreateFacesBodyActionLeaveRubber = 4 End Enum ' Used for APIs that allow bitwise ORing of document types, like ' SldWorks::AddToolbar2() Public Enum swDocTemplateTypes_e swDocTemplateTypeNONE = &H1 swDocTemplateTypePART = &H2 swDocTemplateTypeASSEMBLY = &H4 swDocTemplateTypeDRAWING = &H8 End Enum Public Enum swCreateFeatureBodyOpts_e swCreateFeatureBodyCheck = &H1 swCreateFeatureBodySimplify = &H2 End Enum Public Enum swToolbarDockStatePosition_e swDockNoToolbar = -1 swNoDock = 0 swDockTop = 1 swDockBottom = 2 swDockRight = 3 swDockLeft = 4 End Enum Public Enum swImprintingFacesOpts_e swImprintingFacesOnTool = &H1 swImprintingFacesOnOverlapping = &H2 swImprintingFacesOnExtendFace = &H4 End Enum ' A list of feature types to be used with the Sketch::CheckFeatureUse API Public Enum swSketchCheckFeatureProfileUsage_e swSketchCheckFeature_UNSET = 0 swSketchCheckFeature_BASEEXTRUDE = 1 swSketchCheckFeature_BASEEXTRUDETHIN = 2 swSketchCheckFeature_BOSSEXTRUDE = 3 swSketchCheckFeature_BOSSEXTRUDETHIN = 4 swSketchCheckFeature_SURFACEEXTRUDE = 5 swSketchCheckFeature_BASEREVOLVE = 6 swSketchCheckFeature_BASEREVOLVETHIN = 7 swSketchCheckFeature_BOSSREVOLVE = 8 swSketchCheckFeature_BOSSREVOLVETHIN = 9 swSketchCheckFeature_SURFACEREVOLVE = 10 swSketchCheckFeature_CUTEXTRUDE = 11 swSketchCheckFeature_CUTEXTRUDETHIN = 12 swSketchCheckFeature_CUTREVOLVE = 13 swSketchCheckFeature_CUTREVOLVETHIN = 14 swSketchCheckFeature_SWEEPSECTION = 15 swSketchCheckFeature_SURFACESWEEPSECTION = 16 swSketchCheckFeature_SWEEPPATHORGUIDE = 17 swSketchCheckFeature_LOFTSECTION = 18 swSketchCheckFeature_SURFACELOFTSECTION = 19 swSketchCheckFeature_LOFTGUIDE = 20 swSketchCheckFeature_RIBSECTION = 21 swSketchCheckFeature_SHEETMETAL_BASEFLANGE = 22 End Enum ' A list of return status values for the Sketch::CheckFeatureUse API Public Enum swSketchCheckFeatureStatus_e swSketchCheckFeatureStatus_UnknownError = -1 swSketchCheckFeatureStatus_OK = 0 swSketchCheckFeatureStatus_EntXEnt = 1 swSketchCheckFeatureStatus_EntXSelf = 2 swSketchCheckFeatureStatus_EntUnspecBad = 3 swSketchCheckFeatureStatus_ThreeEnts = 4 swSketchCheckFeatureStatus_EmptySketch = 5 swSketchCheckFeatureStatus_WrongOpen = 6 swSketchCheckFeatureStatus_WrongManyContours = 7 swSketchCheckFeatureStatus_ZeroLengthEnt = 8 swSketchCheckFeatureStatus_ManyOpen = 9 swSketchCheckFeatureStatus_NoOpen = 10 swSketchCheckFeatureStatus_MixedContours = 11 swSketchCheckFeatureStatus_CturXCtur = 12 swSketchCheckFeatureStatus_DisjCturs = 13 swSketchCheckFeatureStatus_OpenWantClosed = 14 swSketchCheckFeatureStatus_ClosedWantOpen = 15 swSketchCheckFeatureStatus_DoubleContainment = 16 swSketchCheckFeatureStatus_MoreThanOneContour = 17 swSketchCheckFeatureStatus_OneOpenContourExpected = 18 swSketchCheckFeatureStatus_OneClosedContourExpected = 19 swSketchCheckFeatureStatus_WantSingleOpenOrMultiClosedDisjoint = 20 swSketchCheckFeatureStatus_NeedsAxis = 21 swSketchCheckFeatureStatus_OpenOrUnclear = 22 swSketchCheckFeatureStatus_ContourIntersectsCenterLine = 23 End Enum ' A list of return status values for the ModelDoc::GetMassProperties API Public Enum swMassPropertiesStatus_e swMassPropertiesStatus_OK = 0 swMassPropertiesStatus_UnknownError = 1 swMassPropertiesStatus_NoBody = 2 End Enum ' A list of possible arc types when using CreateTangentArc2 Public Enum swTangentArcTypes_e swForward = 1 swLeft = 2 swBack = 3 swRight = 4 End Enum ' Possible values for the options argument of SldWorks::OpenDoc4. Public Enum swOpenDocOptions_e swOpenDocOptions_Silent = &H1 ' Open document silently or not swOpenDocOptions_ReadOnly = &H2 ' Open document read only or not swOpenDocOptions_ViewOnly = &H4 ' Open document view only or not swOpenDocOptions_RapidDraft = &H8 ' Convert document to RapidDraft format or not (drawings only) swOpenDocOptions_LoadModel = &H10 ' Load detached models automatically or not (drawings only) swOpenDocOptions_AutoMissingConfig = &H20 ' Automatically handle missing configs of drawing views (drawings only) End Enum ' Possible values for the options argument of ModelDoc::SaveAs3. Public Enum swSaveAsOptions_e swSaveAsOptions_Silent = &H1 ' Save document silently or not swSaveAsOptions_Copy = &H2 ' Save document as a copy or not swSaveAsOptions_SaveReferenced = &H4 ' Save referenced documents or not (drawings and parts only) swSaveAsOptions_AvoidRebuildOnSave = &H8 ' Avoid rebuild on Save or SaveAs, if swSaveAsOptions_Silent swSaveAsOptions_UpdateInactiveViews = &H10 ' Update views of inactive sheets, if swSaveAsOptions_Silent swSaveAsOptions_OverrideSaveEmodel = &H20 ' Override system setting for saving emodel data of document swSaveAsOptions_SaveEmodelData = &H40 ' If OverrideSaveEmodel is True, use this as the value instead End Enum Public Enum swInConfigurationOpts_e swConfigPropertySuppressFeatures = 0 swThisConfiguration = 1 swAllConfiguration = 2 swSpecifyConfiguration = 3 End Enum Public Enum swKernelErrorCode_e swErrorSuccess = 1 swErrorError = 0 swErrorNotEntity = -100022 swErrorInvalidParameter = -100120 swErrorSurfaceDiscontinuous = -100129 swErrorCurveDiscontinuous = -100131 swErrorInvalidEntity = -100914 swErrorInvalidSharing = -100921 swErrorInvalidKnots = -100978 swErrorInvalidGeometry = -100999 swErrorHasInvalidentity = -101004 swErrorBodyDontKnit = -101041 swErrorInvalidPattern = -101042 swErrorCurveShort = -101057 swErrorFailed = -101063 swErrorCheckFailed = -105061 swErrorGeometryMissing = -113803 swErrorTopologySelfx = -113804 swErrorGeometrySelfx = -113805 swErrorGeometryDegenerate = -113806 swErrorInvalidGeometry2 = -113808 swErrorCheckFailed2 = -113812 swErrorFaceFaceInconsistent = -113816 swErrorVertexNotOnCurve = -113818 swErrorVerticesTouch = -113821 swErrorLoopsInconsistent = -113826 swErrorGeometryDiscontinuous = -113827 swErrorFacecheckFailed = -113829 swErrorFaceRedundant = -116402 swErrorInconsistentDirs = -116403 swErrorEdgeisectInvalid = -116404 swErrorInvalidLoop = -116405 swErrorEdgeIncorrectOrder = -116406 swErrorUnknown = -1 End Enum ' Different buttons that can be displayed on the PropertyManagerPage. Public Enum swPropertyManagerButtonTypes_e swPropertyManager_OkayButton = &H1 swPropertyManager_CancelButton = &H2 swPropertyManager_HelpButton = &H4 End Enum ' Return status values for the various PropertyManagerPage APIs. Public Enum swPropertyManagerStatus_e swPropertyManagerStatus_Okay = 0 swPropertyManagerStatus_Failed = -1 swPropertyManagerStatus_Disconnected = -2 End Enum ' Possible values for the swParasolidOutputVersion User Preference setting. Public Enum swParasolidOutputVersion_e swParasolidOutputVersion_latest = 0 swParasolidOutputVersion_80 = 1 swParasolidOutputVersion_90 = 2 swParasolidOutputVersion_91 = 3 swParasolidOutputVersion_100 = 4 swParasolidOutputVersion_110 = 5 swParasolidOutputVersion_111 = 6 swParasolidOutputVersion_120 = 7 swParasolidOutputVersion_121 = 8 End Enum ' Possible values for what action to take when setting the selected object mark. Public Enum swSelectionMarkAction_e swSelectionMarkSet = 0 swSelectionMarkAppend = 1 swSelectionMarkRemove = 2 swSelectionMarkClear = 3 End Enum ' Possible values for the swEdgesHiddenEdgeDisplay integer user preference option Public Enum swEdgesHiddenEdgeDisplay_e swEdgesHiddenEdgeDisplaySolid = 1 swEdgesHiddenEdgeDisplayDashed = 2 End Enum ' Possible values for the swEdgesTangentEdgeDisplay integer user preference option Public Enum swEdgesTangentEdgeDisplay_e swEdgesTangentEdgeDisplayVisible = 1 swEdgesTangentEdgeDisplayPhantom = 2 swEdgesTangentEdgeDisplayRemoved = 3 End Enum ' Possible values for the swEdgesShadedModeDisplay integer user preference option Public Enum swEdgesShadedModeDisplay_e swEdgesShadedModeDisplayNone = 1 swEdgesShadedModeDisplayHLR = 2 swEdgesShadedModeDisplayWireframe = 3 End Enum Public Enum swSplitFaceOnParam_e swSplitFaceOnParamU = 1 swSplitFaceOnParamV = 2 End Enum Public Enum swTbCommand_e swTbCONTROL = -2 swTbACTIVE = -1 swTbNONE = 0 swTbPART = 1 swTbASSEMBLY = 2 swTbDRAWING = 3 End Enum Public Enum swTbSaveModes_e swTbSAVE = 0 swTbLOAD = 1 End Enum Public Enum swTbControlModes_e swTbSTOP = 0 swTbCONTINUE = 1 swTbOleInplaceMode = 2 End Enum Public Enum swBendAllowanceTypes_e swBendAllowanceBendTable = 1 swBendAllowanceKFactor = 2 swBendAllowanceDirect = 3 swBendAllowanceDeduction = 4 End Enum Public Enum swSheetMetalReliefTypes_e swSheetMetalReliefRectangular = 1 swSheetMetalReliefTear = 2 swSheetMetalReliefObround = 3 swSheetMetalReliefNone = 4 swSheetMetalReliefTearBend = 5 End Enum Public Enum swUserUnitsType_e swLengthUnit = 0 swAngleUnit = 1 End Enum Public Enum swFlangeOffsetTypes_e swFlangeOffsetBlind = 1 swFlangeOffsetUpToVertex = 2 swFlangeOffsetUpToSurface = 3 swFlangeOffsetFromSurface = 4 swFlangeOffsetMidPlane = 5 End Enum Public Enum swFlangeDimTypes_e swFlangeDimTypeOuterVirtualSharp = 1 swFlangeDimTypeInnerVirtualSharp = 2 End Enum Public Enum swFlangePositionTypes_e swFlangePositionTypeMaterialInside = 1 swFlangePositionTypeMaterialOutside = 2 swFlangePositionTypeBendOutside = 3 swFlangePositionTypeBendCenterLine = 4 swFlangePositionTypeBendSharp = 5 End Enum Public Enum swReliefTearTypes_e swReliefTearTypeRip = 1 swReliefTearTypeExtend = 2 End Enum Public Enum swClosedCornerTypes_e swClosedCornerTypeButt = 1 swClosedCornerTypeOverlap = 2 swClosedCornerTypeUnderlap = 3 End Enum Public Enum swSelectionReferenceTypes_e swReferenceTypeVertex = 1 swReferenceTypeEdge = 2 swReferenceTypeFace = 3 swReferenceTypeRefSurface = 4 swReferenceTypeRefPlan = 5 swReferenceTypeSketchPoint = 6 swReferenceTypeBody = 7 End Enum Public Enum swPatternReferenceTypes_e swPatternReferenceTypeAxis = 0 swPatternReferenceTypeEdge = 1 swPatternReferenceTypeRefDim = 2 End Enum Public Enum swThinWallType_e swThinWallOneDirection = 0 swThinWallOppDirection = 1 swThinWallMidPlane = 2 swThinWallTwoDirection = 3 End Enum Public Enum swTextInBoxStyle_e swTextInBoxStyleNone = 0 swTextInBoxStyleWrap = 1 swTextInBoxStyleFit = 2 End Enum ' Possible values for the swPageSetupPrinterOrientation integer user preference value. (SPR 100576) Public Enum swPageSetupOrientation_e swPageSetupOrient_Portrait = 1 swPageSetupOrient_Landscape = 2 End Enum ' Possible values for the swPageSetupPrinterDrawingColor integer user preference value. (SPR 100576) Public Enum swPageSetupDrawingColor_e swPageSetup_AutomaticDrawingColor = 1 swPageSetup_ColorGrey = 2 swPageSetup_BlackAndWhite = 3 End Enum ' PropertyManagerPage2 status codes. Public Enum swPropertyManagerPageStatus_e swPropertyManagerPage_Okay = 0 swPropertyManagerPage_UnsupportedHandler = 1 swPropertyManagerPage_CreationFailure = -1 swPropertyManagerPage_NoDocument = -2 End Enum ' Possible values for the options argument of SldWorks::CreatePropertyManagerPage. Public Enum swPropertyManagerPageOptions_e swPropertyManagerOptions_OkayButton = &H1 swPropertyManagerOptions_CancelButton = &H2 swPropertyManagerOptions_LockedPage = &H4 swPropertyManagerOptions_CloseDialogButton = &H8 swPropertyManagerOptions_MultiplePages = &H10 End Enum ' Possible values for the options argument of PropertyManagerPage2::AddGroupBox. Public Enum swAddGroupBoxOptions_e swGroupBoxOptions_Checkbox = &H1 swGroupBoxOptions_Checked = &H2 swGroupBoxOptions_Visible = &H4 swGroupBoxOptions_Expanded = &H8 End Enum ' Possible values for the message box visibility argument of PropertyManagerPage2::SetMessage. Public Enum swPropertyManagerPageMessageVisibility swNoMessageBox = 1 swMessageBoxHidden = 2 swMessageBoxVisible = 3 swImportantMessageBox = 4 End Enum ' Possible values for the control type argument of PropertyManagerPageGroup::AddControl. Public Enum swPropertyManagerPageControlType_e swControlType_Label = 1 swControlType_Checkbox = 2 swControlType_Button = 3 swControlType_Option = 4 swControlType_Textbox = 5 swControlType_Listbox = 6 swControlType_Combobox = 7 swControlType_Numberbox = 8 swControlType_Selectionbox = 9 swControlType_ActiveX = 10 End Enum ' Possible values for the options argument of PropertyManagerPageGroup::AddControl. Public Enum swAddControlOptions_e swControlOptions_Visible = &H1 swControlOptions_Enabled = &H2 swControlOptions_SmallGapAbove = &H4 End Enum ' Possible values for the left edge alignment argument of PropertyManagerPageGroup::AddControl. Public Enum swPropertyManagerPageControlLeftAlign_e swControlAlign_LeftEdge = 1 swControlAlign_Indent = 2 End Enum ' Possible values for the default unit type of a PropertyManagerPageNumberbox. Public Enum swNumberboxUnitType_e swNumberBox_UnitlessInteger = 1 swNumberBox_UnitlessDouble = 2 swNumberBox_Length = 3 swNumberBox_Angle = 4 End Enum ' Possible values for predefined bitmap label types for a PropertyManagerPage control. Public Enum swControlBitmapLabelType_e swBitmapLabel_LinearDistance = 1 swBitmapLabel_AngularDistance = 2 swBitmapLabel_SelectEdgeFaceVertex = 3 swBitmapLabel_SelectFaceSurface = 4 swBitmapLabel_SelectVertex = 5 swBitmapLabel_SelectFace = 6 swBitmapLabel_SelectEdge = 7 swBitmapLabel_SelectFaceEdge = 8 swBitmapLabel_SelectComponent = 9 End Enum ' Possible values for the argument in the OnClose handler method call. Public Enum swPropertyManagerPageCloseReasons_e swPropertyManagerPageClose_UnknownReason = 0 swPropertyManagerPageClose_Okay = 1 swPropertyManagerPageClose_Cancel = 2 End Enum ' Possible values in the PropertyManagerPageListbox::Style property. Public Enum swPropMgrPageListBoxStyle_e swPropMgrPageListBoxStyle_Sorted = &H1 End Enum ' Possible values in the PropertyManagerPageCombobox::Style property. Public Enum swPropMgrPageComboBoxStyle_e swPropMgrPageComboBoxStyle_Sorted = &H1 swPropMgrPageComboBoxStyle_EditableText = &H2 End Enum ' Possible values for the button type argument of PropertyManagerPage2::EnableButton. Public Enum swPropertyManagerPageButtons_e swPropertyManagerPageButton_Ok = 1 swPropertyManagerPageButton_Cancel = 2 swPropertyManagerPageButton_Help = 3 swPropertyManagerPageButton_Next = 4 swPropertyManagerPageButton_Back = 5 End Enum ' Possible values in the PropertyManagerPageLabel::Style property. Public Enum swPropMgrPageLabelStyle_e swPropMgrPageLabelStyle_LeftText = &H1 swPropMgrPageLabelStyle_CenterText = &H2 swPropMgrPageLabelStyle_RightText = &H4 End Enum ' Possible return values for the OnActiveXControlCreated PropertyManagerPage2 handler method. Public Enum swHandleActiveXCreationFailure_e swHandleActiveXCreationFailure_Cancel = 1 swHandleActiveXCreationFailure_Retry = 2 swHandleActiveXCreationFailure_Continue = 3 End Enum ' Possible values in the PropertyManagerPageOption::Style property. Public Enum swPropMgrPageOptionStyle_e swPropMgrPageOptionStyle_FirstInGroup = &H1 End Enum ' Possible values in the PropertyManagerPageSelectionbox::Style property. Public Enum swPropMgrPageSelectionBoxStyle_e swPropMgrPageSelectionBoxStyle_HScroll = &H1 End Enum Public Enum swInsertEdgeFlangeOptions_e swInsertEdgeFlangeUseDefaultRadius = &H1 swInsertEdgeFlangeFlipDir = &H2 swInsertEdgeFlangeDoOffset = &H4 swInsertEdgeFlangeReverseOffsetDir = &H8 swInsertEdgeFlangeTearClip = &H10 swInsertEdgeFlangeTrimSideBend = &H20 swInsertEdgeFlangeUseReliefRatio = &H40 swInsertEdgeFlangeUseDefaultRelief = &H80 End Enum ' Twist control type used for creating Sweep Public Enum swTwistControlType_e swTwistControlFollowPath = 0 swTwistControlKeepNormalConstant = 1 swTwistControlFollowPathFirstGuideCurve = 2 swTwistControlFollowFirstSecondGuideCurves = 3 End Enum ' Sweep and Loft tangency options Public Enum swTangencyType_e swTangencyNone = 0 swTangencyNormalToProfile = 1 swTangencyDirectionVector = 2 swTangencyAllFaces = 3 End Enum ' Step type for Step Draft Public Enum swDraftStepType_e swDraftTaperedStep = 3 swDraftPerpendicular = 6 End Enum ' Face propagation type in draft Public Enum swDraftFacePropagationType_e swFacePropNone = 0 swFacePropTangent = 1 swFacePropAllLoops = 2 swFacePropInnerLoops = 3 swFacePropOuterLoops = 4 End Enum ' thickness type in Thicken Public Enum swThickenThicknessType_e swThickenSideOne = 0 swThickenSideTwo = 1 swThickenSideBoth = 2 End Enum ' External reference status Public Enum swExternalReferenceStatus_e swExternalReferenceBroken = 0 swExternalReferenceLocked = 1 swExternalReferenceInContext = 3 swExternalReferenceOutOfContext = 4 swExternalReferenceDangling = 5 End Enum Public Enum swReplaceComponentError_e swReplaceComponent_Undefined = 0 swReplaceComponent_Success = 1 swReplaceComponent_EmptyName = 2 swReplaceComponent_InvalidFileName = 3 swReplaceComponent_SameModelDifferentPath = 4 swReplaceComponent_SameFile = 5 swReplaceComponent_NotTopLevelComponent = 6 swReplaceComponent_UnknownError = 7 End Enum Public Enum swInContextEditTransparencyType_e swInContextEditTransparencyOpaque = 0 swInContextEditTransparencyForce = 1 swInContextEditTransparencyMaintain = 2 End Enum Public Enum swDraftType_e swNeutralPlaneDraft = 0 swPartingLineDraft = 1 swStepDraft = 3 End Enum Public Enum swMacroFeatureParamType_e swMacroFeatureParamTypeString = 0 swMacroFeatureParamTypeDouble = 1 swMacroFeatureParamTypeInteger = 2 End Enum ' Possible values for the swDetailingDatumDisplayType document user preference. Public Enum swDatumDisplayType_e swDatumDisplayType_Default = 0 swDatumDisplayType_Square = 1 swDatumDisplayType_Roundgb = 2 End Enum Public Enum swCurveDrivenPatternCurveMethod_e swCurvePatternTransformCurve = 0 swCurvePatternOffsetCurve = 1 End Enum Public Enum swCurveDrivenPatternAlignment_e swCurvePatternTangentToCurve = 0 swCurvePatternAlignToSeed = 1 End Enum ' Possible values for the InsertBomTable error return argument. Public Enum swBOMConfigurationCreationErrors_e swBOMTableCreation_Okay = 0 swBOMTableCreation_UnspecifiedError = -1 swBOMTableCreation_MustBeDrawingView = -2 swBOMTableCreation_AlreadyExists = -3 swBOMTableCreation_ExcelDisabled = -4 swBOMTableCreation_Failed = -5 swBOMTableCreation_NoModelForView = -6 End Enum ' Possible values for the swBOMConfigurationAnchorType environment user preference. Public Enum swBOMConfigurationAnchorType_e swBOMConfigurationAnchor_TopLeft = 1 swBOMConfigurationAnchor_TopRight = 2 swBOMConfigurationAnchor_BottomLeft = 3 swBOMConfigurationAnchor_BottomRight = 4 End Enum ' Possible values for the swBOMConfigurationWhatToShow environment user preference. Public Enum swBOMConfigurationWhatToShow_e swBOMConfiguration_ShowPartsOnly = 1 swBOMConfiguration_ShowPartsAndTopLevelAsm = 2 swBOMConfiguration_ShowAllInIndentedList = 3 End Enum ' Possible values for the swBOMControlMissingRowDisplay environment user preference. Public Enum swBOMControlMissingRowDisplay_e swBOMControlShowMissingRow = 1 swBOMControlHideMissingRow = 2 swBOMControlStrikeMissingRow = 3 End Enum ' Possible values for the swBOMControlSplitDirection environment user preference. Public Enum swBOMControlSplitDirection_e swBOMControlSplitRight = 1 swBOMControlSplitLeft = 2 End Enum ' Possible values for the Options argument of AddConfiguration3 and EditConfiguration3. Public Enum swConfigurationOptions2_e swConfigOption_UseAlternateName = &H1 swConfigOption_DontShowPartsInBOM = &H2 swConfigOption_SuppressByDefault = &H4 swConfigOption_HideByDefault = &H8 swConfigOption_MinFeatureManager = &H10 swConfigOption_InheritProperties = &H20 End Enum ' Possible values for the stacked balloon direction. Public Enum swStackedBalloonDirection_e swStackedBalloonDir_None = 0 swStackedBalloonDir_Up = 1 swStackedBalloonDir_Down = 2 swStackedBalloonDir_Left = 3 swStackedBalloonDir_Right = 4 End Enum ' Possible values for the draft analysis Public Enum swDraftAnalysisOptions_e swDraftAnalysisFlipDir = &H1 swDraftAnalysisFindSteep = &H2 End Enum Public Enum swDraftAnalysisShow_e swDraftAnalysisShowPositive = &H1 swDraftAnalysisShowNegative = &H2 swDraftAnalysisShowDraftRequired = &H4 swDraftAnalysisShowStraddle = &H8 swDraftAnalysisShowPositiveSteep = &H10 swDraftAnalysisShowNegativeSteep = &H20 swDraftAnalysisShowSurface = &H40 End Enum ' Possible values for getting the standard strings that can be part of a page header or footer. Public Enum swStandardHeaderFooterPageSetupTexts_e swHeaderFooterText_PageNumber = 1 swHeaderFooterText_PageCount = 2 swHeaderFooterText_Date = 3 swHeaderFooterText_Time = 4 swHeaderFooterText_Filename = 5 End Enum Public Enum swDetailingChamferDimLeaderTextStyle_e swDetailChamferDimDistDist = 1 swDetailChamferDimDistAng = 2 swDetailChamferDimAngDist = 3 swDetailChamferDimCDist = 4 End Enum Public Enum swDetailingChamferDimLeaderStyle_e swDetailChamferDimLeaderHorizBeside = 1 swDetailChamferDimLeaderHorizAbove = 2 swDetailChamferDimLeaderAngBeside = 3 swDetailChamferDimLeaderAngAbove = 4 End Enum Public Enum swDetailingChamferDimXStyle_e swDetailingChamferDimXStyleUpperCaseX = 1 swDetailingChamferDimXStyleLowerCaseX = 2 End Enum Public Enum swHemPositionTypes_e swHemPositionTypeInside = 0 swHemPositionTypeOutside = 1 End Enum Public Enum swHemTypes_e swHemTypeOpen = 0 swHemTypeClosed = 1 swHemTypeTearDrop = 2 swHemTypeRolled = 3 swHemTypeDouble = 4 End Enum Public Enum swBreakCornerTypes_e swBreakCornerTypeFillet = 1 swBreakCornerTypeChamfer = 2 End Enum Public Enum swJogDimensionPositionType_e swJogDimensionPositionInsideOffset = 1 swJogDimensionPositionOutsideOffset = 2 swJogDimensionPositionOverallPosition = 3 End Enum Public Enum swJogPositionType_e swJogPositionBendCenterline = 1 swJogPositionMaterialInside = 2 swJogPositionMaterialOutside = 3 swJogPositionBendOutside = 4 End Enum Public Enum swJogOffsetTypes_e swJogOffsetBlind = 1 swJogOffsetUpToVertex = 2 swJogOffsetUpToSurface = 3 swJogOffsetFromSurface = 4 swJogOffsetMidPlane = 5 End Enum Public Enum swSurfaceTrimType_e swTypeTrimTool = 0 swTypeMutualTrim = 1 End Enum Public Enum swRevolveType_e swRevolveTypeOneDirection = 0 swRevolveTypeMidPlane = 1 swRevolveTypeTwoDirection = 2 End Enum Public Enum swSurfaceExtendEndCond_e swSurfaceExtendEndCondDistance = 0 swSurfaceExtendEndCondUpToPoint = 1 swSurfaceExtendEndCondUpToSurface = 2 End Enum ' Possible values for callout target style. Public Enum swCalloutTargetStyle_e swCalloutTargetStyle_None = 0 swCalloutTargetStyle_Square = 1 swCalloutTargetStyle_Circle = 2 swCalloutTargetStyle_Triangle = 3 swCalloutTargetStyle_Arrow = 4 End Enum Public Enum swBendType_e swSharpBend = 0 swRoundBend = 1 swFlatBend = 2 swNoneBend = 3 swBaseBend = 4 swMiterBend = 5 swFlat3dBend = 6 swMirrorBend = 7 swEdgeFlangeBend = 8 swHemBend = 9 swFreeFormBend = 10 ' Obsolete; this type was never actually used by Sw swRuledBend = 11 ' Obsolete; this type was never actually used by Sw swLoftedBend = 12 End Enum ' Possible values for the block definition external reference state, returned by the ' BlockDefinition::SetUseExternalFile and SetExternalFileName APIs. Public Enum swBlockDefinitionExtFileStatus_e swBlockDefinitionExtFile_Failed = -1 swBlockDefinitionExtFile_Success = 0 swBlockDefinitionExtFile_NotLinked = 1 swBlockDefinitionExtFile_MissingReference = 2 swBlockDefinitionExtFile_OutOfDateReference = 3 End Enum ' Project 4545 XHatch Export to DXF-DWG Public Enum swCrossHatchFilter_e swCrossHatchInclude = 0 swCrossHatchExclude = 1 swCrossHatchOnly = 2 End Enum ' Possible values for the swLargeAsmModeCheckOutOfDateLightweight user preference. Public Enum swCheckOutOfDate_e swCheckOutOfDate_DoNotCheck = 0 swCheckOutOfDate_Indicate = 1 swCheckOutOfDate_AlwaysResolve = 2 End Enum ' Possible values for the break line style. Used by BreakLine::Style property. Public Enum swBreakLineStyle_e swBreakLine_Straight = 1 swBreakLine_ZigZag = 2 swBreakLine_Curve = 3 swBreakLine_SmallZigZag = 4 End Enum ' Possible values for the break line orientation. Used by BreakLine::Orientation property. Public Enum swBreakLineOrientation_e swBreakLineHorizontal = 1 swBreakLineVertical = 2 End Enum ' Possible values for the swSaveAssemblyAsPartOptions user preference. Public Enum swSaveAsmAsPartOptions_e swSaveAsmAsPart_AllComponents = 1 swSaveAsmAsPart_ExteriorComponents = 2 swSaveAsmAsPart_ExteriorFaces = 3 End Enum ' Possible values for the swPrompForFilenameCause_e user preference. Public Enum swPrompForFilenameCause_e swUnused = 0 swGeneric = 1 swMirrorComponent = 2 swWeldBead = 3 swDerivedPart = 4 swSplitAssembly = 5 swSplitPart = 6 swInsertEnvelopeFromFile = 7 swMirrorComponentBrowse = 8 swCreateNamedViewFromFile = 9 swComponentPropsReplace = 10 swOpenAssociatedDrawing = 11 swFileReloadReplace = 12 swDrawingAddViewFromFile = 13 swDrawingInsert3ViewFromFile = 14 swAddComponent = 15 End Enum Public Enum swRefPlaneType_e swRefPlaneInvalid = 0 swRefPlaneUndefined = 1 swRefPlaneLinePoint = 2 swRefPlaneThreePoint = 3 swRefPlaneLineLine = 4 swRefPlaneDistance = 5 swRefPlaneParallel = 6 swRefPlaneAngle = 7 swRefPlaneNormal = 8 swRefPlaneOnSurface = 9 End Enum Public Enum swOnSurfacePlaneProjectType_e swOnSurfacePlaneProjecttoNearestLocation = 0 swOnSurfacePlaneProjectAlongSketchNormal = 1 End Enum Public Enum swFileSaveTypes_e swFileSave = 1 swFileSaveAs = 2 swFileSaveAsCopy = 3 End Enum ' Possible values for the center mark style. Used by CenterMark::Style property and ' DrawingDoc::InsertCenterMark. Public Enum swCenterMarkStyle_e swCenterMark_NonAnnotation = 1 swCenterMark_Single = 2 swCenterMark_LinearGroup = 3 swCenterMark_CircularGroup = 4 End Enum ' Possible values for the center mark connection line visibility. ' Used by CenterMark::ConnectionLines property. Public Enum swCenterMarkConnectionLine_e swCenterMark_ShowNoConnectLines = &H0 swCenterMark_ShowLinearConnectLines = &H1 ' applies only to linear pattern style swCenterMark_ShowCircularConnectLines = &H2 ' applies only to circular pattern style swCenterMark_ShowRadialConnectLines = &H4 ' applies only to circular pattern style swCenterMark_ShowBaseCenterMarkLines = &H8 ' applies only to circular pattern style End Enum Public Enum swTextAlignmentVertical_e swTextAlignmentTop = 0 swTextAlignmentMiddle = 1 swTextAlignmentBottom = 2 End Enum Public Enum swMacroFeatureEntityIdType_e swMacroFeatureEntityIdNotApplied = -1 ' id is not owned by macro feature or entity does not require id assignment. swMacroFeatureEntityIdUndefined = 0 ' no id on entity swMacroFeatureEntityIdUnique = 1 ' id was uniquely assigned swMacroFeatureEntityIdDerived = 2 ' id was derived from parent feature id swMacroFeatureEntityIdUserDefined = 3 ' id was assigned by user End Enum Public Enum swCornerReliefType_e swCornerCircularRelief = 0 swCornerSquareRelief = 1 swCornerBendWaistRelief = 2 End Enum ' Possible values for the EditRollback3 API to use for indicating where the rollback bar is going. Public Enum swMoveRollbackBarTo_e swMoveRollbackBarToEnd = 1 swMoveRollbackBarToPreviousPosition = 2 swMoveRollbackBarToBeforeFeature = 3 swMoveRollbackBarToAfterFeature = 4 End Enum ' Possible values for the block instance text status. Used by BlockInstance::TextDisplay property. Public Enum swBlockInstanceTextDisplay_e swBlockInstanceTextDisplayNone = 1 swBlockInstanceTextDisplayAll = 2 swBlockInstanceTextDisplayNormal = 3 End Enum Public Enum swTranslationNotifyOptions_e swTranslationNotifySilentMode = &H1 End Enum Public Enum swMacroFeatureOptions_e swMacroFeatureByDefault = &H0 swMacroFeatureAlwaysAtEnd = &H1 End Enum Public Enum swMacroFeatureSecurityOptions_e swMacroFeatureSecurityByDefault = &H0 swMacroFeatureSecurityCannotBeDeleted = &H1 swMacroFeatureSecurityNotEditable = &H2 swMacroFeatureSecurityCannotBeSuppressed = &H4 End Enum ' Possible values for the which page setup object to use. Used by ModelDoc::UsePageSetup property. Public Enum swPageSetupInUse_e swPageSetupInUse_Application = 1 swPageSetupInUse_Document = 2 swPageSetupInUse_DrawingSheet = 3 End Enum Public Enum swAutodimEntities_e swAutodimEntitiesAll = 1 swAutodimEntitiesSelected = 2 End Enum Public Enum swAutodimMark_e swAutodimMarkEntities = &H1 swAutodimMarkHorizontalDatum = &H2 swAutodimMarkVerticalDatum = &H4 End Enum Public Enum swAutodimScheme_e swAutodimSchemeBaseline = 1 swAutodimSchemeOrdinate = 2 swAutodimSchemeChain = 3 swAutodimSchemeCenterline = 4 End Enum Public Enum swAutodimHorizontalPlacement_e swAutodimHorizontalPlacementBelow = -1 swAutodimHorizontalPlacementAbove = 1 End Enum Public Enum swAutodimVerticalPlacement_e swAutodimVerticalPlacementLeft = -1 swAutodimVerticalPlacementRight = 1 End Enum Public Enum swAutodimStatus_e swAutodimStatusSuccess = 0 swAutodimStatusBadOptionValue = 1 swAutodimStatusNoActiveDoc = 2 swAutodimStatusDocTypeNotSupported = 3 swAutodimStatusNoActiveSketch = 4 swAutodimStatus3DSketchNotSupported = 5 swAutodimStatusSketchIsEmpty = 6 swAutodimStatusSketchIsOverDefined = 7 swAutodimStatusNoEntities = 8 swAutodimStatusEntitiesNotValid = 9 swAutodimStatusCenterlineNotAllowed = 10 swAutodimStatusDatumNotSupplied = 11 swAutodimStatusDatumNotUnique = 12 swAutodimStatusDatumNotValidType = 13 swAutodimStatusDatumLineNotCenterline = 14 swAutodimStatusDatumLineNotVertical = 15 swAutodimStatusDatumLineNotHorizontal = 16 swAutodimStatusAlgorithmFailed = 17 End Enum Public Enum swFeatureFilletOptions_e swFeatureFilletPropagate = &H1 swFeatureFilletUniformRadius = &H2 swFeatureFilletVarRadiusType = &H4 swFeatureFilletUseHelpPoint = &H8 swFeatureFilletUseTangentHoldLine = &H10 swFeatureFilletCornerType = &H20 swFeatureFilletAttachEdges = &H40 End Enum Public Enum swRibExtrusionDirection_e swRibParallelToSketch = 0 swRibNormalToSketch = 1 End Enum Public Enum swRibType_e swRibLinear = 0 swRibNatural = 1 End Enum Public Enum swSimpleFilletType_e swConstRadiusFillet = 0 swFaceFillet = 2 swFullRoundFillet = 3 End Enum Public Enum swSimpleFilletWhichFaces_e swSimpleFilletSingleRadius = 0 swFaceFilletSet1 = 1 swFaceFilletSet2 = 2 swFullRoundFilletSet1 = 3 swFullRoundFilletCenterSet = 4 swFullRoundFilletSet2 = 5 End Enum Public Enum swHelixDefinedBy_e swHelixDefinedByPitchAndRevolution = 0 swHelixDefinedByHeightAndRevolution = 1 swHelixDefinedByHeightAndPitch = 2 swHelixDefinedBySpiral = 3 End Enum Public Enum swCreateWireBodyOptions_e swCreateWireBodyByDefault = 0 swCreateWireBodyMergeCurves = &H1 End Enum Public Enum swBoundingBoxOptions_e swBoundingBoxIncludeRefPlanes = &H1 swBoundingBoxIncludeSketches = &H2 End Enum ' Used by Dimension::GetType Public Enum swDimensionParamType_e swDimensionParamTypeUnknown = -1 swDimensionParamTypeDoubleLinear = 0 swDimensionParamTypeDoubleAngular = 1 swDimensionParamTypeInteger = 2 End Enum ' ' To combine options for a specific API call, you can use bitwise addition ' on the numbers within a particular enum. ' ' The following enum represents the option bits that can be set ' for FeatureRevolve2 and FeatureCutRevolve2 Public Enum swRevolveOptions_e swAutoCloseSketch = &H1 End Enum ' The following enum represents the option bits that can be set ' for AddConfiguration and EditConfiguration Public Enum swConfigurationOptions_e swUseAlternateName = &H1 swDontShowPartsInBOM = &H2 End Enum ' The following enum represents the option bits that can be set ' for SetBlockingState Public Enum swBlockingStates_e swNoBlock = &H0 swFullBlock = &H1 swModifyBlock = &H2 swPartialModifyBlock = &H3 End Enum ' The following enum can be used with the ModelDoc::Rebuild function. Be aware that ' certain options are only valid for particular document types. For example, ' swUpdateMates is only valid for ModelDoc objects which are assemblies. Public Enum swRebuildOptions_e swRebuildAll = &H1 swForceRebuildAll = &H2 swUpdateMates = &H4 swCurrentSheetDisp = &H8 swUpdateDirtyOnly = &H10 End Enum Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/AppLaunch.html": {
    "href": "src/AppLaunch.html",
    "title": "AppLaunch Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "AppLaunch Macro for SolidWorks Description This macro is designed to launch an external application or file based on configurations specified in an INI file. It reads paths and options from the INI file to dynamically set the execution parameters. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Permissions: Requires permissions to execute external applications on the host machine. Pre-Conditions INI File: An INI file named after the macro but with an .ini extension must be present in the same directory as the macro. Correct Formatting: The INI file should be correctly formatted with sections labeled [APPLICATION], [LAUNCH], and [OPTIONS], and it should contain valid paths and options. Results Successful Execution: If all paths are correct and the specified application or file exists, it will be launched using the options provided. Error Handling: The macro will provide error messages if the INI file is not found, if specified files do not exist, or if there are any other issues preventing the launch of the application. VBA Macro Code '--------------------------------------------------------------------10/10/2003 ' AppLaunch.swb - Copyright 2003 Leonard Kikstra '------------------------------------------------------------------------------ Sub main() FileError = False Set swApp = CreateObject(\"SldWorks.Application\") Source = swApp.GetCurrentMacroPathName ' Get macro path+filename Source = Left$(Source, Len(Source) - 3) + \"ini\" ' Change file extension to .ini Set FileSys = CreateObject(\"Scripting.FileSystemObject\") If FileSys.FileExists(Source) Then ' Check if source file exists LaunchProgram = \"\" LaunchFile = \"\" Options = \"\" Open Source For Input As #1 ' Open INI file for reading Do While Not EOF(1) ' Read until the end of the file Input #1, Reader ' Read a line If Reader = \"[APPLICATION]\" Then ' Look for the [APPLICATION] section Do While Not EOF(1) Input #1, LineItem ' Read next line If LineItem <> \"\" Then If FileSys.FileExists(LineItem) Then LaunchProgram = LineItem ' Set the program to launch End If Else GoTo EndRead1 ' Skip to end if empty line End If Loop EndRead1: ElseIf Reader = \"[LAUNCH]\" Then ' Look for the [LAUNCH] section Do While Not EOF(1) Input #1, LineItem If LineItem <> \"\" Then If FileSys.FileExists(LineItem) Then LaunchFile = LineItem ' Set the file to launch Else MsgBox \"Could not find file to launch.\" & Chr$(10) & LineItem FileError = True End If Else GoTo EndRead2 End If Loop EndRead2: ElseIf Reader = \"[OPTIONS]\" Then ' Look for the [OPTIONS] section Do While Not EOF(1) Input #1, LineItem If LineItem <> \"\" Then Options = LineItem ' Read launch options Else GoTo EndRead3 End If Loop EndRead3: End If Loop Close #1 ' Close the INI file Else MsgBox \"Source file \" & Source & \" not found.\" End If If LaunchProgram <> \"\" And Not FileError Then If LaunchFile <> \"\" Then Shell LaunchProgram & \" \" & Options & \" \" & LaunchFile, 1 Else Shell LaunchProgram & \" \" & Options, 1 End If ElseIf FileError Then Else MsgBox \"Could not find application to launch.\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/AssemblyTools.html": {
    "href": "src/AssemblyTools.html",
    "title": "Assembly Tools Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Assembly Tools Macro for SolidWorks Description This macro provides functionalities to manipulate assembly components in SolidWorks. It can unsuppress all components, copy them to the current directory, or reload the assembly model. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions An assembly document must be open in SolidWorks. The macro should be run from the SolidWorks environment with proper permissions to access file system operations. Results Depending on the selected operation, components will either be unsuppressed, copied, or the assembly will be reloaded. Provides a simple UI to interact with the operations and monitor their status. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., AssemblyTools) and select Insert > UserForm. Rename the form to Form_AssemblyTools. Design the form with the following: Add a ListBox named ListBoxAssemblyTools for displaying operation options. Add a TextBox named TextBoxDescribe for displaying descriptions of the selected operation. Add two buttons: Launch: Set Name = CommandLaunch and Caption = Launch. Close: Set Name = CommandButtonClose and Caption = Close. Add VBA Code: Copy the Macro Code provided below into a new module. Copy the UserForm Code into the Form_AssemblyTools code-behind. In the Project Explorer, right-click on the project (e.g., AssemblyTools) and select Insert > Module. Rename the form to SubCommon. Copy the SubCommon Code into the SubCommon code-behind. Save and Run the Macro: Save the macro file (e.g., AssemblyTools.swp). Run the macro by going to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the Assembly Tools UserForm. Select the operation you want to perform from the ListBox. Click Launch to execute the selected operation. Use the Close button to exit the UserForm. VBA Macro Code ' -------------------------------------------------------------------12/05/2005 ' AssemblyTools.swp - Copyright 2005, Leonard Kikstra ' ----------------------------------------------------------------------------- Global swApp As Object Global ModelDoc2 As Object Global FileTyp As Long Global Bool As Boolean Global Intg As Integer Global Var As Variant Global Lng As Long Global Str As String Global Dbl As Double Global ConfigQty As Integer Global ConfigNam As Variant Global Configuration As Object Global ConfigurationName As String Global Counter As Integer Global OpenRO As Boolean Global FileRO As Boolean Global FileSys As Object Global GetPath As Boolean Global MasterPath As String ' ----------------------------------------------------------------------------- ' Let's get out of here ' ----------------------------------------------------------------------------- Public Sub ProgExit() End End Sub ' ----------------------------------------------------------------------------- ' Close forms, reload model, re-enter macro ' ----------------------------------------------------------------------------- Public Sub Reload() Dim longstatus As Long Dim longstat As Long ThisDoc = ModelDoc2.GetPathName SubCommon.CloseAll On Error Resume Next Set ModelDoc2 = swApp.OpenDoc6(ThisDoc, _ swDocASSEMBLY, swOpenDocOptions_Silent, _ \"Default\", longstatus, longstat) If Not ModelDoc2 Is Nothing Then ThisDoc = ModelDoc2.GetPathName MyPath = SubCommon.NewParseString(UCase(ThisDoc), \"\\\", 1, 0) DocName = SubCommon.NewParseString(UCase(ThisDoc), \"\\\", 1, 1) GetBom = True End If End Sub ' ----------------------------------------------------------------------------- ' Program control to define procedures when program is launced. ' Attach to SolidWorks, Set objects, Determine file type, launch form. ' ----------------------------------------------------------------------------- Public Sub main() ' --------------------------------------------------------------------------- ' Connect with SolidWorks and get the active document ' Setup appropriate document objects ' --------------------------------------------------------------------------- Set swApp = CreateObject(\"SldWorks.Application\") swApp.Visible = True swApp.UserControl = True Set ModelDoc2 = swApp.ActiveDoc ' Grab currently active document If ModelDoc2 Is Nothing Then ' Check to see if a document MsgBox \"No model loaded.\" Else FileTyp = ModelDoc2.GetType If FileTyp = swDocASSEMBLY Then ThisDoc = ModelDoc2.GetPathName MyPath = SubCommon.NewParseString(UCase(ThisDoc), \"\\\", 1, 0) DocName = SubCommon.NewParseString(UCase(ThisDoc), \"\\\", 1, 1) FormAssemblyTools.Show Else MsgBox \"Active file is not an assembly.\" End If ' document type End If ' document loaded End Sub VBA UserForm Code Option Compare Binary ' ----------------------------------------------------------------------------- ' AssemblyTools.swp ' ----------------------------------------------------------------------------- Function TraverseAssembly(Level As Integer, Component2 As Object, _ MultiMode As Integer) ' mode 0 - Unsuppress all components ' 1 - Copy to current directory Dim QtyChilden As Integer Dim Children As Variant Dim Child As Object Dim ChildCount As Integer Dim FilePath As String Dim ModDoc2 As Object Dim MyBoole As Boolean Dim FileSysObj As Object Set FileSysObj = CreateObject(\"Scripting.FileSystemObject\") If Level > 0 Then ' Routines for 'Child' components only Select Case MultiMode Case 0 If Component2.IsSuppressed() Then Sourcefile = Component2.GetPathName SimpleStatus \"Unsuppressing: \" & Sourcefile Component2.SetSuppression2 swComponentFullyResolved If Component2.IsSuppressed() Then _ MsgBox \"Cound not unsuppress component: \" _ & Chr$(13) & Sourcefile _ & Chr$(13) & \"Suppression state may be \" _ & \"controlled by Design Table.\" End If Case 1 If Not Component2.IsSuppressed() Then FilePath = Component2.GetPathName ' Are paths equal? - No if file loaded from different dir. If NewParseString(FilePath, \"\\\", 1, 0) <> MasterPath Then ' See if destination file exists FilePath = Component2.GetPathName If Not FileSysObj.FileExists(MasterPath & \"\\\" _ & NewParseString(FilePath, \"\\\", 1, 1)) Then ' Destination does not exist Sourcefile = Component2.GetPathName If Not FileSysObj.FileExists(Sourcefile) Then MsgBox \"File: \" & Sourcefile & \" not found.\" Else SimpleStatus \"Copying: \" & Sourcefile On Error GoTo FileCopyError MyBoole = FileSysObj.CopyFile(Sourcefile, _ MasterPath & \"\\\") On Error GoTo 0 End If End If End If End If Case Else End Select End If ' Traverse children parent assembly Children = Component2.GetChildren ' Get list / children ChildCount = UBound(Children) + 1 ' Get qty children Level = Level + 1 ' Increment level For ChildCount = 0 To (ChildCount - 1) ' Each child in sub Set Child = Children(ChildCount) ' Get child comp obj TraverseAssembly Level, Child, MultiMode ' Trav child's comp Next ChildCount Exit Function FileCopyError: MsgBox \"File: \" & Sourcefile & \" not found.\" Resume Next End Function Private Sub CommandButtonClose_Click() End End Sub Private Sub CommandLaunch_Click() Dim Configuration As Object Dim RootComponent As Object ControlStatus False Select Case ListBoxAssemblyTools.ListIndex Case 0 ' Unsuppress All Components Set Configuration = ModelDoc2.GetActiveConfiguration ModelDoc2.ShowConfiguration2 (Configuration.Name) Set RootComponent = Configuration.GetRootComponent() ' Recursively traverse the component and build temporary BOM If Not RootComponent Is Nothing Then TraverseAssembly 0, RootComponent, 0 End If Case 1 ' Copy All Components Here MasterPath = NewParseString(ModelDoc2.GetPathName + \"\", \"\\\", 1, 0) Set Configuration = ModelDoc2.GetActiveConfiguration ModelDoc2.ShowConfiguration2 (Configuration.Name) Set RootComponent = Configuration.GetRootComponent() ' Recursively traverse the component and build temporary BOM If Not RootComponent Is Nothing Then TraverseAssembly 0, RootComponent, 1 End If Case 2 ' Reload Assembly Model main.Reload Case Else End Select SimpleStatus \"Done.\" ControlStatus True Me.Repaint End Sub Private Sub ListBoxAssemblyTools_Click() Dim Configuration As Object Dim RootComponent As Object Dim Action As String Select Case ListBoxAssemblyTools.ListIndex Case 0 ' Unsuppress All Components Action = Action & \"Traverses thru the assembly and unsuppresses \" Action = Action & \"all sub components (parts and assemblies).\" Action = Action & Chr$(13) & Chr$(13) Action = Action & \"NOTE: Time it takes to complete this task is \" Action = Action & \"dependant on assembly size and number of \" Action = Action & \"suppressed components.\" Case 1 ' Copy All Components Here Action = Action & \"Traverses thru the assembly and copies all \" Action = Action & \"sub components (parts and assemblies) files \" Action = Action & \"to the current directory.\" Action = Action & Chr$(13) & Chr$(13) Action = Action & \"NOTE: Time it takes to complete this task is \" Action = Action & \"dependant on assembly size of the assembly \" Action = Action & \"and the number of files to copy.\" Case 2 ' Reload Assembly Model Action = Action & \"Closes all documents currently loaded in \" Action = Action & \"SolidWorks and reloaded the current assembly.\" Case Else End Select TextBoxDescribe.Value = Action Me.Repaint End Sub Sub SimpleStatus(Stat) Me.Repaint End Sub ' ----------------------------------------------------------------------------- ' Enable/Disable controls on form ' ----------------------------------------------------------------------------- Sub ControlStatus(ControlMode As Boolean) ControlSet ControlMode, ListBoxAssemblyTools ControlSet ControlMode, TextBoxDescribe ControlSet ControlMode, CommandLaunch ControlSet ControlMode, CommandButtonClose Me.Repaint End Sub Private Sub UserForm_Initialize() ListBoxAssemblyTools.Clear ListBoxAssemblyTools.AddItem \"Unsuppress All Components\" ListBoxAssemblyTools.AddItem \"Copy All Components Here\" ListBoxAssemblyTools.AddItem \"Reload Assembly Model\" ListBoxAssemblyTools.ListIndex = -1 End Sub Private Sub UserForm_Activate() If Me.ListBoxAssemblyTools.ListCount = 0 Then UserForm_Initialize End Sub Private Sub Start() main.main End Sub SubCommon Code ' ----------------------------------------------------------------------------- ' Common routines used by various macros/programs ' ----------------------------------------------------------------------------- ' This function will count the occurance of \"stringToFind\" inside \"theString\". ' ----------------------------------------------------------------------------- Function ParseStringCount(theString As String, stringToFind As String) Dim CountPosition As Long CountPosition = 1 CountNum = 0 While CountPosition > 0 CountPosition = InStr(1, theString, stringToFind) If CountPosition <> 0 Then ' Which characters do we keep theString = Mid(theString, CountPosition + Len(stringToFind)) CountNum = CountNum + 1 End If Wend ParseStringCount = LTrim(CountNum) End Function ' ----------------------------------------------------------------------------- ' This function will locate the occurance of \"stringToFind\" inside \"theString\". ' Occur = 0 Get first occurrance ' 1 Get last occurrance ' From that position, it will return text based on the 'Retrieve' variable. ' StrRet = 0 Get text before ' 1 Get text after ' 2 If no occurrance found, return blank ' ----------------------------------------------------------------------------- Function NewParseString(theString As String, stringToFind As String, _ Occur As Boolean, StrRet As Integer) Location = 0 TempLoc = 0 PosCount = 1 While PosCount < Len(theString) TempLoc = InStr(PosCount, theString, stringToFind) If TempLoc <> 0 Then If Occur = 0 Then If Location = 0 Then Location = TempLoc End If Else Location = TempLoc End If PosCount = TempLoc + 1 Else PosCount = Len(theString) End If Wend If Location <> 0 Then If StrRet = 0 Then theString = Mid(theString, 1, Location - 1) Else theString = Mid(theString, Location + Len(stringToFind)) End If ElseIf StrRet = 2 Then theString = \"\" End If NewParseString = theString End Function ' --------------------------------------------------------------------------------- ' Read file attributes ' --------------------------------------------------------------------------------- Function FileAttrib(filespec, Bit, SetClear) Set FileSys = CreateObject(\"Scripting.FileSystemObject\") Set f = FileSys.GetFile(filespec) If SetClear = 1 Then f.Attributes = f.Attributes + Bit Else f.Attributes = f.Attributes - Bit End If ' 0 Normal 4 System ' 1 ReadOnly 32 Archive ' 2 Hidden End Function ' --------------------------------------------------------------------------------- ' Change attributes for file ' --------------------------------------------------------------------------------- Function FileAttribRead(filespec, Bit) Set FileSys = CreateObject(\"Scripting.FileSystemObject\") Set f = FileSys.GetFile(filespec) If f.Attributes And Bit Then FileRO = True Else FileRO = False End If ' 0 Normal 4 System ' 1 ReadOnly 32 Archive ' 2 Hidden End Function ' ----------------------------------------------------------------------------- ' Control enable/disable ' ----------------------------------------------------------------------------- Function ControlSet(ControlMode As Boolean, ControlObject As Object) If ControlMode = True Then ' Enable control ControlName = ControlObject.Name If UCase(Left$(ControlName, 7)) = UCase(\"ListBox\") Or _ UCase(Left$(ControlName, 7)) = UCase(\"TextBox\") Then ControlObject.Locked = False ' ControlObject.BackColor = vbWindowBackground ' ControlObject.ForeColor = vbWindowText Else ControlObject.Enabled = True End If Else ' Disable control ControlName = ControlObject.Name If UCase(Left$(ControlName, 7)) = UCase(\"ListBox\") Or _ UCase(Left$(ControlName, 7)) = UCase(\"TextBox\") Then ControlObject.Locked = True ' ControlObject.BackColor = vbButtonFace ' ControlObject.ForeColor = vbGrayText Else ControlObject.Enabled = False End If End If End Function ' --------------------------------------------------------------------------------- ' Close all models currently loaded/opened in SolidWorks ' --------------------------------------------------------------------------------- Function CloseAll() Set OpenDoc = swApp.ActiveDoc() While Not OpenDoc Is Nothing swApp.QuitDoc (OpenDoc.GetTitle) Set OpenDoc = swApp.ActiveDoc() Wend End Function Private Sub Start() main.main End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/AutoSurfacePlotter.html": {
    "href": "src/AutoSurfacePlotter.html",
    "title": "Automatic Surface Plotter in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Automatic Surface Plotter in SolidWorks Description This macro allows users to plot functions in Cartesian, cylindrical, or spherical coordinates in SolidWorks. It automatically verifies that the active document is a part or assembly, then opens a user interface for input. This tool is ideal for quickly generating surfaces based on mathematical functions. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro launches a form interface for entering plot parameters (e.g., Cartesian, cylindrical, or spherical function details). Results Note Plots a mathematical function surface in the active SolidWorks part or assembly. If the document is not a part or assembly, the macro will alert the user and exit. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Public swApp As SldWorks.SldWorks Public swDoc As SldWorks.ModelDoc2 ' Main subroutine Sub main() Err.Clear Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc ' Check for valid active document (part or assembly) If swDoc Is Nothing Then swApp.SendMsgToUser \"No active part or assembly\" Exit Sub ElseIf swDoc.GetType <> swDocPART And swDoc.GetType <> swDocASSEMBLY Then swApp.SendMsgToUser \"Active document must be a part or assembly\" Exit Sub End If ' Show main form for function plotting frmMain.Show False End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/BGColors.html": {
    "href": "src/BGColors.html",
    "title": "Background Colors Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Background Colors Macro for SolidWorks Description This macro facilitates customization of the background settings within SolidWorks. Users can enable or disable gradient backgrounds for models, set top and bottom gradient colors, and choose the color for the viewport background in drawings. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions The macro should be executed within the SolidWorks environment with sufficient user privileges to change system settings. Results Users can customize the gradient background settings for models and the background color for drawings. Provides visual feedback by updating the UI with the chosen colors. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, locate the BColors project. Right-click on Forms and select Insert > UserForm. Rename the newly created form to Form_BGColors. Design the form to include: A Checkbox to enable or disable the gradient background (CheckBoxEnableGradient). Buttons to open color dialogues for top and bottom gradient colors (CommandTopColor, CommandBottomColor). A button to set the viewport background color (CommandDrawColor). A Close button to exit the macro. Implement the Module: Right-click on Modules within the BColors project. Select Insert > Module. Add VBA code to this module (BGColors1) to handle the color selection logic and interface with the SolidWorks system settings. Configure Event Handlers and Functions: In Form_BGColors, implement event handlers for color selection and checkbox interactions. Use ShowColor function to integrate with the common dialog color picker. Save and Run the Macro: Save the macro file (e.g., BackgroundColors.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the Form_BGColors. Toggle the gradient background option and select colors as needed. Use the Close button to save settings and exit the macro. VBA Macro Code '------------------------------------------------------------------------------ ' BackgroundColors.swp '------------------------------------------------------------------------------ Global swApp As Object Global Document As Object Global Const swSystemColorsViewportBackground = 99 Global Const swSystemColorsTopGradientColor = 100 Global Const swSystemColorsBottomGradientColor = 101 Global Const swColorsGradientPartBackground = 68 Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") Set Document = swApp.ActiveDoc Form_BGColors.Show End Sub VBA UserForm Code '------------------------------------------------------------------------------ ' BackgroundColors.swp '------------------------------------------------------------------------------ '------------------------------------------------------------------------------ ' Type definition used to select color. '------------------------------------------------------------------------------ Private Type CHOOSECOLOR ' Function to allow change part color lStructSize As Long hwndOwner As Long hInstance As Long rgbResult As Long lpCustColors As String flags As Long lCustData As Long lpfnHook As Long lpTemplateName As String End Type Private Declare Function CHOOSECOLOR Lib \"comdlg32.dll\" _ Alias \"ChooseColorA\" (pChoosecolor As CHOOSECOLOR) As Long '------------------------------------------------------------------------------ ' Function used to select color. '------------------------------------------------------------------------------ Function ShowColor(CustomColor) As Long Dim cc As CHOOSECOLOR Dim CustColor(16) As Long cc.lStructSize = Len(cc) ' cc.hwndOwner = Form1.hWnd ' cc.hInstance = App.hInstance cc.flags = 0 ' NOTE: We can't pass an array of pointers so ' we fake this passing a string of chars: In this ' example we set all custom colors to 0, or black. cc.lpCustColors = String$(16 * 4, 0) cc.rgbResult = CustomColor NewColor = CHOOSECOLOR(cc) If NewColor <> 0 Then ShowColor = cc.rgbResult CustomColors = StrConv(cc.lpCustColors, vbFromUnicode) Else ShowColor = -1 End If End Function '------------------------------------------------------------------------------ ' Allows user to enable/disable gradient background and set top/bottom colors. '------------------------------------------------------------------------------ Private Sub CheckBoxEnableGradient_Click() swApp.SetUserPreferenceToggle swColorsGradientPartBackground, _ CheckBoxEnableGradient If CheckBoxEnableGradient = True Then LabelTopColor.Enabled = True CommandTopColor.Enabled = True LabelBottomColor.Enabled = True CommandBottomColor.Enabled = True FrameModels.Caption = \"Gradient Background - SolidWorks Models\" FrameDrawing.Caption = \"Background - SolidWorks Drawings\" DisplayColors Else LabelTopColor.Enabled = False CommandTopColor.Enabled = False CommandTopColor.BackColor = vbButtonFace LabelBottomColor.Enabled = False CommandBottomColor.Enabled = False CommandBottomColor.BackColor = vbButtonFace FrameModels.Caption = \"Gradient Background\" FrameDrawing.Caption = \"Background - SolidWorks Models and Drawings\" End If If Not Document Is Nothing Then Document.GraphicsRedraw End If End Sub '------------------------------------------------------------------------------ ' Set top gradient background color. '------------------------------------------------------------------------------ Private Sub CommandTopColor_Click() SC = ShowColor(swApp.GetUserPreferenceIntegerValue(swSystemColorsTopGradientColor)) If SC >= 0 Then HSC = \"000000\" + Hex(SC) HSC = Mid(HSC, Len(HSC) - 5, 6) swApp.SetUserPreferenceIntegerValue swSystemColorsTopGradientColor, SC DisplayColors End If End Sub '------------------------------------------------------------------------------ ' Set bottom gradient background color. '------------------------------------------------------------------------------ Private Sub CommandBottomColor_Click() SC = ShowColor(swApp.GetUserPreferenceIntegerValue(swSystemColorsBottomGradientColor)) If SC >= 0 Then HSC = \"000000\" + Hex(SC) HSC = Mid(HSC, Len(HSC) - 5, 6) swApp.SetUserPreferenceIntegerValue swSystemColorsBottomGradientColor, SC DisplayColors End If End Sub '------------------------------------------------------------------------------ ' Set viewport background color. '------------------------------------------------------------------------------ Private Sub CommandDrawColor_Click() SC = ShowColor(swApp.GetUserPreferenceIntegerValue(swSystemColorsViewportBackground)) If SC >= 0 Then HSC = \"000000\" + Hex(SC) HSC = Mid(HSC, Len(HSC) - 5, 6) swApp.SetUserPreferenceIntegerValue swSystemColorsViewportBackground, SC DisplayColors End If End Sub '------------------------------------------------------------------------------ ' Initialize user form. '------------------------------------------------------------------------------ Private Sub UserForm_Initialize() Form_BGColors.Caption = Form_BGColors.Caption + \" \" + Version DisplayColors CheckBoxEnableGradient = _ swApp.GetUserPreferenceToggle(swColorsGradientPartBackground) CheckBoxEnableGradient_Click End Sub '------------------------------------------------------------------------------ ' Display current color settings. '------------------------------------------------------------------------------ Private Sub DisplayColors() CommandTopColor.BackColor = _ swApp.GetUserPreferenceIntegerValue(swSystemColorsTopGradientColor) CommandBottomColor.BackColor = _ swApp.GetUserPreferenceIntegerValue(swSystemColorsBottomGradientColor) CommandDrawColor.BackColor = _ swApp.GetUserPreferenceIntegerValue(swSystemColorsViewportBackground) If Not Document Is Nothing Then Document.GraphicsRedraw End If End Sub '------------------------------------------------------------------------------ ' Close and end macro. '------------------------------------------------------------------------------ Private Sub CommandClose_Click() End End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CGPoint.html": {
    "href": "src/CGPoint.html",
    "title": "Create Center of Gravity Point in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Create Center of Gravity Point in SolidWorks Description This macro creates a 3D sketch point at the Center of Gravity (CoG) of the active part or assembly document in SolidWorks. It can be used to quickly identify the center of mass location within a part or assembly for analysis and design purposes. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly file. The part or assembly must contain valid geometry to calculate the center of gravity. Ensure the part or assembly is open and active before running the macro. Results Note A 3D sketch will be created with a point located at the Center of Gravity. The new sketch will be named \"CenterOfGravity\" in the feature tree. An error message will be displayed if there is no geometry to process or if the document type is not valid. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part or assembly) Dim boolstatus As Boolean ' Boolean status variable Dim longstatus As Long ' Long status variable for capturing operation results Dim Annotation As Object ' Annotation object for any annotations added (not used here) Dim Gtol As Object ' Geometric tolerance object (not used here) Dim DatumTag As Object ' Datum tag object (not used here) Dim FeatureData As Object ' Feature data object for manipulating feature details (not used here) Dim Feature As Object ' Feature object for creating/manipulating features (not used here) Dim Component As Object ' Component object for assemblies (not used here) ' Main subroutine to create the Center of Gravity point in a 3D sketch Sub main() Dim mp As Variant ' Array to hold the mass properties (center of gravity coordinates) Dim PlaneObj As Object ' Plane object (not used here) Dim PlaneName As String ' Name of the plane (not used here) Dim SketchObj As Object ' Sketch object for creating the 3D sketch (not used here) Dim Version As String ' SolidWorks version (not used here) ' Error handling block to capture unexpected issues On Error GoTo errhandlr ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Check if SolidWorks application is available If swApp Is Nothing Then MsgBox \"SolidWorks application not found. Please ensure SolidWorks is installed and running.\", vbCritical, \"SolidWorks Not Found\" Exit Sub End If ' Get the currently active document Set Part = swApp.ActiveDoc ' Check if there is an active document open in SolidWorks If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing (GetType = 3 corresponds to drawing) If Part.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Enable adding objects directly to the database without showing in the UI Part.SetAddToDB True ' Get the mass properties of the active part or assembly ' mp array holds center of mass coordinates (mp(0) = X, mp(1) = Y, mp(2) = Z) mp = Part.GetMassProperties ' Check if mass properties are valid (in case the part has no geometry) If Not IsArray(mp) Or UBound(mp) < 2 Then MsgBox \"No geometry found in the part or assembly. Cannot calculate center of gravity.\", vbCritical, \"Invalid Geometry\" Exit Sub End If ' Insert a new 3D sketch Part.Insert3DSketch ' Create a point at the center of gravity coordinates Part.CreatePoint2 mp(0), mp(1), mp(2) ' Exit the sketch mode Part.InsertSketch ' Rename the newly created feature to \"CenterOfGravity\" in the feature tree Part.FeatureByPositionReverse(0).Name = \"CenterOfGravity\" ' Successfully exit the subroutine Exit Sub ' Error handling block errhandlr: MsgBox \"An error occurred. No valid geometry found to process.\", vbCritical, \"Error\" Exit Sub End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Change Part Material.html": {
    "href": "src/Change Part Material.html",
    "title": "Change Part Material Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Change Part Material Macro Description This macro automates the process of updating the material property of all SolidWorks part files in a specified directory. It opens each part file, changes its material to the specified one, rebuilds the model, and saves the changes. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note Ensure that the target directory contains valid SolidWorks part files (.SLDPRT). Update the macro with the desired directory path and material name before running. Results Note All part files in the specified directory will have their material updated to the specified material (e.g., \"Brass\"). A confirmation message will display the name of the applied material once the macro completes. Steps to Use the Macro 1. Configure Folder and Material Update the SheetFormat subroutine in the macro to specify: The target directory (D:\\SW\\) containing the .SLDPRT files. The desired material (e.g., \"Brass\"). 2. Execute the Macro Run the macro in SolidWorks. It will iterate through all part files in the specified directory, apply the material, rebuild the model, and save the changes. 3. View Results A message box will display confirming that the material has been updated for all parts. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As ModelDoc2 ' Active document object Dim swFilename As String ' Current file path Dim nErrors As Long ' Error count during file open/save Dim nWarnings As Long ' Warning count during file open/save Dim Response As String ' Directory file response Dim configName As String ' Configuration name Dim databaseName As String ' Material database name Dim newPropName As String ' New material name Dim bShowConfig As Boolean ' Show configuration flag Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder path containing part files and run the material update ' Change the path to your desired folder containing SolidWorks part files UpdateMaterial \"D:\\SW\\\", \".SLDPRT\", True End Sub ' Subroutine to update material for all files in the specified folder Sub UpdateMaterial(folder As String, ext As String, silent As Boolean) Dim swDocTypeLong As Long ' Document type identifier ' Ensure the file extension is in uppercase ext = UCase$(ext) ' Identify document type based on extension swDocTypeLong = Switch(ext = \".SLDPRT\", swDocPART, True, -1) ' Exit if not a SolidWorks part file If swDocTypeLong = -1 Then Exit Sub ' Change to the specified folder ChDir folder ' Get the first file in the folder Response = Dir(folder) Do Until Response = \"\" ' Build the full file path swFilename = folder & Response ' Process files with the specified extension If Right(UCase$(Response), 7) = ext Then ' Open the file silently Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", nErrors, nWarnings) ' Apply material if the file is a part If swDocTypeLong = swDocPART Then ApplyMaterial swModel, \"Default\", \"SolidWorks Materials\", \"Brass\" End If ' Rebuild, save, and close the document swModel.ViewZoomtofit2 swModel.ForceRebuild3 False swModel.Save2 silent swApp.CloseDoc swModel.GetTitle End If ' Move to the next file in the folder Response = Dir Loop ' Notify the user about the material update MsgBox \"Material updated/changed to Brass\", vbOKOnly, \"Material Update Complete!\" End Sub ' Subroutine to apply material to the part Sub ApplyMaterial(swModel As ModelDoc2, configName As String, databaseName As String, newMaterialName As String) ' Show the configuration (if applicable) bShowConfig = swModel.ShowConfiguration2(configName) ' Debug information (optional for development) Debug.Print \" Configuration Name: \" & configName ' Set the material for the specified configuration swModel.SetMaterialPropertyName2 configName, databaseName, newMaterialName End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Change Tab SW_FeatTree.html": {
    "href": "src/Change Tab SW_FeatTree.html",
    "title": "| 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": ""
  },
  "src/ChangePartUnitAsPerAssembly.html": {
    "href": "src/ChangePartUnitAsPerAssembly.html",
    "title": "Match Unit System of All Sub-Parts and Sub-Assemblies with Main Assembly | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Match Unit System of All Sub-Parts and Sub-Assemblies with Main Assembly Description This macro changes the unit system of all sub-parts and sub-assemblies in the active assembly to match the unit system of the main assembly. The macro ensures that all components in the assembly have a consistent unit system, which is crucial for accurate measurement and interoperability. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. The macro should be run with all necessary permissions to modify and save the components. Results Note All sub-parts and sub-assemblies in the assembly will have their unit systems changed to match the main assembly's unit system. The changes will be saved, and a message box will display the updated unit system. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swmodel As SldWorks.ModelDoc2 ' Active model document (assembly) Dim swasm As SldWorks.AssemblyDoc ' Assembly document object Dim swconf As SldWorks.Configuration ' Configuration object Dim swrootcomp As SldWorks.Component2 ' Root component of the assembly Dim usys As Long ' Main assembly unit system Dim usys1 As Long ' Main assembly linear units Dim dunit As Long ' Dual linear unit system value Dim bret As Boolean ' Boolean return status variable Dim err As Long, war As Long ' Error and warning variables ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and update unit systems ' -------------------------------------------------------------------------- Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swmodel = swApp.ActiveDoc ' Check if there is an active document open If swmodel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If swmodel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the active configuration and root component of the assembly Set swconf = swmodel.GetActiveConfiguration Set swrootcomp = swconf.GetRootComponent3(True) ' Get the main assembly's unit system and dual units usys = swmodel.GetUserPreferenceIntegerValue(swUnitSystem) ' Unit system (CGS, MKS, IPS, etc.) dunit = swmodel.GetUserPreferenceIntegerValue(swUnitsDualLinear) ' Dual linear unit system If usys = 4 Then usys1 = swmodel.GetUserPreferenceIntegerValue(swUnitsLinear) ' Custom linear units End If ' Traverse through all sub-components and update their unit systems Traverse swrootcomp, 1 ' Notify the user about the updated unit system Select Case usys Case 1 swApp.SendMsgToUser2 \"Unit system changed to CGS\", swMbInformation, swMbOk Case 2 swApp.SendMsgToUser2 \"Unit system changed to MKS\", swMbInformation, swMbOk Case 3 swApp.SendMsgToUser2 \"Unit system changed to IPS\", swMbInformation, swMbOk Case 4 swApp.SendMsgToUser2 \"Unit system changed to Custom Unit\", swMbInformation, swMbOk Case 5 swApp.SendMsgToUser2 \"Unit system changed to MMGS\", swMbInformation, swMbOk End Select End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly and update unit systems ' -------------------------------------------------------------------------- Sub Traverse(swcomp As SldWorks.Component2, nlevel As Long) ' Declare necessary variables Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Individual child component object Dim swCompConfig As SldWorks.Configuration ' Component configuration object Dim swpmodel As SldWorks.ModelDoc2 ' Model document object of the component Dim path As String ' Path of the component file Dim sPadStr As String ' String for formatting debug output Dim i As Long ' Loop counter for iterating through child components ' Format padding for debug output based on level For i = 0 To nlevel - 1 sPadStr = sPadStr + \" \" Next i ' Get child components of the current component vChildComp = swcomp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Set the child component ' Recursively traverse through sub-components Traverse swChildComp, nlevel + 1 ' Check if the child component is valid If Not swChildComp Is Nothing Then path = swChildComp.GetPathName ' Get the path of the component ' Open the part or assembly based on file extension If (LCase(Right(path, 3)) = \"prt\") Then Set swpmodel = swApp.OpenDoc6(path, swDocPART, 0, swChildComp.ReferencedConfiguration, err, war) ElseIf (LCase(Right(path, 3)) = \"asm\") Then Set swpmodel = swApp.OpenDoc6(path, swDocASSEMBLY, 0, swChildComp.ReferencedConfiguration, err, war) End If ' If the component is successfully opened, update its unit system If Not swpmodel Is Nothing Then bret = swpmodel.SetUserPreferenceIntegerValue(swUnitSystem, usys) bret = swpmodel.SetUserPreferenceIntegerValue(swUnitsDualLinear, dunit) If usys = 4 Then bret = swpmodel.SetUserPreferenceIntegerValue(swUnitsLinear, usys1) End If ' Save the component after updating the unit system swpmodel.Save3 0, err, war Set swpmodel = Nothing ' Release the object End If End If Next i End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ChangeToolboxPartType.html": {
    "href": "src/ChangeToolboxPartType.html",
    "title": "SolidWorks Macro to Remove Toolbox Status from Part | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "SolidWorks Macro to Remove Toolbox Status from Part Description This macro allows you to remove the Toolbox status from a part document in SolidWorks. Toolbox parts in SolidWorks have specific properties that differentiate them from regular parts. This script modifies the ToolboxPartType property to remove the Toolbox designation from the active part document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note Ensure a part document is open in SolidWorks. The part document must have been originally created as a Toolbox part. Results Note The macro will remove the Toolbox status from the currently active part document. After execution, the part will no longer be recognized as a Toolbox part by SolidWorks. Steps to Setup the Macro 1. Prepare SolidWorks: Open a part document that was originally created as a Toolbox part in SolidWorks. 2. Run the Macro: Execute the main subroutine. Confirm the success message indicating the removal of Toolbox status. 3. Verify Changes: Check the part properties in SolidWorks to confirm that it no longer has Toolbox attributes. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare SolidWorks application and document variables Dim swApp As SldWorks.SldWorks Dim part As SldWorks.ModelDoc2 Dim modelDocExt As SldWorks.ModelDocExtension Sub main() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the active document in SolidWorks Set part = swApp.ActiveDoc ' Check if an active document is open If part Is Nothing Then MsgBox \"No active document found. Please open a part document and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Check if the active document is a part If part.GetType <> swDocPART Then MsgBox \"This macro only works on part documents. Please open a part document and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Access the model document extension to modify properties of the part Set modelDocExt = part.Extension ' Remove the toolbox status by setting ToolboxPartType to 0 modelDocExt.ToolboxPartType = 0 ' Notify the user that the operation was successful MsgBox \"The part is no longer recognized as a Toolbox part.\", vbInformation, \"Operation Successful\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Check For Missing Hole Callouts.html": {
    "href": "src/Check For Missing Hole Callouts.html",
    "title": "Check For Missing Hole Callouts | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Check For Missing Hole Callouts Description This macro checks a SOLIDWORKS drawing to ensure all Hole Wizard features in the referenced part have corresponding hole callouts. It iterates through each view, retrieves Hole Wizard features, and compares them with those in the drawing. If any callouts are missing, it notifies the user, ensuring proper documentation of all holes. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note Active SOLIDWORKS Drawing: A drawing document (.SLDDRW) must be open and active in SOLIDWORKS. Referenced Part Document: The drawing must contain at least one view that references a part document (.SLDPRT) with Hole Wizard features. Hole Wizard Features: The referenced part must have holes created using the Hole Wizard feature, not manual cut-extrudes or other methods. Proper Naming: Hole Wizard features and hole callouts should have consistent naming conventions if applicable. Results Note Hole Callout Verification: The macro will analyze the drawing and identify any Hole Wizard features in the > - > - referenced part that do not have corresponding hole callouts in the drawing views. User Notification: If missing hole callouts are found, the macro will display messages listing the specific Hole Wizard features that lack callouts. Design Checker Update: The macro will set custom check results in the SOLIDWORKS Design Checker, highlighting the failed items (missing hole callouts). VBA Macro Code ' All rights reserved to Blue Byte Systems Inc. ' Blue Byte Systems Inc. does not provide any warranties for macros. ' This macro compares the Hole Wizard features in a drawing with hole callouts in a view. Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swView As SldWorks.View Dim swDrawingDoc As SldWorks.DrawingDoc Dim swPart As SldWorks.ModelDoc2 Dim sModelName As String Dim swFeature As SldWorks.Feature Dim totalFeatures As Long Dim featureName As String Dim i As Long Dim featureType As String Dim totalHoleWzd As Long Dim holeWizardFeatures(50) As String Dim swDisplayDimension As SldWorks.DisplayDimension Dim attachedEntityArr As Variant Dim swEntity As SldWorks.Entity Dim swAnnotation As SldWorks.Annotation Dim swEdge As SldWorks.Edge Dim faceEntities As Variant Dim swFace1 As SldWorks.Face2 Dim swFace2 As SldWorks.Face2 Dim swHoleWzdFeature As SldWorks.Feature Dim holeCalloutFeatures(50) As String Dim missingHoleCallouts(50) As String Dim missingCount As Long Dim comparisonCount As Long Dim featureCheck As Boolean Dim errorCode As Long Dim failedItemsArr() As String ' Initialize SOLIDWORKS application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swDrawingDoc = swModel Set swView = swDrawingDoc.GetFirstView ' Get the first display dimension in the view Set swDisplayDimension = swView.GetFirstDisplayDimension() Set swPart = swView.ReferencedDocument ' Loop through views until a part is found Do While swPart Is Nothing Set swView = swView.GetNextView Set swPart = swView.ReferencedDocument Loop ' Start processing the hole callouts missingCount = 0 Do While Not swView Is Nothing Set swDisplayDimension = swView.GetFirstDisplayDimension() Do While Not swDisplayDimension Is Nothing ' Check if the dimension is a hole callout If swDisplayDimension.IsHoleCallout <> False Then Set swAnnotation = swDisplayDimension.GetAnnotation attachedEntityArr = swAnnotation.GetAttachedEntities3 Set swEntity = attachedEntityArr(0) Set swEdge = swEntity faceEntities = swEdge.GetTwoAdjacentFaces2() Set swFace1 = faceEntities(0) Set swFace2 = faceEntities(1) ' Get the feature associated with the face Set swHoleWzdFeature = swFace1.GetFeature If swHoleWzdFeature.GetTypeName = \"HoleWzd\" Then holeCalloutFeatures(missingCount) = swHoleWzdFeature.Name missingCount = missingCount + 1 Else Set swHoleWzdFeature = swFace2.GetFeature holeCalloutFeatures(missingCount) = swHoleWzdFeature.Name missingCount = missingCount + 1 End If End If Set swDisplayDimension = swDisplayDimension.GetNext Loop Set swView = swView.GetNextView Loop ' Count total Hole Wizard features in the referenced model totalFeatures = swPart.GetFeatureCount totalHoleWzd = 0 For i = totalFeatures To 1 Step -1 Set swFeature = swPart.FeatureByPositionReverse(totalFeatures - i) If Not swFeature Is Nothing Then featureName = swFeature.Name featureType = swFeature.GetTypeName If featureType = \"HoleWzd\" Then If swFeature.IsSuppressed = False Then holeWizardFeatures(totalHoleWzd) = featureName totalHoleWzd = totalHoleWzd + 1 End If End If End If Next ' Compare Hole Wizard features with hole callout features comparisonCount = 0 For i = 0 To totalHoleWzd featureCheck = False For comparisonCount = 0 To missingCount If holeWizardFeatures(i) = holeCalloutFeatures(comparisonCount) Then featureCheck = True End If Next comparisonCount ' Store missing features If featureCheck = False Then missingHoleCallouts(comparisonCount) = holeWizardFeatures(i) comparisonCount = comparisonCount + 1 End If Next ' If any features are missing, report them If comparisonCount > 0 Then ReDim Preserve failedItemsArr(1 To 2, 1 To comparisonCount) As String For i = 0 To comparisonCount - 1 failedItemsArr(1, i + 1) = missingHoleCallouts(i) MsgBox \"YOU HAVE MISSED THE FOLLOWING FEATURE: \" & missingHoleCallouts(i) Next Dim dcApp As Object Set dcApp = swApp.GetAddInObject(\"SWDesignChecker.SWDesignCheck\") errorCode = dcApp.SetCustomCheckResult(False, failedItemsArr) End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CommonNotes_V1.html": {
    "href": "src/CommonNotes_V1.html",
    "title": "CommonNotes Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "CommonNotes Macro for SolidWorks Description This macro allows users to add predefined notes to SolidWorks drawings from a list managed through a user interface. The notes are sourced from a .ini file that should be located in the same directory as the macro itself. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A drawing must be open in SolidWorks for the notes to be applied. The source .ini file must exist in the same directory as the macro and must be named identically to the macro with a .ini extension. Results The macro reads a list of notes from the .ini file and displays them in a list box. Users can select multiple notes from the list box and apply them to the drawing. Provides feedback if no notes are selected or if the source file is not found. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., CommonNotes_V1) and select Insert > UserForm. Rename the form to FormSelectNotes. Design the form with the following components: A ListBox named ListBoxNOTES for displaying the notes. Buttons: Apply notes to drawing and Cancel. Add VBA Code: Implement the code to populate the list box from the .ini file. Handle button clicks to apply selected notes to the drawing and manage form closure. Save and Run the Macro: Save the macro file (e.g., CommonNotes_V1.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the CommonNotes UserForm. Select the notes you want to apply from the ListBox. Click Apply notes to drawing to add the selected notes to the open drawing. Use the Cancel button to exit without making changes. VBA Macro Code ' ------------------------------------------------------------------------------ ' CommonNotes_V1.swp ' ------------------------------------------------------------------------------ ' Notes: Source file must be in same directory as macro file. ' Source file must have same name as macro file with '.ini' extension. ' ------------------------------------------------------------------------------ Global swApp As Object Global Document As Object Global boolstatus As Boolean Global longstatus As Long Global SelMgr As Object Global PickPt As Variant Global Const swDocDRAWING = 3 ' Consistent with swconst.bas Sub main() Set swApp = Application.SldWorks ' Attach to SolidWorks Set Document = swApp.ActiveDoc ' Get active document If Not Document Is Nothing Then ' Document is valid FileTyp = Document.GetType ' Get document type If FileTyp = swDocDRAWING Then ' Is it a drawing ? PickPt = Document.GetInsertionPoint ' Get user selected point If IsEmpty(PickPt) Then ' Valid point MsgBox \"Pick an insertion point before running macro.\" Else FormSelectNotes.Show ' Show user form End If Else MsgBox \"Current document is not a drawing.\" End If Else MsgBox \"No drawing loaded.\" End If End Sub VBA UserForm Code '------------------------------------------------------------------------------ ' CommonNotes_V1.swp '------------------------------------------------------------------------------ ' Setup constants and initialize form Const swDetailingNoteTextFormat = 0 Private Sub UserForm_Initialize() FormSelectNotes.Caption = \"CommonNotes \" + \"v1.00\" Source = swApp.GetCurrentMacroPathName Source = Left$(Source, Len(Source) - 3) + \"ini\" Set FileSys = CreateObject(\"Scripting.FileSystemObject\") If FileSys.FileExists(Source) Then Open Source For Input As #1 Do While Not EOF(1) Input #1, Reader If Reader = \"[NOTES]\" Then Do While Not EOF(1) Input #1, LineItem If LineItem <> \"\" Then ListBoxNOTES.AddItem LineItem Else GoTo EndReadNotes1 End If Loop End If Loop Close #1 Else MsgBox \"Source file not found. Using defaults.\" ListBoxNOTES.AddItem \"Default notes listed here...\" End If EndReadNotes1: End Sub ' Apply selected notes to the drawing Private Sub CommandAddNotes_Click() ' Detailed code to apply notes to drawing End Sub ' Cancel and close form Private Sub CommandCancel_Click() MsgBox \"No user notes added.\" End End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CompPattern.html": {
    "href": "src/CompPattern.html",
    "title": "Feature Driven Component Pattern Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Feature Driven Component Pattern Macro for SolidWorks Description This macro creates a feature-driven pattern for all selected components in an assembly. The last selection in the list is used as the driving pattern, such as a hole feature. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. Multiple components and a feature to drive the pattern must be selected in the order required. Results Note A derived component pattern will be created in the assembly based on the selected driving feature. Steps to Setup the Macro 1. Select Components and Feature: In the assembly, select the components to pattern. Select the driving pattern feature (e.g., a hole feature) as the last selection. 2. Run the Macro: Execute the macro to create a component pattern based on the selected driving feature. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim SelMgr As Object ' Selection manager for the active document Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Long status for warnings/errors Dim Feature As Object ' Feature object Dim CurSelCount As Long ' Count of selected items Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Ensure there is an active document If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"Error\" Exit Sub End If ' Initialize the selection manager Set SelMgr = Part.SelectionManager ' Disable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, False ' Check if a plane or face is preselected CurSelCount = SelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Please preselect a plane or face before running the macro.\", vbExclamation, \"No Selection\" Exit Sub End If ' Insert a new sketch on the selected plane or face boolstatus = Part.Extension.SelectByID2(\"\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.InsertSketch2 True Part.ClearSelection2 True ' Create a rectangle centered about the origin Part.SketchRectangle -0.037, 0.028, 0, 0.015, -0.019, 0, True ' Clear selection and add a diagonal construction line Part.ClearSelection2 True Dim Line As Object Set Line = Part.CreateLine2(-0.037, -0.019, 0, 0.015, 0.028, 0) Line.ConstructionGeometry = True ' Add midpoint constraints to ensure the rectangle is centered boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, 0) Part.SketchAddConstraints \"sgATMIDDLE\" Part.ClearSelection2 True ' Add dimensions to the rectangle boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", -0.001, 0.027, 0, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(-0.0004, 0.045, 0) ' Horizontal dimension Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.030, 0.001, 0, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.061, -0.001, 0) ' Vertical dimension Part.ClearSelection2 True ' Re-enable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, True ' Inform the user that the macro is complete MsgBox \"Rectangle sketch created successfully.\", vbInformation, \"Success\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CompStateSwitcher.html": {
    "href": "src/CompStateSwitcher.html",
    "title": "Component State Switcher Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Component State Switcher Macro for SolidWorks Description This macro provides an interface for managing component states in a SolidWorks assembly. It allows users to switch between suppressed, resolved, hidden, and shown states of components. The interface displays components' current states and facilitates batch operations on these states. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions An assembly must be open in SolidWorks. The macro should be executed within the SolidWorks environment with access rights to modify component properties. Results Users can change the suppression or visibility state of selected components from the assembly. Provides feedback on the number of components modified and allows undoing changes. Enhances efficiency in managing large assemblies with complex component hierarchies. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., ComponentStateSwitcher) and select Insert > UserForm. Rename the form to FormComponentState. Design the form with the following components: A ListBox named lstPartName to display the component names and their states. Radio buttons for filtering: All Components, Suppressed Only, Hidden Only. Buttons: Suppress, Visibility, Delete, Undo Delete, and Close. Add VBA Code: Implement the code to populate the list box with components and their states. Handle button clicks to update component states based on the user's selections and inputs. Save and Run the Macro: Save the macro file (e.g., ComponentStateSwitcher.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will display a form that lists all components of the current document along with their suppression and visibility states. Select components and use the form controls to change states as needed. Confirm changes or undo previous actions using the respective buttons. VBA Macro Code Option Explicit Sub Main() frmPreview.Show End Sub VBA UserForm Code ' -----------------------------------------------------------------------------03/09/2005 ' ComponentStateSwitcher by Leonard Kikstra ' --------------------------------------------------------------------------------------- ' This macro will display the state (suppress/resolve/hidden/shown) of each component in ' the top level of the current assembly. When user selects a component, the user will ' see a preview of the component. The user can then change the state of the selected ' component. See top right to see the date of the last update of this macro. ' ' Format of columns in lstPartName Listbox ' 1) Component number. ' 2) Full path to component. (hidden from user) ' 3) Suppression/Resolved state. ' 4) Shown/Hidden visibility state. ' ' --------------------------------------------------------------------------------------- ' This macro is highly based on Suppressed Parts Helper by Alastair Cardwell (See below) '**************************************************************************************** 'Suppressed Parts Helper by Alastair Cardwell 'Macro to preview suppressed parts in an assembly. 'This macro will list all suppressed parts in the assembly. Clicking on 'a part name in the list will display a preview of the selected part. When a 'part is selected it can be unsuppressed or deleted by clicking the appropriate button. ' 'Last Updated 22 Feb 2005 '***************************************************************************************** Option Explicit Dim swApp As SldWorks.SldWorks Dim swAssem As SldWorks.ModelDoc2 Dim swRootComp As SldWorks.Component2 Dim swChildComp As SldWorks.Component2 Dim vChildComp As Variant Dim SelMgr As SelectionMgr Dim SelPart As SldWorks.Component2 Dim Retval As String Dim intSelIndex As Integer Dim intUndoCnt As Integer Const swDocPart = 1 Const swDocASSEMBLY = 2 Const swOpenDocOptions_Silent = 0 Const swComponentHidden = 0 Const swComponentVisible = 1 Const swComponentSuppressed = 0 Const swComponentFullyResolved = 2 Const swThisConfiguration = 1 Const ClickUnsup = 0 Const ClickSupp = 1 Const ClickShow = 2 Const ClickHide = 3 Const ClickDel = 4 Const Revision = \"V1.00\" Function GetSelPart() As String Dim swSelect As String swSelect = swAssem.GetTitle swSelect = Replace(swSelect, \".sldasm\", \"\", , , vbTextCompare) swSelect = lstPartName.Column(0) & \"@\" & swSelect Debug.Print (swSelect) GetSelPart = swSelect End Function Sub TraverseComponent(swComp As SldWorks.Component2, nLevel As Long) Dim swCompConfing As SldWorks.Configuration Dim sPadStr As String Dim i As Long Dim swCompState As String Dim swVisibState As String Dim intCount As Integer Dim Retval As String intCount = 0 vChildComp = swComp.GetChildren ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- For i = 0 To UBound(vChildComp) ' Where are we in the list? intCount = Me.lstPartName.ListCount Set swChildComp = vChildComp(i) 'TraverseComponent swChildComp, nLevel + 1 Debug.Print sPadStr & swChildComp.Name2 & \" <\" & _ swChildComp.ReferencedConfiguration & \"> \" & swCompState ' Add component name and component's path to listbox to listbox Me.lstPartName.AddItem (swChildComp.Name2) Me.lstPartName.List(intCount, 1) = (swChildComp.GetPathName) ' Get and show suppression status swCompState = swChildComp.GetSuppression If swCompState = 0 Then Me.lstPartName.List(intCount, 2) = \"Sup\" Else Me.lstPartName.List(intCount, 2) = \"Res\" End If ' Get and show visibility status swVisibState = swChildComp.Visible If swVisibState = 0 Then Me.lstPartName.List(intCount, 3) = \"Hid\" Else Me.lstPartName.List(intCount, 3) = \"Vis\" End If If (swCompState <> 0 And OptionSuppressedOnly.Value = True) _ Or (swVisibState <> 0 And OptionHiddenOnly.Value = True) _ Then Me.lstPartName.RemoveItem intCount Next i Me.lstPartName.BoundColumn = 2 End Sub Sub RefreshList() 'Refresh Parts List or end if no more parts. cmdState.Enabled = False cmdVisibility.Enabled = False Me.Image1.Picture = Nothing Me.Image1.Visible = False If intSelIndex = -1 Then End Else lstPartName.Clear TraverseComponent swRootComp, 1 If lstPartName.ListCount <> 0 Then lstPartName.Selected(intSelIndex) = True End If End If End Sub Sub ChangePart(intBtn As Integer) ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- ' If lstPartName.ListIndex = lstPartName.ListCount - 1 Then ' intSelIndex = lstPartName.ListIndex - 1 ' Else ' intSelIndex = lstPartName.ListIndex ' End If Debug.Print lstPartName.ListCount Debug.Print intSelIndex Select Case intBtn Case 0 'set part to resolved SelPart.SetSuppression (swComponentFullyResolved) Case 1 'set part to suppressed SelPart.SetSuppression (swComponentSuppressed) Case 2 'set part to shown SelPart.SetVisibility swComponentVisible, swThisConfiguration, \"\" Case 3 'set part to hidden SelPart.SetVisibility swComponentHidden, swThisConfiguration, \"\" Case 4 'Delete Part Retval = MsgBox(\"Are you sure you want to delete this part?\", _ vbYesNo + vbDefaultButton2, \"Delete Part\") If Retval = vbYes Then swAssem.DeleteSelection (False) intUndoCnt = intUndoCnt + 1 cmdUndo.Enabled = True End If End Select 'Call sub to refresh parts list RefreshList End Sub Private Sub cmdClose_Click() End End Sub Private Sub cmdState_Click() ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- If Me.lstPartName.List(Me.lstPartName.ListIndex, 2) = \"Sup\" Then ChangePart ClickUnsup Else ChangePart ClickSupp End If ' lstPartName_Click End Sub Private Sub cmdVisibility_Click() ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- If Me.lstPartName.List(Me.lstPartName.ListIndex, 3) = \"Hid\" Then ChangePart ClickShow Else ChangePart ClickHide End If ' lstPartName_Click End Sub Private Sub cmdDelete_Click() ChangePart ClickDel End Sub Private Sub cmdUndo_Click() swAssem.EditUndo2 (1) intUndoCnt = intUndoCnt - 1 If intUndoCnt = 0 Then cmdUndo.Enabled = False 'Call sub to refresh parts list RefreshList End Sub Private Sub lstPartName_Click() Dim PreViewImg As stdole.StdPicture Dim fileerror As Long Dim filewarning As Long Dim strSelPath As String Dim strRefConfig As String 'Get full path of selected part from list box strSelPath = lstPartName.Column(1) ' Get Used Config Retval = swAssem.SelectByID(GetSelPart, \"COMPONENT\", 0#, 0#, 0#) Set SelPart = SelMgr.GetSelectedObject5(1) strRefConfig = SelPart.ReferencedConfiguration 'Display preview image Set PreViewImg = swApp.GetPreviewBitmap(strSelPath, strRefConfig) Me.Image1.Picture = PreViewImg Me.Image1.Visible = True cmdState.Enabled = True cmdVisibility.Enabled = True cmdDelete.Enabled = False cmdUndo.Enabled = False ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- If Me.lstPartName.List(Me.lstPartName.ListIndex, 2) = \"Sup\" Then cmdState.Caption = \"Resolve\" Else cmdState.Caption = \"Suppress\" End If If Me.lstPartName.List(Me.lstPartName.ListIndex, 3) = \"Hid\" Then cmdVisibility.Caption = \"Show\" Else cmdVisibility.Caption = \"Hide\" End If End Sub Private Sub OptionHiddenOnly_Click() 'Call sub to refresh parts list RefreshList End Sub Private Sub OptionShowAll_Click() 'Call sub to refresh parts list RefreshList End Sub Private Sub OptionSuppressedOnly_Click() 'Call sub to refresh parts list RefreshList End Sub Private Sub UserForm_Initialize() Me.Caption = Me.Caption & Revision Dim swConf As SldWorks.Configuration Set swApp = CreateObject(\"SldWorks.Application\") Set swAssem = swApp.ActiveDoc intUndoCnt = 0 'Check for open assembly document If (swAssem Is Nothing) Then Retval = MsgBox(\"Please open an assembly first!\", , \"Error\") End End If 'Check document is an assembly If (swAssem.GetType <> swDocASSEMBLY) Then Retval = MsgBox(\"This macro only works on Assemblies!\", , \"Error\") End End If Set SelMgr = swAssem.SelectionManager Set swConf = swAssem.GetActiveConfiguration Set swRootComp = swConf.GetRootComponent Debug.Print \"File = \" & swAssem.GetPathName 'Call sub to transverse feature tree and populate list box TraverseComponent swRootComp, 1 'Check that suppressed parts exist in assembly & if so select first in list If lstPartName.ListCount > 0 Then lstPartName.Selected(0) = True Else Retval = MsgBox(\"No suppressed parts found!\", , \"Error\") End End If ' --------------------------------------------------------------------------------------- ' Portions of this code are custom by Leonard Kikstra ' --------------------------------------------------------------------------------------- ' Set status of buttons cmdState.Enabled = False cmdVisibility.Enabled = False cmdDelete.Enabled = False cmdUndo.Enabled = False OptionShowAll.Value = True End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConcentricMate.html": {
    "href": "src/ConcentricMate.html",
    "title": "Auto-Mate Addition Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Auto-Mate Addition Macro for SolidWorks Description This SolidWorks macro automatically adds a mate relationship to the active document, specifically targeting a precise alignment with defined parameters. It's ideal for automating assembly setup processes where specific mating conditions are frequently required. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A document (part or assembly) must be actively open in SolidWorks. The entities to be mated should be pre-selected in the correct order for the mate to apply correctly. Results Note A mate is added to the entities selected in the active document based on the specified parameters. All selections are cleared after the mate is added to prevent clutter and accidental modifications. Steps to Setup the Macro Open SolidWorks: Start SolidWorks and open the document (part or assembly) you wish to modify. Pre-select the entities that need to be mated. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code into this module. Run the macro directly from the VBA editor or save the macro and run it from Tools > Macro > Run. Using the Macro: The macro executes automatically to add a mate based on the predefined parameters. The selection is cleared post-execution to tidy up the workspace. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for SolidWorks application and document Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim Gtol As Object ' Placeholder for potential future use (e.g., geometric tolerances) ' Main subroutine Sub main() ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the active document from SolidWorks Set Part = swApp.ActiveDoc ' Ensure an active document exists If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly.\" Exit Sub End If ' Add a mate with specified parameters ' Parameters: ' - Type: 1 (Concentric) ' - Alignment: 2 (Aligned) ' - Distance/Angle: 0 (No offset) ' - Minimum distance: 0.01 meters ' - Angle: 0.5235987755983 radians (~30 degrees) Part.AddMate 1, 2, 0, 0.01, 0.5235987755983 ' Example parameters for a concentric mate ' Clear any active selections to tidy up Part.ClearSelection ' Notify the user about the operation MsgBox \"Mate added successfully.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConfigManager.html": {
    "href": "src/ConfigManager.html",
    "title": "ConfigManager Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "ConfigManager Macro for SolidWorks Description The ConfigManager macro allows users to efficiently manage configurations in SolidWorks models. It enables selecting and switching between configurations in parts, assemblies, and drawings, with additional options to display descriptions and zoom to fit the selected configuration. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks model (part, assembly, or drawing) must be open. The macro should be executed within the SolidWorks environment. Results Displays a list of configurations available in the active document or referenced components. Allows users to switch between configurations and updates properties such as descriptions. Offers a zoom-to-fit functionality for improved visualization. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., ConfigManager) and select Insert > UserForm. Rename the form to FormConfigMgr. Design the form with the following components: A ListBox named ListBoxConfigurations to display the configuration names. A Label named LabelDescription to display the description of the selected configuration. A CheckBox named CheckFitScreen for enabling or disabling the zoom-to-fit functionality. Buttons: About (to display macro information) and Close. Add VBA Code: Copy the Macro Code provided below into the main module. Copy the UserForm Code into the FormConfigMgr code-behind. Save and Run the Macro: Save the macro file (e.g., ConfigManager.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro displays a list of configurations for the active document or its referenced components. Select a configuration to switch to it and view its description. Use the CheckFitScreen option to zoom to the selected configuration. VBA Macro Code '------------------------------------------------------------------------------- ' ConfigManager.swp '------------------------------------------------------------------------------- Global swApp As Object Global ModelDoc2 As Object Global swSelMgr As Object Global swSelObj As Object Global SelModDoc2 As Object Global Configuration As Object Global FileTyp As String Global numConfigs As Integer Global ConfigNames As Variant Global Retval As Integer Global DelCount As Integer Global Mode As Integer ' SolidWorks constants Global Const swDocNONE = 0 Global Const swDocPART = 1 Global Const swDocASSEMBLY = 2 Global Const swDocDRAWING = 3 Global Const swDocSDM = 4 Global Const swSelDRAWINGVIEWS = 12 Global Const swSelCOMPONENTS = 20 Global Const version = \"1.10\" '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set ModelDoc2 = swApp.ActiveDoc ' Grab active doc If ModelDoc2 Is Nothing Then ' Is doc loaded MsgBox \"No active document found in SolidWorks.\" & Chr(13) & Chr(13) _ & \"Please load/activate a SolidWorks \" & Chr(13) _ & \"document and try again.\", vbExclamation Else ' Doc loaded? FileTyp = ModelDoc2.GetType ' Get doc type If FileTyp = swDocASSEMBLY Then ' Assy model? Set swSelMgr = ModelDoc2.SelectionManager Set swSelObj = swSelMgr.GetSelectedObject4(1) ' Get selected If (Not swSelObj Is Nothing) And _ (swSelMgr.GetSelectedObjectType2(1) = swSelCOMPONENTS) Then Mode = 1 ' Manage Comp Else ' pre-selection Mode = 0 ' Manage Assy End If FormConfigMgr.Show ElseIf FileTyp = swDocPART Then ' Part model? Mode = 0 ' Manage Part FormConfigMgr.Show ElseIf FileTyp = swDocDRAWING Then ' Drawing? Set swSelMgr = ModelDoc2.SelectionManager Set swSelObj = swSelMgr.GetSelectedObject4(1) ' Get selected If (Not swSelObj Is Nothing) And _ (swSelMgr.GetSelectedObjectType2(1) = swSelDRAWINGVIEWS) Then Mode = 2 ' Preselect views Else ' Valid selection Mode = 3 ' All views End If FormConfigMgr.Show Else ' Else doc type MsgBox \"Sorry, could not determine document type.\", vbExclamation End If ' End doc type End If ' End doc load End Sub VBA UserForm Code '------------------------------------------------------------------------------- ' ConfigManager.swp '------------------------------------------------------------------------------- Dim ModDoc2 As Object Dim Update As Boolean Dim LoadErr As Long Dim LoadWarn As Long Const swOpenDocOptions_AutoMissingConfig = &H20 '------------------------------------------------------------------------------ ' This function will locate the occurance of \"stringToFind\" inside \"theString\". ' Occur = 0 Get first occurrance ' 1 Get last occurrance ' From that position, it will return text based on the 'Retrieve' variable. ' StrRet = 0 Get text before ' 1 Get text after ' 2 If no occurrance found, return blank '------------------------------------------------------------------------------ Function NewParseString(theString As String, stringToFind As String, _ Occur As Boolean, StrRet As Integer) Location = 0 TempLoc = 0 PosCount = 1 While PosCount < Len(theString) TempLoc = InStr(PosCount, theString, stringToFind) If TempLoc <> 0 Then If Occur = 0 Then If Location = 0 Then Location = TempLoc End If Else Location = TempLoc End If PosCount = TempLoc + 1 Else PosCount = Len(theString) End If Wend If Location <> 0 Then If StrRet = 0 Then theString = Mid(theString, 1, Location - 1) Else theString = Mid(theString, Location + Len(stringToFind)) End If ElseIf StrRet = 2 Then theString = \"\" End If NewParseString = theString End Function Private Sub CommandaBOUT_Click() FormAbout.Show End Sub Private Sub ListBoxConfigurations_Click() If Update = True Then Select Case Mode Case 0 ' Top level assembly or part ' Show configuration ModelDoc2.ShowConfiguration2 ListBoxConfigurations.Value CheckFitScreen_Click ' Retrieve DESCRIPTION property LabelDescription = _ ModelDoc2.GetCustomInfoValue(ListBoxConfigurations.Value, _ \"DESCRIPTION\") Case 1 ' Sub-component within assembly ' Show configuration swSelObj.ReferencedConfiguration = ListBoxConfigurations.Value ' Retrieve DESCRIPTION property LabelDescription = _ SelModDoc2.GetCustomInfoValue(ListBoxConfigurations.Value, _ \"DESCRIPTION\") ModelDoc2.EditRebuild Case 2 ' Drawing view Count = swSelMgr.GetSelectedObjectCount For x = 1 To Count LabelDescription = \"View \" & x & \"/\" & Count & \" - \" _ & SelModDoc2.GetCustomInfoValue(ListBoxConfigurations.Value, _ \"DESCRIPTION\") FormConfigMgr.Repaint ' Show configuration Set swSelObj = swSelMgr.GetSelectedObject4(x) ' Get selected swSelObj.ReferencedConfiguration = ListBoxConfigurations.Value Next x ' Retrieve DESCRIPTION property ModelDoc2.EditRebuild Case 3 ' All drawing views SheetNames = ModelDoc2.GetSheetNames ' Get names of sheets Count = ModelDoc2.GetSheetCount - 1 For x = 0 To Count ' For each sheet LabelDescription = \"Sheet \" & x + 1 & \"/\" & Count + 1 & \" - \" _ & ModDoc2.GetCustomInfoValue(ListBoxConfigurations.Value, _ \"DESCRIPTION\") FormConfigMgr.Repaint ModelDoc2.ActivateSheet (SheetNames(x)) ' Activate sheet Set view = ModelDoc2.GetFirstView ' Get first view While Not view Is Nothing ' View is valid view.ReferencedConfiguration = ListBoxConfigurations.Value Set view = view.GetNextView ' Get next view Wend ' Repeat for all views ModelDoc2.EditRebuild Next x ' Next sheet If x > 0 Then ' More than 1 sheet ModelDoc2.ActivateSheet (SheetNames(0)) ' Back to 1st sheet ModelDoc2.EditRebuild End If End Select End If End Sub Private Sub CommandClose_Click() End End Sub Private Sub CheckFitScreen_Click() If (CheckFitScreen.Value = True) And (CheckFitScreen.enabled = True) _ Then ModelDoc2.ViewZoomtofit End Sub Private Sub UserForm_Initialize() Update = False ' Clear form LabelDescription.Caption = \"\" ListBoxConfigurations.Clear Select Case Mode Case 0 ' Top level assembly or part ' Get configuration list and populate list in form ConfigNames = ModelDoc2.GetConfigurationNames() numConfigs = ModelDoc2.GetConfigurationCount() Set Configuration = ModelDoc2.GetActiveConfiguration Case 1 ' Sub-component within assembly Set SelModDoc2 = swSelObj.GetModelDoc ConfigName = swSelObj.ReferencedConfiguration ' Get configuration ConfigNames = SelModDoc2.GetConfigurationNames() numConfigs = SelModDoc2.GetConfigurationCount() Set Configuration = SelModDoc2.GetConfigurationByName(Name) Case 2 ' Preselected views ModelName = swSelObj.GetReferencedModelName NameCheck = NewParseString(UCase(ModelName), \".SLD\", 1, 1) If UCase(Left(NameCheck, 3)) = \"PRT\" Then DocType = swDocPART Else DocType = swDocASSEMBLY End If ShortCheck = NewParseString(NewParseString(UCase(ModelName), _ \"\\\", 1, 1), \".SLD\", 0, 0) ConfigName = swSelObj.ReferencedConfiguration ' Get configuration Set SelModDoc2 = swApp.OpenDoc6(ShortCheck, DocType, _ swOpenDocOptions_AutoMissingConfig, _ ConfigName, LoadErr, LoadWarn) ConfigNames = SelModDoc2.GetConfigurationNames() numConfigs = SelModDoc2.GetConfigurationCount() Set Configuration = SelModDoc2.GetConfigurationByName(ConfigName) CheckFitScreen.enabled = False Case 3 ' All drawing views ModelName = ModelDoc2.GetDependencies(False, False) NumDepend = ModelDoc2.GetNumDependencies(False, False) If NumDepend > 1 Then NameCheck = NewParseString(UCase(ModelName(1)), _ \".SLD\", 1, 1) If UCase(Left(NameCheck, 3)) = \"PRT\" Then DocType = swDocPART Else DocType = swDocASSEMBLY End If ShortCheck = NewParseString(NewParseString( _ UCase(ModelName(1)), \"\\\", 1, 1), \".SLD\", 0, 0) SheetNames = ModelDoc2.GetSheetNames ' List sheet names ModelDoc2.ActivateSheet (SheetNames(0)) ' Activate sheet Set view = ModelDoc2.GetFirstView ' Get first view Set view = view.GetNextView If view.IsModelLoaded = True Then ModelName = view.GetReferencedModelName ShortCheck = NewParseString(NewParseString( _ UCase(ModelName), \"\\\", 1, 1), \".SLD\", 0, 0) ConfigName = view.ReferencedConfiguration ' Get configuration Set ModDoc2 = swApp.OpenDoc6(ShortCheck, DocType, _ swOpenDocOptions_AutoMissingConfig, ConfigName, _ LoadErr, LoadWarn) ConfigNames = ModDoc2.GetConfigurationNames() numConfigs = ModDoc2.GetConfigurationCount() Set ModConfig = ModDoc2.GetConfigurationByName(ConfigName) ModelData = True Else ModelData = False End If End If CheckFitScreen.enabled = False End Select For x = 0 To (numConfigs - 1) ' For each config ListBoxConfigurations.AddItem ConfigNames(x) Next ' Get next config ' Sort entries in ListBoxConfigurations via simple bubble sort technique. For x = 0 To ListBoxConfigurations.ListCount - 2 ' Number of passes For y = 0 To ListBoxConfigurations.ListCount - 2 ' Pass thru each row If ListBoxConfigurations.List(y, 0) _ > ListBoxConfigurations.List(y + 1, 0) Then ' If greater, re-order Temp = ListBoxConfigurations.List(y, 0) ' Re-order entries ListBoxConfigurations.List(y, 0) = ListBoxConfigurations.List(y + 1, 0) ListBoxConfigurations.List(y + 1, 0) = Temp End If ' Re-order check Next y ' Pass thru each row Next x ' Number of passes ' Identify current configuration For x = 0 To (ListBoxConfigurations.ListCount - 1) ' For each config If ListBoxConfigurations.List(x, 0) = ConfigName Then ListBoxConfigurations.Selected(x) = True ' Found active conf End If ' active config Next ' Get next config Update = True End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConfigMassProp.html": {
    "href": "src/ConfigMassProp.html",
    "title": "ConfigMassProp: SELECT CONFIGURATION Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "ConfigMassProp: SELECT CONFIGURATION Macro for SolidWorks Description This macro provides a user interface to manage and export mass properties of various configurations within a SolidWorks document. It allows users to select configurations, retrieve their mass properties, and then export these details to a text file for further analysis or reporting. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks document (assembly or part) must be open. The macro should be executed within the SolidWorks environment with access rights to read and modify document properties. Results Users can view and export the mass properties of selected configurations in the assembly. The exported data includes both mass in pounds and kilograms, which can be useful for compliance and design documentation. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., CfgMassProp) and select Insert > UserForm. Rename the form to FormConfigMassProp. Design the form with the following components: A ListBox named ListBoxConfigurations to display the names of the configurations. Buttons: ALL, None, About, Retrieve, Export, and Close. Add VBA Code: Implement the code to populate the list box with configurations from the active SolidWorks document. Handle button clicks to select configurations, retrieve mass properties, and export the data. Save and Run the Macro: Save the macro file (e.g., CfgMassProp.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the ConfigMassProp UserForm. Use the form controls to manage configurations and perform actions like retrieving and exporting mass properties. Data is saved in a text file named after the document with a suffix \"_MASS.TXT\". VBA Macro Code '------------------------------------------------------------------------------- ' CfgMassProp.swp '------------------------------------------------------------------------------- Global swApp As Object Global ModelDoc2 As Object Global swSelMgr As Object Global swSelObj As Object Global SelModDoc2 As Object Global Configuration As Object Global FileTyp As String Global numConfigs As Integer Global ConfigNames As Variant Global Retval As Integer Global DelCount As Integer Global Mode As Integer ' SolidWorks constants Global Const swDocNONE = 0 Global Const swDocPART = 1 Global Const swDocASSEMBLY = 2 Global Const swDocDRAWING = 3 Global Const swDocSDM = 4 Global Const swSelDRAWINGVIEWS = 12 Global Const swSelCOMPONENTS = 20 Global Const version = \"1.00\" '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set ModelDoc2 = swApp.ActiveDoc ' Grab active doc If ModelDoc2 Is Nothing Then ' Is doc loaded MsgBox \"No active document found in SolidWorks.\" & Chr(13) & Chr(13) _ & \"Please load/activate a SolidWorks \" & Chr(13) _ & \"document and try again.\", vbExclamation Else ' Doc loaded? FileTyp = ModelDoc2.GetType ' Get doc type If FileTyp = swDocASSEMBLY Then ' Assy model? Set swSelMgr = ModelDoc2.SelectionManager Set swSelObj = swSelMgr.GetSelectedObject4(1) ' Get selected If (Not swSelObj Is Nothing) And _ (swSelMgr.GetSelectedObjectType2(1) = swSelCOMPONENTS) Then Mode = 1 ' Manage Comp Else ' pre-selection Mode = 0 ' Manage Assy End If FormCfgMassProp.Show ElseIf FileTyp = swDocPART Then ' Part model? Mode = 0 ' Manage Part FormCfgMassProp.Show ElseIf FileTyp = swDocDRAWING Then ' Drawing? MsgBox \"Sorry, this macro does not work with drawings\", vbExclamation Else ' Else doc type MsgBox \"Sorry, could not determine document type.\", vbExclamation End If ' End doc type End If ' End doc load End Sub VBA UserForm Code '------------------------------------------------------------------------------- ' CfgMassProp.swp '------------------------------------------------------------------------------- Dim ModDoc2 As Object Dim Update As Boolean Dim LoadErr As Long Dim LoadWarn As Long Dim ExpFileName As String Dim ModelName As String Dim WorkModelDoc As Object Const swOpenDocOptions_AutoMissingConfig = &H20 '------------------------------------------------------------------------------ ' This function will locate the occurance of \"stringToFind\" inside \"theString\". ' Occur = 0 Get first occurrance ' 1 Get last occurrance ' From that position, it will return text based on the 'Retrieve' variable. ' StrRet = 0 Get text before ' 1 Get text after ' 2 If no occurrance found, return blank '------------------------------------------------------------------------------ Function NewParseString(theString As String, stringToFind As String, _ Occur As Boolean, StrRet As Integer) Location = 0 TempLoc = 0 PosCount = 1 While PosCount < Len(theString) TempLoc = InStr(PosCount, theString, stringToFind) If TempLoc <> 0 Then If Occur = 0 Then If Location = 0 Then Location = TempLoc End If Else Location = TempLoc End If PosCount = TempLoc + 1 Else PosCount = Len(theString) End If Wend If Location <> 0 Then If StrRet = 0 Then theString = Mid(theString, 1, Location - 1) Else theString = Mid(theString, Location + Len(stringToFind)) End If ElseIf StrRet = 2 Then theString = \"\" End If NewParseString = theString End Function Private Sub CommandAll_Click() For x = 0 To ListBoxConfigurations.ListCount - 1 ListBoxConfigurations.Selected(x) = True Next x End Sub Private Sub CommandNone_Click() For x = 0 To ListBoxConfigurations.ListCount - 1 ListBoxConfigurations.Selected(x) = False Next x CommandExport.Enabled = False End Sub Private Sub CommandaBOUT_Click() FormAbout.Show End Sub Private Sub CommandRetrieve_Click() Dim ModelDocExt As Object Dim MassStatus As Long Dim MassValue As Variant Set ModelDocExt = WorkModelDoc.Extension For x = 0 To ListBoxConfigurations.ListCount - 1 If ListBoxConfigurations.Selected(x) = True Then WorkModelDoc.ShowConfiguration2 ListBoxConfigurations.List(x, 0) MassValue = ModelDocExt.GetMassProperties(1, MassStatus) ListBoxConfigurations.List(x, 1) = Format(MassValue(5) * 2.204622, \"0.000\") ListBoxConfigurations.List(x, 2) = Format(MassValue(5), \"0.00\") If CommandExport.Enabled = False Then CommandExport.Enabled = True End If Next x End Sub Private Sub CommandExport_Click() Dim Config As String Dim MassLb Dim MassKG Open ExpFileName For Append Access Write Lock Write As #1 Print #1, ModelName & \", Lbs, Kg\" For x = 0 To ListBoxConfigurations.ListCount - 1 If ListBoxConfigurations.Selected(x) = True Then Config = ListBoxConfigurations.List(x, 0) MassLb = ListBoxConfigurations.List(x, 1) MassKG = ListBoxConfigurations.List(x, 2) Print #1, Config & \", \" & MassLb & \", \" & MassKG End If Next x Print #1, vbNewLine Close #1 MsgBox \"File Created: \" & Chr(13) & ExpFileName End Sub Private Sub CommandClose_Click() End End Sub Private Sub UserForm_Initialize() Update = False ' Clear form ListBoxConfigurations.Clear Select Case Mode Case 0 ' Top level assembly or part Set WorkModelDoc = ModelDoc2 Case 1 ' Sub-component within assembly Set WorkModelDoc = swSelObj.GetModelDoc End Select ' Get configuration list and populate list in form ConfigNames = WorkModelDoc.GetConfigurationNames() numConfigs = WorkModelDoc.GetConfigurationCount() Set Configuration = WorkModelDoc.GetActiveConfiguration ExpFileName = NewParseString(UCase(WorkModelDoc.GetPathName), _ \".SLD\", 0, 0) & \"_MASS.TXT\" ModelName = NewParseString(UCase(WorkModelDoc.GetPathName), _ \"\\\", 1, 1) For x = 0 To (numConfigs - 1) ' For each config ListBoxConfigurations.AddItem ConfigNames(x) Next ' Get next config ' Sort entries in ListBoxConfigurations via simple bubble sort technique. For x = 0 To ListBoxConfigurations.ListCount - 2 ' Number of passes For y = 0 To ListBoxConfigurations.ListCount - 2 ' Pass thru each row If ListBoxConfigurations.List(y, 0) _ > ListBoxConfigurations.List(y + 1, 0) Then ' If greater, re-order Temp = ListBoxConfigurations.List(y, 0) ' Re-order entries ListBoxConfigurations.List(y, 0) = ListBoxConfigurations.List(y + 1, 0) ListBoxConfigurations.List(y + 1, 0) = Temp End If ' Re-order check Next y ' Pass thru each row Next x ' Number of passes ' Identify current configuration For x = 0 To (ListBoxConfigurations.ListCount - 1) ' For each config If ListBoxConfigurations.List(x, 0) = ConfigName Then ListBoxConfigurations.Selected(x) = True ' Found active conf End If ' active config Next ' Get next config CommandExport.Enabled = False LabelDocument = \"Document: \" & ModelName Update = True End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConvertInnerLoop.html": {
    "href": "src/ConvertInnerLoop.html",
    "title": "Convert Entities - Select Inner Loops Only | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Convert Entities - Select Inner Loops Only Description This macro provides a keyboard shortcut for the Convert Entities feature in SolidWorks, specifically targeting only the inner loops of a sketch. It automates the selection of inner loops, making it more convenient for users to quickly convert edges of inner contours in a sketch. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly containing a sketch. The user must be in an active sketch before running the macro. Results Note Only inner loops of the sketch will be selected for conversion. A confirmation message or error message will be displayed based on the operation's success. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSketchManager As SldWorks.SketchManager ' Sketch manager object to manage sketch-related functions Dim boolstatus As Boolean ' Status variable to check the success of the operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and activate a sketch.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is either a part or an assembly If swModel.GetType <> swDocPART And swModel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works with part or assembly documents. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the Sketch Manager object from the active document Set swSketchManager = swModel.SketchManager ' Use the SketchUseEdge3 method to select only inner loops ' Syntax: SketchUseEdge3(ConvertAllEntities As Boolean, SelectInnerLoops As Boolean) As Boolean ' ConvertAllEntities: Set to False to avoid converting all entities in the sketch. ' SelectInnerLoops: Set to True to select only inner loops for conversion. boolstatus = swSketchManager.SketchUseEdge3(False, True) ' Check if the operation was successful and notify the user If boolstatus Then MsgBox \"Inner loops have been successfully selected for conversion.\", vbInformation, \"Operation Successful\" Else MsgBox \"Failed to select inner loops for conversion. Please ensure you are in an active sketch.\", vbExclamation, \"Operation Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CopyColors.html": {
    "href": "src/CopyColors.html",
    "title": "Copy Colors Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Copy Colors Macro Description This macro copies part-level colors from the first selected assembly component to all other selected components within an assembly. It ensures components are resolved and does not require opening them in separate windows. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. At least two assembly components must be selected. The first selected component serves as the source for the color properties. Results Note The color properties of the first selected component will be applied to all other selected components. Affected components will be saved after the changes are applied. Steps to Use the Macro 1. Prepare the Assembly Open an assembly document in SolidWorks. Select the components you wish to copy the color to. Ensure the source component (from which the color will be copied) is selected first. 2. Execute the Macro Run the macro in SolidWorks. It will resolve components, copy the color properties from the first selected component, and apply them to all other selected components. 3. Verify Changes Check the components to ensure the color has been successfully applied. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() On Error GoTo ErrorHandler ' Declare variables Dim swApp As SldWorks.SldWorks Dim swDoc As SldWorks.ModelDoc2 Dim swAssy As SldWorks.AssemblyDoc Dim swComp As SldWorks.Component2 Dim swDoc2 As SldWorks.ModelDoc2 Dim swComponents() As SldWorks.Component2 Dim swSelMgr As SldWorks.SelectionMgr Dim SelCount As Integer Dim MatProps As Variant Dim i As Integer Dim Errors As Long, Warnings As Long ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc ' Validate the active document type If swDoc Is Nothing Or swDoc.GetType <> swDocASSEMBLY Then MsgBox \"Please open an assembly and select components to copy colors.\", vbExclamation, \"Error\" Exit Sub End If Set swAssy = swDoc Set swSelMgr = swDoc.SelectionManager SelCount = swSelMgr.GetSelectedObjectCount ' Ensure at least two components are selected If SelCount < 2 Then MsgBox \"Please select at least two components in the assembly.\", vbExclamation, \"Error\" Exit Sub End If ' Store selected components in an array ReDim swComponents(SelCount - 1) For i = 0 To SelCount - 1 Set swComp = swSelMgr.GetSelectedObjectsComponent3(i + 1, -1) If swComp Is Nothing Then MsgBox \"Invalid selection detected. Ensure only components are selected.\", vbExclamation, \"Error\" Exit Sub End If Set swComponents(i) = swComp Next i ' Process each selected component For i = 0 To UBound(swComponents) Set swComp = swComponents(i) ' Resolve the component if suppressed If swComp.GetSuppression <> swComponentFullyResolved Then swComp.SetSuppression2 swComponentFullyResolved End If Set swDoc2 = swComp.GetModelDoc2 If i = 0 Then ' Retrieve material properties from the first component MatProps = swDoc2.MaterialPropertyValues Else ' Apply material properties to the other components swDoc2.MaterialPropertyValues = MatProps swDoc2.Save3 swSaveAsOptions_Silent, Errors, Warnings End If Next i ' Notify user of successful operation MsgBox \"Colors copied successfully to the selected components.\", vbInformation, \"Success\" Exit Sub ErrorHandler: MsgBox \"An error occurred: \" & Err.Description, vbCritical, \"Error\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CountHoles.html": {
    "href": "src/CountHoles.html",
    "title": "Hole Detection Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Hole Detection Macro Description This macro identifies and processes circular holes on a selected face in a SolidWorks part or assembly document. It calculates the diameter and material thickness of the hole(s), selects and counts the holes, and displays the results. If no valid holes are found, the user is notified. Additionally, the macro measures the time taken to perform the operation. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. Only one face must be selected in the part or assembly. The face must contain circular holes (elliptical holes are ignored). Results Note Displays the diameter of the first hole found, the material thickness, and the total number of holes on the selected face. If no holes are found or if an invalid selection is made, appropriate warnings are displayed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare public variables to store hole diameters and thicknesses Public Diameter(2000) As Single Public Thickness(2000) As Single Dim swModel As SldWorks.ModelDoc2 ' -------------------------------------------------------------------------- ' Function to get the normal vector of a face at the midpoint of the co-edge ' -------------------------------------------------------------------------- Function GetFaceNormalAtMidCoEdge(swCoEdge As SldWorks.CoEdge) As Variant Dim swFace As SldWorks.Face2 Dim swSurface As SldWorks.Surface Dim swLoop As SldWorks.Loop2 Dim varParams As Variant Dim varPoint As Variant Dim dblMidParam As Double Dim dblNormal(2) As Double Dim bFaceSenseReversed As Boolean varParams = swCoEdge.GetCurveParams ' Calculate the midpoint of the co-edge curve If varParams(6) > varParams(7) Then dblMidParam = (varParams(6) - varParams(7)) / 2 + varParams(7) Else dblMidParam = (varParams(7) - varParams(6)) / 2 + varParams(6) End If varPoint = swCoEdge.Evaluate(dblMidParam) ' Get the face and surface corresponding to the co-edge Set swLoop = swCoEdge.GetLoop Set swFace = swLoop.GetFace Set swSurface = swFace.GetSurface bFaceSenseReversed = swFace.FaceInSurfaceSense varParams = swSurface.EvaluateAtPoint(varPoint(0), varPoint(1), varPoint(2)) ' Adjust the normal vector based on the face's sense If bFaceSenseReversed Then dblNormal(0) = -varParams(0) dblNormal(1) = -varParams(1) dblNormal(2) = -varParams(2) Else dblNormal(0) = varParams(0) dblNormal(1) = varParams(1) dblNormal(2) = varParams(2) End If GetFaceNormalAtMidCoEdge = dblNormal End Function ' -------------------------------------------------------------------------- ' Function to get the tangent vector at the midpoint of a co-edge ' -------------------------------------------------------------------------- Function GetTangentAtMidCoEdge(swCoEdge As SldWorks.CoEdge) As Variant Dim varParams As Variant Dim dblMidParam As Double Dim dblTangent(2) As Double varParams = swCoEdge.GetCurveParams ' Calculate the midpoint of the co-edge curve If varParams(6) > varParams(7) Then dblMidParam = (varParams(6) - varParams(7)) / 2 + varParams(7) Else dblMidParam = (varParams(7) - varParams(6)) / 2 + varParams(6) End If varParams = swCoEdge.Evaluate(dblMidParam) ' Retrieve the tangent vector dblTangent(0) = varParams(3) dblTangent(1) = varParams(4) dblTangent(2) = varParams(5) GetTangentAtMidCoEdge = dblTangent End Function ' -------------------------------------------------------------------------- ' Function to get the cross product of two vectors ' -------------------------------------------------------------------------- Function GetCrossProduct(varVec1 As Variant, varVec2 As Variant) As Variant Dim dblCross(2) As Double dblCross(0) = varVec1(1) * varVec2(2) - varVec1(2) * varVec2(1) dblCross(1) = varVec1(2) * varVec2(0) - varVec1(0) * varVec2(2) dblCross(2) = varVec1(0) * varVec2(1) - varVec1(1) * varVec2(0) GetCrossProduct = dblCross End Function ' -------------------------------------------------------------------------- ' Function to check if two vectors are equal within a tolerance ' -------------------------------------------------------------------------- Function VectorsAreEqual(varVec1 As Variant, varVec2 As Variant) As Boolean Dim dblMag As Double Dim dblDot As Double Dim dblUnit1(2) As Double Dim dblUnit2(2) As Double dblMag = (varVec1(0) * varVec1(0) + varVec1(1) * varVec1(1) + varVec1(2) * varVec1(2)) ^ 0.5 dblUnit1(0) = varVec1(0) / dblMag: dblUnit1(1) = varVec1(1) / dblMag: dblUnit1(2) = varVec1(2) / dblMag dblMag = (varVec2(0) * varVec2(0) + varVec2(1) * varVec2(1) + varVec2(2) * varVec2(2)) ^ 0.5 dblUnit2(0) = varVec2(0) / dblMag: dblUnit2(1) = varVec2(1) / dblMag: dblUnit2(2) = varVec2(2) / dblMag dblDot = dblUnit1(0) * dblUnit2(0) + dblUnit1(1) * dblUnit2(1) + dblUnit1(2) * dblUnit2(2) dblDot = Abs(dblDot - 1#) ' Compare within a tolerance If dblDot < 0.0000000001 Then '1.0e-10 VectorsAreEqual = True Else VectorsAreEqual = False End If End Function ' -------------------------------------------------------------------------- ' Function to select hole edges on a face and calculate hole dimensions ' -------------------------------------------------------------------------- Sub SelectHoleEdges(swFace As SldWorks.Face2, swSelData As SldWorks.SelectData) Dim swThisLoop As SldWorks.Loop2 Dim swThisCoEdge As SldWorks.CoEdge Dim swPartnerCoEdge As SldWorks.CoEdge Dim varThisNormal As Variant Dim varPartnerNormal As Variant Dim varCrossProduct As Variant Dim varTangent As Variant Dim vEdgeArr As Variant Dim swEdge As SldWorks.Edge Dim swCurve As SldWorks.Curve Dim vCurveParam As Variant Dim i As Integer Dim index As Integer Dim bRet As Boolean Dim pi As Single pi = 3.14159265359 index = 0 ' Get the first loop in the face Set swThisLoop = swFace.GetFirstLoop Do While Not swThisLoop Is Nothing ' Hole is inner loop and has only one edge (circular or elliptical) If swThisLoop.IsOuter = False And 1 = swThisLoop.GetEdgeCount Then Set swThisCoEdge = swThisLoop.GetFirstCoEdge Set swPartnerCoEdge = swThisCoEdge.GetPartner varThisNormal = GetFaceNormalAtMidCoEdge(swThisCoEdge) varPartnerNormal = GetFaceNormalAtMidCoEdge(swPartnerCoEdge) ' Check if the normals of the faces are not equal If Not VectorsAreEqual(varThisNormal, varPartnerNormal) Then ' Calculate cross product and tangent vector varCrossProduct = GetCrossProduct(varThisNormal, varPartnerNormal) varTangent = GetTangentAtMidCoEdge(swThisCoEdge) ' If cross product and tangent vector are equal, process the hole If VectorsAreEqual(varCrossProduct, varTangent) Then vEdgeArr = swThisLoop.GetEdges Set swEdge = vEdgeArr(0) Set swCurve = swEdge.GetCurve vCurveParam = swEdge.GetCurveParams2 ' Ignore elliptical holes, only process circular ones If swCurve.IsCircle Then ' Select the edge and calculate diameter bRet = swEdge.Select4(True, swSelData) Diameter(index) = Round(swCurve.GetLength2(vCurveParam(6), vCurveParam(7)) * 1000# / pi, 2) End If End If End If End If Set swThisLoop = swThisLoop.GetNext ' Move to next loop index = index + 1 Loop End Sub ' -------------------------------------------------------------------------- ' Main subroutine to process the selected face and count holes ' -------------------------------------------------------------------------- Sub main() Dim swApp As SldWorks.SldWorks Dim swSelMgr As SldWorks.SelectionMgr Dim swSelData As SldWorks.SelectData Dim swFace As SldWorks.Face2 Dim objCount As Long Dim TimeStart As Single Dim TimeEnd As Single ' Initialize SolidWorks application and check active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Error handling: Check if there is an active document and it's not a drawing If swModel Is Nothing Then MsgBox \"No document is opened!\", vbExclamation, \"Warning !\" Exit Sub End If If swModel.GetType = swDocDRAWING Then MsgBox \"This is not a part or assembly document!\", vbExclamation, \"Warning !\" Exit Sub End If ' Get the selection manager and ensure only one face is selected Set swSelMgr = swModel.SelectionManager If swSelMgr.GetSelectedObjectCount > 1 Then MsgBox \"You can only select one face!\", vbExclamation, \"Warning !\" Exit Sub End If If swSelMgr.GetSelectedObjectCount < 1 Then MsgBox \"You have not selected a face!\", vbExclamation, \"Warning !\" Exit Sub End If If swSelMgr.GetSelectedObjectType2(1) <> swSelFACES Then MsgBox \"You did not select a face!\", vbExclamation, \"Warning !\" Exit Sub End If ' Start the timer for performance measurement TimeStart = Timer ' Process the selected face Set swFace = swSelMgr.GetSelectedObject5(1) Set swSelData = swSelMgr.CreateSelectData swModel.ClearSelection2 True SelectHoleEdges swFace, swSelData ' Get the count of selected hole edges objCount = swSelMgr.GetSelectedObjectCount ' If no holes are found, show an informational message If objCount = 0 Then MsgBox \"Zero hole found on selected face!\", vbInformation, \"Zero hole\" Exit Sub End If ' End the timer and display results TimeEnd = Timer MsgBox _ \"Hole Diameter : \" & Diameter(0) & \" mm\" & vbCrLf & vbCrLf & _ \"Material thickness : \" & Thickness(0) & \" mm\" & vbCrLf & vbCrLf & _ \"Number of Holes : \" & objCount & vbCrLf & vbCrLf & _ \"Time taken : \" & Round((TimeEnd - TimeStart), 2) & \" Seconds\", , _ \"Hole Counting Macro V0.2\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Create Tube.html": {
    "href": "src/Create Tube.html",
    "title": "Create Straight Tube in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Create Straight Tube in SolidWorks Description This macro allows users to create a straight tube based on user-defined parameters for diameter, wall thickness, and length (in inches). The macro leverages a UserForm to gather input values from the user, simplifying the creation process and providing precise dimensions. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a SolidWorks part document. The macro requires the UserForm (UserForm1) to collect diameter, wall thickness, and length values. Results Note A new tube is created in the active SolidWorks document with the specified diameter, wall thickness, and length. The tube is centered on the origin and dimensioned accurately based on user inputs. STEPS to Setup the Macro Create Macro File: In SolidWorks, go to Tools > Macro > New to create a new macro. Save the file with a .swp extension. Add Macro Code: Open the macro in the VBA editor. Copy the Macro Code provided below and paste it into the VBA editor module. Add UserForm: In the VBA editor, add a new UserForm by selecting Insert > UserForm. Name the UserForm as UserForm1. Add input fields for Diameter, Wall Thickness, and Length on the form. Copy the UserForm Code provided below and paste it into the code section of UserForm1. Run the Macro: In SolidWorks, open or create a new part document. Run the macro to display the UserForm. Enter the diameter, wall thickness, and length in the UserForm, then click OK to create the tube. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim Part As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Main program area for the Main event trigger Set swApp = Application.SldWorks Set swmodel = swApp.ActiveDoc Load UserForm1 ' Load the UserForm for tube creation inputs UserForm1.Show ' Display the UserForm End Sub VBA UserForm1 Code Private Sub CommandButton1_Click() ' Variables for tube dimensions, converted from inches to meters Dim od As Double, Wall As Double, Length As Double od = TextBox1.Value / 39.37 Wall = TextBox2.Value / 39.37 Length = TextBox3.Value / 39.37 ' Initialize SolidWorks application object Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Select Right Plane to start sketching the tube profile boolstatus = Part.Extension.SelectByID2(\"Right Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.SketchManager.InsertSketch True Part.ClearSelection2 True ' Create a circle for the outer diameter of the tube Dim skSegment As Object Set skSegment = Part.SketchManager.CreateCircle(-0#, 0#, 0#, od / 2, 0#, 0#) Part.ShowNamedView2 \"*Trimetric\", 8 Part.ClearSelection2 True ' Extrude the circle to create the tube with specified wall thickness and length boolstatus = Part.Extension.SelectByID2(\"Arc1\", \"SKETCHSEGMENT\", 0, 0, 0, False, 0, Nothing, 0) Dim myFeature As Object Set myFeature = Part.FeatureManager.FeatureExtrusionThin(True, False, False, 0, 0, Length, 0.00254, False, False, False, False, 0.01745329251994, 0.01745329251994, False, False, False, False, True, Wall, 0.00254, 0.00254, 1, 0, False, 0.005, True, True) Part.SelectionManager.EnableContourSelection = False ' Close the UserForm after creation Unload UserForm1 End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CreateCylinder.html": {
    "href": "src/CreateCylinder.html",
    "title": "Cylinder Creation Macro in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Cylinder Creation Macro in SolidWorks Description This macro allows users to create an array of cylinders in SolidWorks based on user-defined parameters such as the number of cylinders, radius, height, and extrusion depth. The macro displays a graphical user interface (GUI) where users can enter these values, and then generates the cylinders in a new part document. This tool is useful for quickly generating a set of uniform cylinders in a structured layout. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note SolidWorks must be open with an active part document. The macro requires user input for cylinder parameters such as quantity, radius, height, and depth. Results Note Creates a specified number of cylinders with the given dimensions. Cylinders are arranged in a linear array with spacing calculated based on radius and quantity. STEPS to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks (Alt + F11). In the Project Explorer, right-click on the project (e.g., Macro1), select Insert > UserForm. Rename the form as UserForm1. Design the form to match the UI provided: Add labels for Tube O.D., Wall Thickness, Length. Add text boxes below each label for user input (e.g., Txt1 for Tube O.D., Txt2 for Wall Thickness, Txt3 for Length, and Txt4 for Depth). Add a button labeled Create Tube and set its name to Pcmd. Optionally, add an image to visually represent the tube dimensions. Add VBA Code: Copy the Macro Code provided below into the module. Copy the UserForm Code into the UserForm1 code-behind. Save and Run the Macro: Save the macro file (e.g., CreateCylinders.swp). Run the macro by going to Tools > Macro > Run in SolidWorks, then select your saved macro. Input Cylinder Parameters: The macro will open the UserForm. Enter the desired parameters for your cylinders and click Create Tube. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object Dim Part As Object Dim SelMgr As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Dim Feature As Object Dim ad As String Sub main() UserForm1.Show End Sub VBA UserForm Code Option Explicit Dim swApp As SldWorks.SldWorks Dim Part As SldWorks.ModelDoc2 Dim SelMgr As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Dim Feature As Object Dim ad As String Dim L As Double Dim W As Double Dim R As Double Dim H As Double Dim No As Integer Dim i As Integer Dim D As Double Dim flag As Boolean Private Sub Pcmd_Click() Set swApp = Application.SldWorks ad = swApp.GetUserPreferenceStringValue(swDefaultTemplatePart) swApp.SetUserPreferenceToggle swInputDimValOnCreate, False Set Part = swApp.NewDocument(ad, 0, 0#, 0#) Set Part = swApp.ActiveDoc No = Txt1.Value R = Txt2.Value / 1000 H = Txt3.Value / 1000 L = (10 * (No + 1) + (No / 2) * (4 * 1000 * R + 10 * (No - 1))) / 1000 W = (20 + 2 * 1000 * R + (No - 1) * 10) / 1000 D = Txt4.Value / 1000 ' Create base sketch and extrusion boolstatus = Part.Extension.SelectByID2(\"Top Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.SketchManager.InsertSketch True Part.ClearSelection2 True Part.SketchRectangle 0, 0, 0, L, W, 0, 1 Part.ClearSelection2 True ' Set sketch dimensions boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0.04195712890625, 0, 0.0004216796875, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(0.0411138, 0, 0.0156021) Part.ClearSelection2 True Part.Parameter(\"D1@Sketch1\").SystemValue = L boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.00021083984375, 0, -0.0303609375, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.0132829, 0, -0.0303609) Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"D1@Sketch1@Part1.SLDPRT\", \"DIMENSION\", 0, 0, 0, False, 0, Nothing, 0) Part.Parameter(\"D2@Sketch1\").SystemValue = W Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ShowNamedView2 \"*Trimetric\", 8 Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Sketch1\", \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) Part.FeatureManager.FeatureExtrusion2 True, False, False, 0, 0, D, 0.01, False, False, False, False, 0.01745329251994, 0.01745329251994, False, False, False, False, 1, 1, 1, 0, 0, False Part.SelectionManager.EnableContourSelection = 0 ' Create cylinders based on input parameters For i = 1 To No boolstatus = Part.Extension.SelectByID2(\"\", \"FACE\", L, D, -W / 2, False, 0, Nothing, 0) Part.SketchManager.InsertSketch True Part.ClearSelection2 True Part.CreateCircleByRadius2 (10 * i + (i / 2) * (4 * 1000 * R + 10 * (i - 1)) - R * 1000 - (i - 1) * 5) / 1000, W / 2, 0, (1000 * R + (i - 1) * 5) / 1000 Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.FeatureManager.FeatureExtrusion True, False, False, 0, 0, (1000 * H + 10 * (i - 1)) / 1000, 0.01, False, False, False, False, 0.01745329251994, 0.01745329251994, False, False, False, False, 1, 1, 1 Part.SelectionManager.EnableContourSelection = 0 Next Part.ViewZoomtofit2 End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CycleRefFeatures.html": {
    "href": "src/CycleRefFeatures.html",
    "title": "Cycle References Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Cycle References Macro Description This macro cycles through the selection of reference geometry (planes, axes, origin) of a component within an assembly in SolidWorks. It allows for easy selection of features to use for mating components within assemblies. Running the macro again will cycle through all the reference features of the last selected component. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be currently open in SolidWorks. One or more items must be selected either in the graphics area or the feature tree. Results Note Selects one of the reference features (plane, axis, or origin) of the last selected component. Cycles through all available reference features with each subsequent macro execution. Steps to Setup the Macro 1. Check Document Type: Ensure that an assembly document is active. Exit the macro if another type of document is active. 2. Get Selected Component: Retrieve the last selected component from the selection manager. Exit the macro if no components are selected. 3. Initialize Feature Cycling: Start with the first feature of the selected component and check each feature to see if it is a reference feature (plane or axis) or the origin. Add valid reference features to a collection for cycling. 4. Determine Current Selection: Check if the current selection matches any features in the collection. If it does, prepare to select the next feature in the cycle. 5. Cycle Through Features: If the current feature is the last in the collection, wrap around to the first feature. Select the determined next feature in the SolidWorks assembly. 6. Handle Origin Selection: If the origin is allowed and selected, and if stopping at the origin is enabled, exit the macro after selecting the origin. Otherwise, continue to the next reference feature. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Constants for controlling feature selection behavior Const STOPATORIGIN As Boolean = False ' Stop cycling at the origin feature Const FIRSTREF As Long = 1 ' Start cycling with the first reference feature Const SELECTAXIS As Boolean = True ' Allow selection of reference axes Const SELECTORIGIN As Boolean = True ' Allow selection of the origin Sub main() ' SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swSelComp As SldWorks.Component2 ' Selected component object Dim swFeat As SldWorks.Feature ' Feature object for traversing component features Dim GeneralSelObj As Object ' General object for the last selected entity Dim myFeatureCollection As New Collection ' Collection to store reference features Dim i As Integer ' Loop counter Dim CurSelCount As Long ' Current selection count ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure an assembly document is open If swModel Is Nothing Or swModel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assembly documents.\", vbExclamation, \"Invalid Document Type\" Exit Sub End If ' Initialize selection manager and get count of selected items Set swSelMgr = swModel.SelectionManager CurSelCount = swSelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"No items selected.\", vbInformation, \"No Selection\" Exit Sub End If ' Cycle through selected components and gather their reference features For i = 1 To CurSelCount Set swSelComp = swSelMgr.GetSelectedObjectsComponent(i) ' Get the component for each selection If Not swSelComp Is Nothing Then Set swFeat = swSelComp.FirstFeature ' Access the first feature of the component Do While Not swFeat Is Nothing ' Add reference features (planes, axes, origin) to the collection Select Case swFeat.GetTypeName Case \"RefPlane\" ' Add reference planes to the collection myFeatureCollection.Add swFeat Case \"RefAxis\" ' Add reference axes if enabled If SELECTAXIS Then myFeatureCollection.Add swFeat Case \"OriginProfileFeature\" ' Add origin if enabled If SELECTORIGIN Then myFeatureCollection.Add swFeat End Select Set swFeat = swFeat.GetNextFeature ' Move to the next feature Loop End If Next i ' Determine the next feature to select Set GeneralSelObj = swSelMgr.GetSelectedObject6(CurSelCount, -1) ' Get the last selected object For i = 1 To myFeatureCollection.Count If GeneralSelObj Is myFeatureCollection.Item(i) Then ' Cycle to the next feature in the collection Set GeneralSelObj = myFeatureCollection.Item((i Mod myFeatureCollection.Count) + 1) Exit For End If Next ' Select the next feature in the collection If Not GeneralSelObj Is Nothing Then GeneralSelObj.Select4 True, Nothing, False End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DataCharter.html": {
    "href": "src/DataCharter.html",
    "title": "DataCharter: Chart Creator Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "DataCharter: Chart Creator Macro for SolidWorks Description This macro, known as DataCharter, allows users to create charts based on dimensional data from SolidWorks models. It facilitates the entry of parameters, chart creation, and data exportation to both CSV and Excel formats. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks part or assembly with defined dimensions must be open. The macro should be executed within the SolidWorks environment. Results Users can generate customizable charts based on specific dimension parameters. Provides functionality to export the charted data to CSV or Excel for further analysis or reporting. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, locate the DataCharter project. Right-click on the Forms folder and select Insert > UserForm. Rename the newly created form to FormEnterParameters. Design the form to include: Text boxes for parameter input. Buttons for operations such as Create Chart, Export to CSV, and Export to Excel. A ListBox for displaying charted data. Implement the Module: Right-click on the Modules folder within the DataCharter project. Select Insert > Module. Add VBA code to this module (DataCharter1) to handle the logic for chart creation, data retrieval, and exporting functionalities. Add Class Modules: If there are specific object-oriented functionalities or event handling required: Right-click on Class Modules in the DataCharter project. Select Insert > Class Module. Implement class-based logic in ClassEvents. Save and Run the Macro: Save the macro file (e.g., DataCharter.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will display the FormEnterParameters. Input horizontal and vertical scale parameters along with desired precision. Use the Create Chart button to generate the chart within the ListBox. Export the chart data using the Export to CSV or Export to Excel buttons. VBA Macro Code ' ------------------------------------------------------------------------------ ' DataCharter.swp ' ------------------------------------------------------------------------------ ' DataCharter1: Macro is launched from \"main\" subroutine in this module. ' ------------------------------------------------------------------------------ Global swApp As Object Global Part As Object Global swSelMgr As Object Global swMouse As SldWorks.mouse Global TheMouse As SldWorks.mouse Global MouseObj As New ClassEvents Global swModelDocExt As SldWorks.ModelDocExtension Global swModelView As SldWorks.ModelView Global SelectDestination As Object Global MyDimName(3) As String Global MyDimType(3) As Integer Global MyWorkDim As Integer Global mySalmon Global Pi Sub main() ' Attach to SolidWorks and get active document mySalmon = RGB(255, 160, 160) ' Salmon background Pi = 4 * Atn(1) ' The infamous pi value Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Grab currently active document Set swModelDocExt = Part.Extension Set swModelView = Part.GetFirstModelView Set TheMouse = swModelView.GetMouse MouseObj.init TheMouse ' Set eventListener = New ClassEvents FormEnterParameters.Show End Sub VBA UserForm Code ' ------------------------------------------------------------------------------ ' DataCharter.swp ' ------------------------------------------------------------------------------ ' DataCharter1: Macro is launched from \"main\" subroutine in this module. ' ------------------------------------------------------------------------------ Dim BaseFileName As String ' ----------------------------------------------------------------------------- ' This function will return text based on occurance of a string \"stringToFind\" ' within another string \"theString\", and text before/after defined below. ' ' Locate the occurance of \"stringToFind\", based on the occur variable. ' Occur = 0 Get first occurrance ' 1 Get last occurrance ' ' Return the text (before/after) based on the 'Retrieve' variable. ' StrRet = 0 Get text before ' 1 Get text after ' 2 If no occurrance found, return blank ' ----------------------------------------------------------------------------- Function NewParseString(theString As String, stringToFind As String, _ Occur As Boolean, StrRet As Integer) Location = 0 TempLoc = 0 PosCount = 1 While PosCount < Len(theString) TempLoc = InStr(PosCount, theString, stringToFind) If TempLoc <> 0 Then If Occur = 0 Then If Location = 0 Then Location = TempLoc End If Else Location = TempLoc End If PosCount = TempLoc + 1 Else PosCount = Len(theString) End If Wend If Location <> 0 Then If StrRet = 0 Then theString = Mid(theString, 1, Location - 1) Else theString = Mid(theString, Location + Len(stringToFind)) End If ElseIf StrRet = 2 Then theString = \"\" End If NewParseString = theString End Function Function CUtoMTR(Value1 As Double, DimObj As Integer) If MyDimType(DimObj) = swDimensionParamTypeDoubleLinear Then Select Case Part.GetUserPreferenceIntegerValue(swUnitsLinear) Case swMM CUtoMTR = Value1 * 0.001 Case swCM CUtoMTR = Value1 * 0.01 Case swMETER CUtoMTR = Value1 * 1 Case swINCHES CUtoMTR = Value1 * 0.0254 Case swFEET CUtoMTR = Value1 * 0.0254 * 12 Case Else MsgBox \"Document units are not recognized\" End Select ElseIf MyDimType(DimObj) = swDimensionParamTypeDoubleAngular Then Select Case Part.GetUserPreferenceIntegerValue(swUnitsAngular) Case swDEGREES CUtoMTR = Value1 * (Pi / 180) Case swRADIANS CUtoMTR = Value1 * 1 Case Else MsgBox \"Document units are not recognized\" End Select End If End Function Function MTRtoCU(Value1 As Double, DimObj As Integer) If MyDimType(DimObj) = swDimensionParamTypeDoubleLinear Then Select Case Part.GetUserPreferenceIntegerValue(swUnitsLinear) Case swMM MTRtoCU = Value1 / 0.001 Case swCM MTRtoCU = Value1 / 0.01 Case swMETER MTRtoCU = Value1 / 1 Case swINCHES MTRtoCU = Value1 / 0.0254 Case swFEET MTRtoCU = Value1 / (0.0254 * 12) Case Else MsgBox \"Document units are not recognized\" End Select ElseIf MyDimType(DimObj) = swDimensionParamTypeDoubleAngular Then Select Case Part.GetUserPreferenceIntegerValue(swUnitsAngular) Case swDEGREES MTRtoCU = Value1 * (180 / Pi) Case swRADIANS MTRtoCU = Value1 * 1 Case Else MsgBox \"Document units are not recognized\" End Select End If End Function Private Sub CommandChart_Click() Dim Values As String Dim Separator As Integer Dim NextCol As Integer Dim NextRow As Integer Dim X As Integer Dim ColSpace As String ' - - - - - - - - - - - - - - - - - - - - ' Clear Chart ListBoxChart.Clear ' - - - - - - - - - - - - - - - - - - - - ' Setup Top Header Row NextRow = 0 NextCol = 1 On Error GoTo CheckValues Values = TextValHor.Value ListBoxChart.AddItem 0 Separator = InStr(1, Values, \" \") While Separator > 0 ListBoxChart.List(NextRow, NextCol) = CDbl(Left$(Values, Separator - 1)) Values = Mid$(Values, Separator + 1) Separator = InStr(1, Values, \" \") If NextCol < 9 Then NextCol = NextCol + 1 Else GoTo EndCols End If Wend If NextCol < 9 Then If Values <> \"\" Then ListBoxChart.List(NextRow, NextCol) = CDbl(Values) End If GoTo ResumeMacro EndCols: MsgBox \"This macro only supports 9 possible values for horizontal scale\" ResumeMacro: ListBoxChart.ColumnCount = NextCol + 1 ' - - - - - - - - - - - - - - - - - - - - ' Setup Column Count And Column Widths ColSpace = \"\" For X = 0 To NextCol ColSpace = ColSpace + \"50 pt;\" Next X ColSpace = ColSpace + \"50 pt\" ListBoxChart.ColumnWidths = ColSpace ' - - - - - - - - - - - - - - - - - - - - ' Setup Left Header Column Values = TextValVer.Value Separator = InStr(1, Values, \" \") While Separator > 0 ListBoxChart.AddItem CDbl(Left$(Values, Separator - 1)) Values = Mid$(Values, Separator + 1) Separator = InStr(1, Values, \" \") Wend If Values <> \"\" Then ListBoxChart.AddItem CDbl(Values) ' - - - - - - - - - - - - - - - - - - - - ' At this point: ' All values have been read in and chart \"headers\" have been created. ' Dimensions still need to be updated and proper data can be retrieved. ' - - - - - - - - - - - - - - - - - - - - ' For each row in chart For Y = 1 To ListBoxChart.ListCount - 1 ' For each column in chart For X = 1 To ListBoxChart.ColumnCount - 1 ' Update dimensions for Horizontal and Vertical Scales Part.Parameter(TextDimHor).SystemValue _ = CUtoMTR(CDbl(ListBoxChart.List(0, X)), 1) Part.Parameter(TextDimVer).SystemValue _ = CUtoMTR(CDbl(ListBoxChart.List(Y, 0)), 2) ' Read Charted Dimension and apply to Dimension to Chart ListBoxChart.List(Y, X) _ = Round(MTRtoCU(Part.Parameter(TextDimCht).SystemValue, 3), _ Len(ComboPrec) - 1) Next X Next Y ' - - - - - - - - - - - - - - - - - - - - ' Chart has been updated. ' Enable export buttons. CommandExportCSV.Enabled = True CommandExportExcel.Enabled = True ' - - - - - - - - - - - - - - - - - - - - ' Display charted data ListBoxDisplay.ListIndex = 1 GoTo NoError CheckValues: MsgBox \"Invalid inputs. Please verify inputs\", vbInformation, \"DataCharter\" NoError: End Sub Private Sub CommandCancel_Click() End End Sub Private Sub CommandExportCSV_Click() ' - - - - - - - - - - - - - - - - - - - - ' Setup Export file name Dim ExportName As String ExportName = NewParseString(UCase(Part.GetPathName), _ \".SLD\", 0, 0) + \"-DataCht.csv\" ' - - - - - - - - - - - - - - - - - - - - ' Export data Open ExportName For Append Access Write Lock Write As #1 For Row = 0 To ListBoxChart.ListCount - 1 ' For each row PrintText = \"\" ' Clear PrintTest For Col = 0 To ListBoxChart.ColumnCount - 1 ' for each column PrintText = PrintText + ListBoxChart.List(Row, Col) If Col <> ListBoxChart.ColumnCount - 1 Then PrintText = PrintText + \",\" ' Add delimit char End If Next Col ' Next column Print #1, LTrim(RTrim(PrintText)) ' Print to file Next Row ' Next row Print #1, vbNewLine ' Print blank line Close #1 MsgBox \"Charted data has been exported to the file:\" & Chr(13) _ & ExportName, vbInformation, \"DataCharter\" Me.Repaint End Sub ' ----------------------------------------------------------------------------- ' Export to Excel Spreadsheet ' ----------------------------------------------------------------------------- Private Sub CommandExportExcel_Click() ' - - - - - - - - - - - - - - - - - - - - ' Setup Export file name Dim ExportName As String ExportName = NewParseString(UCase(Part.GetPathName), _ \".SLD\", 0, 0) + \"-DataCht.xls\" ' - - - - - - - - - - - - - - - - - - - - ' Launch and attach to the Excel API Set XLApp = CreateObject(\"Excel.Application\") XLApp.Visible = True ' - - - - - - - - - - - - - - - - - - - - ' Start new document Set wb = XLApp.Workbooks.Add ' - - - - - - - - - - - - - - - - - - - - ' Set column formats to \"Text\" Prec = \".\" For Col = 1 To Len(ComboPrec) - 1 Prec = Prec + \"0\" Next Col ' - - - - - - - - - - - - - - - - - - - - ' Format precision in excel columns For Col = 0 To ListBoxChart.ColumnCount - 1 ' for each column XLApp.Columns(Chr(Col + 65) & \":\" & Chr(Col + 65)).Select XLApp.Selection.NumberFormat = Prec ' Set precision Next Col ' - - - - - - - - - - - - - - - - - - - - ' Prepare to generate BOM in Excel Row = 0 ' - - - - - - - - - - - - - - - - - - - - ' For each row While (Row < ListBoxChart.ListCount) ' For each row XLCol = 0 ' - - - - - - - - - - - - - - - - - - - - ' Write title row to top of current page of spreadsheet For Col = 0 To ListBoxChart.ColumnCount - 1 ' for each column ' Write data to specific cell on current page of spreadsheet ' Convert listbox coordinates to excel coordinates ' NOTE: Listbox cells starts at 0,0 and Excel cells starts at A1 XLApp.ActiveSheet.Range(Chr(XLCol + 65) & Row + 1).Value _ = ListBoxChart.List(Row, Col) XLCol = XLCol + 1 Next Col Row = Row + 1 ' Next row to read XLRow = XLRow + 1 ' Next row to write to Excel Wend ' Continue loop until all is read ' - - - - - - - - - - - - - - - - - - - - ' Set each column to AutoFit ' to force Autofit of Excel columns, remove apostrophes from next 3 lines ' For Col = 0 To ListBoxChart.ListCount - 1 ' XLApp.Columns(Chr(Col + 65) & \":\" & Chr(Col + 65)).EntireColumn.AutoFit ' Next Col ' - - - - - - - - - - - - - - - - - - - - ' Go to cell A1 XLApp.Range(\"A1:A1\").Select ' - - - - - - - - - - - - - - - - - - - - ' Save spreadsheet XLApp.ActiveWorkbook.SaveAs FileName:=ExportName ' - - - - - - - - - - - - - - - - - - - - ' Close Excel XLApp.Quit Set XLApp = Nothing MsgBox \"Charted data has been exported to the file:\" & Chr(13) _ & ExportName, vbInformation, \"DataCharter\" End Sub Private Sub ListBoxDisplay_Click() If ListBoxDisplay.ListIndex = 0 Then FrameEnter.Visible = True FrameDataChart.Visible = False Else FrameEnter.Visible = False FrameDataChart.Visible = True End If End Sub ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' If a field is changed, do the following: ' * Check inputs to see if all fields contain data ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub TextDimHor_Change() CheckInputs End Sub Private Sub TextDimCht_Change() CheckInputs End Sub Private Sub TextDimVer_Change() CheckInputs End Sub Private Sub TextValHor_Change() CheckInputs End Sub Private Sub TextValVer_Change() CheckInputs End Sub Private Sub ComboPrec_Change() CheckInputs End Sub Private Sub CheckInputs() InputsOK = True ' - - - - - - - - - - - - - - - - - - - - ' Check for entries in input fields If TextDimHor.Value = \"\" Then InputsOK = False If TextValHor.Value = \"\" Then InputsOK = False If TextDimVer.Value = \"\" Then InputsOK = False If TextValVer.Value = \"\" Then InputsOK = False If TextDimCht.Value = \"\" Then InputsOK = False If ComboPrec.ListIndex < 0 Then InputsOK = False ' - - - - - - - - - - - - - - - - - - - - ' Ensure all input fields contain data. If InputsOK = True Then ' - - - - - - - - - - - - - - - - - - - - ' If all input fields contain data, enable \"Create Chart\" button CommandChart.Enabled = True Else ' - - - - - - - - - - - - - - - - - - - - ' If any input fields are blank, disable \"Create Chart\" button CommandChart.Enabled = False End If ' - - - - - - - - - - - - - - - - - - - - ' Input fields may have changed, disable Export buttons for now CommandExportCSV.Enabled = False CommandExportExcel.Enabled = False End Sub ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' When these fields are entered (selected), do the following: ' * Highlight field with salmon color ' * Set destination of name of selected dimension ' * Repaint form ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub TextDimHor_Enter() TextDimHor.BackColor = mySalmon TextDimHor.ForeColor = vbBlack MyWorkDim = 1 Me.Repaint End Sub Private Sub TextDimVer_Enter() TextDimVer.BackColor = mySalmon TextDimVer.ForeColor = vbBlack MyWorkDim = 2 Me.Repaint End Sub Private Sub TextDimCht_Enter() TextDimCht.BackColor = mySalmon TextDimCht.ForeColor = vbBlack MyWorkDim = 3 Me.Repaint End Sub ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' When these fields are exited (after update), do the following: ' * Reset field to standard colors ' * Clear destination of name of selected dimension ' * Repaint form ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub TextDimHor_AfterUpdate() TextDimHor.BackColor = vbWindowBackground TextDimHor.ForeColor = vbWindowText Me.Repaint End Sub Private Sub TextDimVer_AfterUpdate() TextDimVer.BackColor = vbWindowBackground TextDimVer.ForeColor = vbWindowText Me.Repaint End Sub Private Sub TextDimCht_AfterUpdate() TextDimCht.BackColor = vbWindowBackground TextDimCht.ForeColor = vbWindowText Me.Repaint End Sub ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ' Initialize user form ' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Private Sub UserForm_Initialize() ' - - - - - - - - - - - - - - - - - - - - ' Populate precision combobox ComboPrec.AddItem \"1\" ComboPrec.AddItem \".1\" ComboPrec.AddItem \".01\" ComboPrec.AddItem \".001\" ComboPrec.AddItem \".0001\" ComboPrec.AddItem \".00001\" ComboPrec.AddItem \".000001\" ComboPrec.AddItem \".0000001\" ComboPrec.AddItem \".00000001\" ComboPrec.ListIndex = 3 ' - - - - - - - - - - - - - - - - - - - - ' Setup frame view selection ListBoxDisplay.AddItem \"Enter Parameters\" ListBoxDisplay.AddItem \"Charted Data\" ListBoxDisplay.ListIndex = 0 ' - - - - - - - - - - - - - - - - - - - - ' Reposition form elements and resize form FrameEnter.Visible = True FrameDataChart.Visible = False FrameDataChart.Top = 6 FormEnterParameters.Height = 168 ' - - - - - - - - - - - - - - - - - - - - ' Handle Pre-Selections. Selections made before macro was launched ' - - - - - - - - - - - - - - - - - - - - ' Get selection manager Set swSelMgr = Part.SelectionManager ' - - - - - - - - - - - - - - - - - - - - ' Get number of selections Count = swSelMgr.GetSelectedObjectCount2(-1) If Count > 0 Then ' Is anything selected For MyCount = 1 To 3 ' - - - - - - - - - - - - - - - - - - - - ' What type of object was selected SelType = swSelMgr.GetSelectedObjectType3(MyCount, -1) ' - - - - - - - - - - - - - - - - - - - - ' Is it a dimension? If swSelMgr.GetSelectedObjectType3(MyCount, -1) = swSelDIMENSIONS Then ' - - - - - - - - - - - - - - - - - - - - ' For dimensions only Set DimSelect = swSelMgr.GetSelectedObject6(MyCount, -1) Set swDimen = DimSelect.GetDimension If Not DimSelect Is Nothing Then Select Case MyCount Case 1 TextDimHor.Value = swDimen.FullName MyDimType(1) = swDimen.GetType Case 2 TextDimVer.Value = swDimen.FullName MyDimType(2) = swDimen.GetType Case 3 TextDimCht.Value = swDimen.FullName MyDimType(3) = swDimen.GetType End Select End If End If Next MyCount End If CheckInputs End Sub ClassEvents Class Code ' ------------------------------------------------------------------------------ ' DataCharter.swp ' ------------------------------------------------------------------------------ ' Mouse handler Class for dimension selection in FormEnterParameters ' ------------------------------------------------------------------------------ Option Explicit Dim WithEvents ms As SldWorks.mouse Private Sub Class_Initialize() End Sub Public Sub init(mouse As Object) Set ms = mouse End Sub ' Private Function ms_MouseNotify(ByVal Message As Long, ByVal wParam As Long, ByVal lParam As Long) As Long ' Debug.Print \"Event Message= \" & Message & \" wParam= \" & wParam & \" lParam= \"; lParam ' End Function Private Function ms_MouseSelectNotify(ByVal ix As Long, ByVal iy As Long, ByVal X As Double, ByVal Y As Double, ByVal Z As Double) As Long Dim UserSelect As Boolean Dim Count As Integer Dim SelType As String Dim DimSelect As Object Dim swDimen As Object If Not MyWorkDim = 0 Then UserSelect = swSelMgr.EnableSelection If UserSelect = True Then Count = swSelMgr.GetSelectedObjectCount2(-1) If Count > 0 Then ' Is anything selected ' What type of object was selected SelType = swSelMgr.GetSelectedObjectType3(1, -1) ' Is it a dimension? If swSelMgr.GetSelectedObjectType3(1, -1) = swSelDIMENSIONS Then ' For dimensions only Set DimSelect = swSelMgr.GetSelectedObject6(1, -1) Set swDimen = DimSelect.GetDimension If Not DimSelect Is Nothing Then MyDimName(MyWorkDim) = swDimen.FullName Select Case MyWorkDim Case 1 FormEnterParameters.TextDimHor.Value = MyDimName(MyWorkDim) Case 2 FormEnterParameters.TextDimVer.Value = MyDimName(MyWorkDim) Case 3 FormEnterParameters.TextDimCht.Value = MyDimName(MyWorkDim) End Select MyDimType(MyWorkDim) = swDimen.GetType End If End If End If End If End If End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DeleteConfigurations.html": {
    "href": "src/DeleteConfigurations.html",
    "title": "DeleteAllConfigs: Configuration Management Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "DeleteAllConfigs: Configuration Management Macro for SolidWorks Description This macro allows for the deletion of configurations from a SolidWorks model while optionally retaining a selected configuration. It provides an interface for users to select configurations for deletion and ensures that at least one configuration remains active in the model. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks part or assembly must be open with multiple configurations. The macro should be executed within the SolidWorks environment with access rights to modify document properties. Results Users can selectively delete configurations from a model. Provides feedback on the number of configurations deleted. Ensures that at least one configuration, typically the \"Default\" configuration, remains undisturbed. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, locate the DeleteAllConfigs project. Right-click on Forms and select Insert > UserForm. Rename the newly created form to FormDeleteConfigs. Design the form with the following components: Checkboxes: CheckDeleteConfigs and CheckKeepConfig to select deletion options. Buttons: Delete and Cancel to execute or abort the deletion process. Label: LabelConfigsDeleted to display the status of operations. Implement the Module: Right-click on Modules within the DeleteAllConfigs project. Select Insert > Module. Add the VBA code to this module (DeleteConfigs) to handle the logic for deleting configurations based on the user's selections. Configure Event Handlers: In the FormDeleteConfigs, implement event handlers for the Delete and Cancel buttons. Use ProcessCheck to enable or disable the Delete button based on checkbox states. Save and Run the Macro: Save the macro file (e.g., DeleteAllConfigs.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the FormDeleteConfigs. Select the appropriate checkboxes to configure the deletion process. Use the Delete button to remove configurations, or Cancel to close the form without making changes. VBA Macro Code '------------------------------------------------------------------------------ ' DeleteAllConfigs.swp '------------------------------------------------------------------------------ Global swApp As Object Global ModelDoc2 As Object Global Configuration As Object Global FileTyp As String Global numConfigs As Integer Global ConfigNames As Variant Global Retval As Integer Global DelCount As Integer ' SolidWorks constants Global Const swDocPART = 1 Global Const swDocASSEMBLY = 2 Global Const swMbWarning = 1 Global Const swMbInformation = 2 Global Const swMbQuestion = 3 Global Const swMbStop = 4 Global Const swMbAbortRetryIgnore = 1 Global Const swMbOk = 2 Global Const swMbOkCancel = 3 Global Const swMbRetryCancel = 4 Global Const swMbYesNo = 5 Global Const swMbYesNoCancel = 6 Global Const swMbHitAbort = 1 Global Const swMbHitIgnore = 2 Global Const swMbHitNo = 3 Global Const swMbHitOk = 4 Global Const swMbHitRetry = 5 Global Const swMbHitYes = 6 Global Const swMbHitCancel = 7 '------------------------------------------------------------------------------ ' Delete extra configurations from model and set current config to Default '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set ModelDoc2 = swApp.ActiveDoc ' Grab active doc If ModelDoc2 Is Nothing Then ' Is doc loaded MsgBox \"No model loaded.\" ' Nothing - Warn Else ' Doc loaded? FileTyp = ModelDoc2.GetType ' Get doc type If FileTyp = swDocASSEMBLY Or FileTyp = swDocPART Then ' Doc model? numConfigs = ModelDoc2.GetConfigurationCount() ' Get # configs If numConfigs > 1 Then ' Check # configs FormDeleteConfigs.Show Else ' Else # config MsgBox \"Only one configuration exists in this model.\" End If ' End # config Else ' Else doc type MsgBox \"Active file is not a SolidWorks model.\" End If ' End doc type End If ' End doc load End Sub VBA UserForm Code '------------------------------------------------------------------------------ ' DeleteAllConfigs.swp '------------------------------------------------------------------------------ Private Sub CheckDeleteConfigs_Click() ProcessCheck End Sub Private Sub CheckKeepConfig_Click() ProcessCheck End Sub Private Sub ProcessCheck() If CheckDeleteConfigs = True And CheckKeepConfig = True Then CommandDelete.Enabled = True Else CommandDelete.Enabled = False End If End Sub Private Sub CommandCancel_Click() End End Sub Private Sub CommandDelete_Click() ConfigNames = ModelDoc2.GetConfigurationNames() For i = 0 To (numConfigs - 1) ' For each config If ConfigNames(i) <> CurrentConfigName Then ' Not active conf ModelDoc2.DeleteConfiguration2 ConfigNames(i) ' delete config DelCount = DelCount + 1 ' Inc del counter LabelConfigsDeleted = \"Processing: \" + Str(DelCount) + \" configurations.\" FormDeleteConfigs.Repaint End If ' active config Next ' Get next config Configuration.Name = \"Default\" ' Set config to Configuration.AlternateName = \"Default\" ' \"Default\" & Configuration.UseAlternateNameInBOM = 0 ' AlternateName DelCount = (DelCount + 1) - ModelDoc2.GetConfigurationCount() LabelConfigsDeleted = \"Done: \" + Str(DelCount) + \" configurations deleted.\" CheckDeleteConfigs.Enabled = False CheckKeepConfig.Enabled = False CommandDelete.Enabled = False CommandCancel.Caption = \"Close\" End Sub Private Sub UserForm_Initialize() ProcessCheck CheckDeleteConfigs.Caption = \"Delete up to \" + Str(ModelDoc2.GetConfigurationCount()) _ + \" configurations from this model.\" Set Configuration = ModelDoc2.GetActiveConfiguration CheckKeepConfig.Caption = \"Keep configuration: '\" + Configuration.Name + \"'\" LabelConfigsDeleted = \"\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DeleteRedundantFeatures.html": {
    "href": "src/DeleteRedundantFeatures.html",
    "title": "Delete Features with No Children Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Delete Features with No Children Macro for SolidWorks Description This macro identifies and allows users to delete features with no children (redundant features) in a SolidWorks model. The macro supports features like planes, coordinate systems, axes, sketches, and more. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part document must be open in SolidWorks. The macro works only on features that have no dependencies. Results Note A user interface lists redundant features. Users can select features to delete directly from the interface. Steps to Setup the Macro 1. Create the Form in the VBA Editor: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the VBA editor, go to Insert > UserForm to create a new form. Add the following elements to the form: ListBox: Name: ListBox1 Positioned to display feature names. Command Buttons: Delete Button: Name: CommandButton1 Caption: Delete Cancel Button: Name: CommandButton2 Caption: Cancel Adjust the form’s caption to Delete features with no children. Save the macro project. 2: Run the Macro Open a part document in SolidWorks. Run the macro. The form will display all redundant features. Select the features you want to delete and click Delete. VBA Macro Code DeleteRedundantFeatures Module ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swFeat As SldWorks.Feature ' Feature object Dim swPart As SldWorks.PartDoc ' Part document object Dim sFeatName() As String ' Array to store feature names ' Populate the dialog box with features Sub populate() ReDim sFeatName(0) ' Initialize the feature name array Dialog.ListBox1.Clear ' Clear existing items in the ListBox ' Get the first feature in the model Set swFeat = swModel.FirstFeature ' Traverse through all features in the model Do While Not swFeat Is Nothing FeatureHasChildren swFeat ' Check if the feature has children and process it Set swFeat = swFeat.GetNextFeature ' Move to the next feature Loop End Sub ' Check if a feature has children and add it to the ListBox if applicable Sub FeatureHasChildren(feature As SldWorks.Feature) Dim childArray As Variant Dim featType As String childArray = feature.GetChildren ' Get child features ' Skip features with children If Not IsEmpty(childArray) Then Exit Sub featType = \"\" ' Initialize feature type ' Map feature type names to human-readable labels If feature.GetTypeName = \"RefPlane\" Then featType = \"Plane\" If feature.GetTypeName = \"CoordSys\" Then featType = \"CSYS\" If feature.GetTypeName = \"RefAxis\" Then featType = \"Axis\" If feature.GetTypeName = \"ProfileFeature\" Then featType = \"Sketch\" If feature.GetTypeName = \"3DProfileFeature\" Then featType = \"3D Sketch\" If feature.GetTypeName = \"RefPoint\" Then featType = \"Point\" ' Add feature to the ListBox and array if it matches one of the predefined types If Not featType = \"\" Then sFeatName(UBound(sFeatName)) = feature.Name ReDim Preserve sFeatName(UBound(sFeatName) + 1) ' Resize array to accommodate the next feature Dialog.ListBox1.AddItem feature.Name & \" (\" & featType & \")\" ' Add to ListBox Dialog.ListBox1.Selected(Dialog.ListBox1.ListCount - 1) = True ' Preselect in ListBox End If End Sub ' Delete selected features from the ListBox Sub DeleteFeatures() Set swPart = swModel ' Set the active document as the part object swModel.ClearSelection ' Clear any existing selection in the model Dim i As Integer Dim bRet As Boolean ' Iterate through the ListBox to find selected items For i = 0 To Dialog.ListBox1.ListCount - 1 If Dialog.ListBox1.Selected(i) = True Then ' Get the feature by name and delete it Set swFeat = swPart.FeatureByName(sFeatName(i)) If Not swFeat Is Nothing Then bRet = swFeat.Select2(True, 0) ' Select the feature bRet = swModel.DeleteSelection(False) ' Delete the selected feature End If End If Next populate ' Refresh the ListBox End Sub ' Main entry point of the macro Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure a document is open If swModel Is Nothing Then MsgBox \"Model Player requires an active part\", vbCritical Exit Sub End If populate ' Populate the ListBox with features Dialog.Show ' Display the dialog box End Sub VBA UserForm Code Option Explicit Private Sub CommandButton1_Click() ' Execute the DeleteFeatures subroutine DeleteRedundantFeatures.DeleteFeatures End Sub Private Sub CommandButton2_Click() ' Exit the macro Unload Me End End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DeleteSelectConfigs.html": {
    "href": "src/DeleteSelectConfigs.html",
    "title": "DeleteSelectConfigs Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "DeleteSelectConfigs Macro for SolidWorks Description This macro provides functionalities for deleting unwanted configurations from SolidWorks models. It allows users to selectively clear configurations or reset them to a default state, improving management of configuration clutter within SolidWorks documents. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A part or assembly must be open in SolidWorks with multiple configurations available. The macro should be executed within the SolidWorks environment. Results Selectively deletes configurations based on user input. Provides options to reset the current configuration to a default configuration. Updates the number of configurations dynamically and displays the deletion status. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, right-click on the project (e.g., DeleteSelectConfigs) and select Insert > UserForm. Rename the form to FormDeleteConfig. Design the form with the following components: A ListBox named ListBoxConfigurations to display configuration names. Two CheckBoxes for 'Select all configurations' and 'Clear all configurations'. A TextBox for filtering configurations by name. Buttons: Reset, About, Delete, and Cancel. Add VBA Code: Insert the macro code provided into the appropriate modules. Implement event handlers for form controls such as buttons, checkboxes, and list boxes. Save and Run the Macro: Save the macro file (e.g., DeleteSelectConfigs.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will display a form that lists all configurations of the current document. Use the form controls to select configurations for deletion, set configurations to default, or filter configurations. Confirm deletions or resets as needed by clicking the respective buttons. VBA Macro Code '------------------------------------------------------------------------------- ' DeleteSelectConfigs.swp '------------------------------------------------------------------------------- Global swApp As Object Global ModelDoc2 As Object Global Configuration As Object Global FileTyp As String Global numConfigs As Integer Global ConfigNames As Variant Global Retval As Integer Global DelCount As Integer ' SolidWorks constants Global Const swDocPART = 1 Global Const swDocASSEMBLY = 2 Global Const swMbWarning = 1 Global Const swMbInformation = 2 Global Const swMbQuestion = 3 Global Const swMbStop = 4 Global Const swMbAbortRetryIgnore = 1 Global Const swMbOk = 2 Global Const swMbOkCancel = 3 Global Const swMbRetryCancel = 4 Global Const swMbYesNo = 5 Global Const swMbYesNoCancel = 6 Global Const swMbHitAbort = 1 Global Const swMbHitIgnore = 2 Global Const swMbHitNo = 3 Global Const swMbHitOk = 4 Global Const swMbHitRetry = 5 Global Const swMbHitYes = 6 Global Const swMbHitCancel = 7 Global Const version = \"1.50\" '------------------------------------------------------------------------------ ' Delete extra configurations from model and set current config to Default '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set ModelDoc2 = swApp.ActiveDoc ' Grab active doc If ModelDoc2 Is Nothing Then ' Is doc loaded MsgBox \"No active part or assembly model found in SolidWorks.\" & Chr(13) & Chr(13) _ & \"Please load/activate a SolidWorks part or assembly \" & Chr(13) _ & \"model and try again.\", vbExclamation Else ' Doc loaded? FileTyp = ModelDoc2.GetType ' Get doc type If FileTyp = swDocASSEMBLY Or FileTyp = swDocPART Then ' Doc model? numConfigs = ModelDoc2.GetConfigurationCount() ' Get # configs If numConfigs > 1 Then ' Check # configs FormDeleteConfig.Show Else ' Else # config MsgBox \"Only one configuration exists in this model.\", vbExclamation End If ' End # config Else ' Else doc type MsgBox \"Active document is not a SolidWorks part or assembly model.\" _ & Chr(13) & Chr(13) _ & \"Please load/activate a SolidWorks model and try again.\", _ vbExclamation End If ' End doc type End If ' End doc load End Sub VBA UserForm Code '------------------------------------------------------------------------------- ' DeleteSelectConfigs.swp '------------------------------------------------------------------------------- Dim DelCount As Integer Private Sub CheckClearAll_Click() For x = 0 To ListBoxConfigurations.ListCount - 1 ' Each config ListBoxConfigurations.Selected(x) = False ' Clear select Next x CheckSelectAll = False ' Clear check CheckClearAll = False ' Clear check End Sub Private Sub CheckSelectAll_Click() For x = 0 To ListBoxConfigurations.ListCount - 1 ' Each config ListBoxConfigurations.Selected(x) = True ' Set select Next x CheckSelectAll = False ' Clear check CheckClearAll = False ' Clear check End Sub Private Sub CheckBoxSelectFilter_Click() If CheckBoxSelectFilter = True Then TextBoxFilter.Enabled = True TextBoxFilter.BackColor = vbWindowBackground CommandSelectFilter.Enabled = True Else TextBoxFilter.Enabled = False TextBoxFilter.BackColor = vbButtonFace CommandSelectFilter.Enabled = False End If End Sub Private Sub CommandAbout_Click() FormAbout.Show End Sub Private Sub CommandSelectFilter_Click() For x = 0 To ListBoxConfigurations.ListCount - 1 ' Each config For y = 0 To Len(ListBoxConfigurations.List(x, 0)) - Len(TextBoxFilter) If UCase(Mid$(ListBoxConfigurations.List(x, 0), y + 1, Len(TextBoxFilter))) _ = UCase(TextBoxFilter) Then ListBoxConfigurations.Selected(x) = True ' Set select End If Next y Next x End Sub Private Sub CheckDeleteConfigs_Click() ProcessCheck End Sub Private Sub CheckKeepConfig_Click() ProcessCheck End Sub Private Sub CheckBoxReset_Click() CommandReset.Enabled = True End Sub Private Sub ProcessCheck() If CheckDeleteConfigs = True And CheckKeepConfig = True Then CommandDelete.Enabled = True Else CommandDelete.Enabled = False End If End Sub Private Sub CommandCancel_Click() End End Sub Private Sub CommandDelete_Click() ConfigNames = ModelDoc2.GetConfigurationNames() For i = 0 To ListBoxConfigurations.ListCount - 1 ' For each config in list If ListBoxConfigurations.Selected(i) = True Then ' If selected ModelDoc2.DeleteConfiguration2 ListBoxConfigurations.List(i) ' delete config DelCount = DelCount + 1 ' Inc del counter LabelConfigsDeleted = LTrim(Str(DelCount)) + \" configurations processed.\" FormDeleteConfig.Repaint End If ' active config Next ' Get next config numConfigs = numConfigs - ModelDoc2.GetConfigurationCount() LabelConfigsDeleted = \"Done: \" + LTrim(Str(numConfigs)) _ + \" configurations deleted.\" UserForm_ReInitialize End Sub Private Sub CommandReset_Click() If CheckBoxReset = True Then Configuration.Name = \"Default\" ' Set config to Configuration.AlternateName = \"Default\" ' \"Default\" & Configuration.UseAlternateNameInBOM = 0 ' AlternateName End If CheckBoxReset.Value = False CheckBoxReset.Enabled = False CommandReset.Enabled = False LabelConfigsDeleted = \"Configuration reset to 'Default'.\" End Sub Private Sub UserForm_ReInitialize() ListBoxConfigurations.Clear Set Configuration = ModelDoc2.GetActiveConfiguration CurrentConfigName = Configuration.Name ConfigNames = ModelDoc2.GetConfigurationNames() numConfigs = ModelDoc2.GetConfigurationCount() ' Get # configs For i = 0 To (numConfigs - 1) ' For each config If ConfigNames(i) <> CurrentConfigName Then ' Not active conf ListBoxConfigurations.AddItem ConfigNames(i) End If ' active config Next ' Get next config Set Configuration = ModelDoc2.GetActiveConfiguration If DelCount = 0 Then LabelConfigsDeleted = \"Current configuration: '\" + Configuration.Name _ + \"' cannot be deleted.\" End If DelCount = 0 CommandReset.top = CommandDelete.top CheckBoxReset.top = CheckBoxSelectFilter.top If ModelDoc2.GetConfigurationCount() = 1 Then CheckBoxReset.Visible = True ListBoxConfigurations.Enabled = False ListBoxConfigurations.BackColor = vbButtonFace CommandReset.Visible = True CommandDelete.Visible = False CheckBoxSelectFilter.Visible = False TextBoxFilter.Visible = False CommandSelectFilter.Visible = False CheckSelectAll.Visible = False CheckClearAll.Visible = False Else CheckBoxReset.Visible = False CommandReset.Enabled = False CommandReset.Visible = False End If ' Sort entries in ListBoxConfigurations via simple bubble sort technique. For x = 0 To ListBoxConfigurations.ListCount - 2 ' Number of passes For y = 0 To ListBoxConfigurations.ListCount - 2 ' Pass thru each row If ListBoxConfigurations.List(y, 0) _ > ListBoxConfigurations.List(y + 1, 0) Then ' If greater, re-order Temp = ListBoxConfigurations.List(y, 0) ' Re-order entries ListBoxConfigurations.List(y, 0) = ListBoxConfigurations.List(y + 1, 0) ListBoxConfigurations.List(y + 1, 0) = Temp End If ' Re-order check Next y ' Pass thru each row Next x ' Number of passes End Sub Private Sub UserForm_Initialize() FormDeleteConfig.Caption = FormDeleteConfig.Caption & \" \" & version FormDeleteConfig.Height = 298 UserForm_ReInitialize End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/EditAllPatterns.html": {
    "href": "src/EditAllPatterns.html",
    "title": "Edit Linear Patterns in SolidWorks Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Edit Linear Patterns in SolidWorks Macro Description This macro allows users to edit linear patterns in parts and assemblies directly within SolidWorks. The macro searches for linear patterns and provides a PropertyManager Page interface to modify instance counts and spacing for each direction. It supports both part-level and assembly-level patterns. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part or assembly document must be active in SolidWorks. Linear patterns must exist in the feature tree of the active document. Results Note Identifies linear patterns in the active document. Displays a PropertyManager Page for editing pattern parameters (instances and spacing). Updates the document based on user modifications. Steps to Setup the Macro 1. Prepare the Document: Open the part or assembly containing linear patterns. 2. Run the Macro: Execute the macro. It will detect linear patterns in the feature tree and provide an interface to edit them. 3. Edit Patterns: Use the PropertyManager Page to adjust spacing and instance counts for the linear patterns. VBA Macro Code Main Macro ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables for SolidWorks application and pattern features Public swApp As SldWorks.SldWorks ' SolidWorks application object Dim swPatternFeats() As SldWorks.Feature ' Array for linear pattern features in a part Dim swComponentPatterns() As SldWorks.Feature ' Array for component patterns in an assembly Dim pm_page As EditPatternPropertyPage ' Property manager page instance Dim swPatStep As Integer ' Counter for patterns in part Dim swCompStep As Integer ' Counter for patterns in assembly Dim isPart As Boolean ' Boolean to check if the document is a part Dim mainAssy As String ' Path of the main assembly file ' Main subroutine Sub main() Dim swPart As SldWorks.ModelDoc2 Dim docType As Integer ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swPart = swApp.ActiveDoc ' Check if a document is open If swPart Is Nothing Then MsgBox \"No active file found. Please open a part or assembly document and try again.\", vbCritical, \"Error\" Exit Sub End If ' Check document type (part, assembly, or drawing) docType = swPart.GetType If docType = swDocDRAWING Then MsgBox \"This macro does not support drawings. Open a part or assembly and try again.\", vbCritical, \"Error\" Exit Sub End If ' Determine if the active document is a part or assembly isPart = (docType = swDocPART) If Not isPart Then mainAssy = swPart.GetPathName End If ' Rebuild the active document swPart.ForceRebuild3 True ' Create an instance of the property manager page Set pm_page = New EditPatternPropertyPage ' Traverse the document for pattern features Call Change_Patterns(swPart) End Sub ' Subroutine to find and process patterns in parts or assemblies Sub Change_Patterns(swPart As SldWorks.ModelDoc2) If swPart.GetType = swDocPART Then ' Handle patterns in a part document swPatStep = 0 swPatternFeats = TraverseFeatureFeatures(swPart) ' Get linear patterns If UBound(swPatternFeats) >= 0 Then ' Check if patterns were found Call ShowPropPage(\"PART\") ' Display PMP for parts End If Else ' Handle patterns in an assembly document mainAssy = swPart.GetPathName swComponentPatterns = TraverseAssemblyFeatures(swPart) ' Get component patterns If UBound(swComponentPatterns) >= 0 Then ' Check if patterns were found Call ShowPropPage(\"ASSEMBLY\") ' Display PMP for assemblies End If End If End Sub ' Function to traverse features in a part and find linear patterns Function TraverseFeatureFeatures(swPart As SldWorks.ModelDoc2) As Variant Dim PatternFeats() As SldWorks.Feature ' Array to store pattern features Dim tFeat As SldWorks.Feature ' Temporary feature object Dim isPattern As Boolean ' Flag to check if patterns are found ' Start with the first feature in the part Set tFeat = swPart.FirstFeature Do While Not tFeat Is Nothing ' Check if the feature is a linear pattern If tFeat.GetTypeName = \"LPattern\" Then ' Add the pattern to the array If Not isPattern Then ReDim PatternFeats(0) Else ReDim Preserve PatternFeats(UBound(PatternFeats) + 1) End If Set PatternFeats(UBound(PatternFeats)) = tFeat isPattern = True End If ' Move to the next feature Set tFeat = tFeat.GetNextFeature Loop ' Return the array of patterns or an empty array if none are found If isPattern Then TraverseFeatureFeatures = PatternFeats Else TraverseFeatureFeatures = Array() End If End Function PropertyManager Page Class Option Explicit Implements PropertyManagerPage2Handler5 ' PropertyManager Page and group variables Dim BoundingBoxPropPage As SldWorks.PropertyManagerPage2 ' Main PMP Dim grpOldPatternBox As SldWorks.PropertyManagerPageGroup ' Group for old pattern Dim grpNewPatternBox As SldWorks.PropertyManagerPageGroup ' Group for new pattern ' Controls for old pattern properties Dim lbld1A As SldWorks.PropertyManagerPageLabel ' Label for Dir 1 Spacing Dim numOldDir1Amount As SldWorks.PropertyManagerPageNumberbox ' NumberBox for Dir 1 Spacing Dim lbld1N As SldWorks.PropertyManagerPageLabel ' Label for Dir 1 Instances Dim numOldDir1Number As SldWorks.PropertyManagerPageNumberbox ' NumberBox for Dir 1 Instances Dim lbld2A As SldWorks.PropertyManagerPageLabel ' Label for Dir 2 Spacing Dim numOldDir2Amount As SldWorks.PropertyManagerPageNumberbox ' NumberBox for Dir 2 Spacing Dim lbld2N As SldWorks.PropertyManagerPageLabel ' Label for Dir 2 Instances Dim numOldDir2Number As SldWorks.PropertyManagerPageNumberbox ' NumberBox for Dir 2 Instances ' Public variables for storing pattern properties Public dir1OldAmount As Double, dir1OldNumber As Double ' Old Dir 1 properties Public dir2OldAmount As Double, dir2OldNumber As Double ' Old Dir 2 properties Public dir1NewAmount As Double, dir1NewNumber As Double ' New Dir 1 properties Public dir2NewAmount As Double, dir2NewNumber As Double ' New Dir 2 properties Public PatternName As String ' Name of the pattern ' PMP Initialization: Creates the UI Private Sub Class_Initialize() Dim options As Long Dim longerrors As Long ' Options for PMP (e.g., OK, Cancel buttons) options = swPropertyManager_OkayButton + swPropertyManager_CancelButton + SwConst.swPropertyManagerOptions_CanEscapeCancel ' Create the PMP Set BoundingBoxPropPage = swApp.CreatePropertyManagerPage(\"Edit Linear Patterns\", options, Me, longerrors) ' Add the Old Pattern Group Set grpOldPatternBox = BoundingBoxPropPage.AddGroupBox(1200, \"Current Pattern Amounts\", swGroupBoxOptions_Visible + swGroupBoxOptions_Expanded) ' Initialize controls for old pattern properties InitOldPatternControls End Sub ' Initialize controls for the Old Pattern group Private Sub InitOldPatternControls() Dim ju As Integer, lblType As Integer, conAlign As Integer, numType As Integer ju = SwConst.swControlOptions_Visible + SwConst.swControlOptions_Enabled lblType = SwConst.swPropertyManagerPageControlType_e.swControlType_Label conAlign = SwConst.swControlAlign_LeftEdge numType = SwConst.swPropertyManagerPageControlType_e.swControlType_Numberbox ' Direction 1 Spacing Set lbld1A = grpOldPatternBox.AddControl(1210, lblType, \"Dir 1 Spacing\", conAlign, ju, \"\") Set numOldDir1Amount = grpOldPatternBox.AddControl(1220, numType, \"Distance\", conAlign, ju, \"Distance\") numOldDir1Amount.Style = swPropMgrPageNumberBoxStyle_e.swPropMgrPageNumberBoxStyle_NoScrollArrows ' Direction 1 Instances Set lbld1N = grpOldPatternBox.AddControl(1230, lblType, \"Dir 1 Instances\", conAlign, ju, \"\") Set numOldDir1Number = grpOldPatternBox.AddControl(1240, numType, \"Distance\", conAlign, ju, \"Distance\") numOldDir1Number.SetRange2 swNumberBox_UnitlessInteger, 1, 100, True, 1, 1, 1 numOldDir1Number.Style = swPropMgrPageNumberBoxStyle_e.swPropMgrPageNumberBoxStyle_AvoidSelectionText numOldDir1Number.Value = 1 ' Direction 2 Spacing Set lbld2A = grpOldPatternBox.AddControl(1250, lblType, \"Dir 2 Spacing\", conAlign, ju, \"\") Set numOldDir2Amount = grpOldPatternBox.AddControl(1260, numType, \"Distance\", conAlign, ju, \"Distance\") numOldDir2Amount.Style = swPropMgrPageNumberBoxStyle_e.swPropMgrPageNumberBoxStyle_NoScrollArrows ' Direction 2 Instances Set lbld2N = grpOldPatternBox.AddControl(1270, lblType, \"Dir 2 Instances\", conAlign, ju, \"\") Set numOldDir2Number = grpOldPatternBox.AddControl(1280, numType, \"Distance\", conAlign, ju, \"Distance\") numOldDir2Number.SetRange2 swNumberBox_UnitlessInteger, 1, 100, True, 1, 1, 1 numOldDir2Number.Value = 1 End Sub ' Populate values in the PMP Private Sub GetMateValues() BoundingBoxPropPage.Title = \"Edit [\" & Me.PatternName & \"]\" numOldDir1Amount.Value = dir1OldAmount numOldDir2Amount.Value = dir2OldAmount numOldDir1Number.Value = dir1OldNumber numOldDir2Number.Value = dir2OldNumber End Sub ' Event: Called when PMP closes Private Sub PropertyManagerPage2Handler5_OnClose(ByVal Reason As Long) dir1OldAmount = numOldDir1Amount.Value dir2OldAmount = numOldDir2Amount.Value dir1OldNumber = numOldDir1Number.Value dir2OldNumber = numOldDir2Number.Value End Sub ' Display the PropertyManager Page Sub Show() Call GetMateValues BoundingBoxPropPage.Show End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/EditSketch.html": {
    "href": "src/EditSketch.html",
    "title": "Edit Sketch Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Edit Sketch Macro for SolidWorks Description This macro automates sketch editing within SolidWorks based on the active document and the selected entities. It adjusts the view to normal for an active sketch or exits the sketch if the view is already normal. The macro supports resolving selected subcomponents and digging into the sketch hierarchy for more complex features. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An active part or assembly document must be open in SolidWorks. A feature, face, edge, or sketch should be selected for proper operation. Results Note Edits the driving sketch of the selected feature or geometry and makes the view normal. Exits the active sketch if already in a normal view. Automatically resolves selected subcomponents if suppressed. Steps to Setup the Macro 1. Run the Macro: Execute the macro while a SolidWorks document is active. Ensure that the document type is supported (part or assembly) and appropriate entities are selected. 2. Behavior Based on Selection: If a feature or geometry is selected, the macro opens the driving sketch and adjusts the view. If no entities are selected, and the sketch is active, the macro adjusts the view to normal. If the view is already normal, the macro exits the sketch. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define a structure for storing view data Type ViewData ViewScale As Double ' Scale of the view Orientation As SldWorks.MathTransform ' Orientation transformation matrix Translation As SldWorks.MathVector ' Translation vector End Type ' Enum for comparison results between two views Enum CompareViewResult_e Same = 0 ' Views are identical DiffOrientation = 2 ^ 0 ' Different orientations difftranslation = 2 ^ 1 ' Different translations diffscale = 2 ^ 2 ' Different scales End Enum ' Debugging constants and tolerance Const Bug As Boolean = False ' Debug output flag Const Tol As Integer = 2 ' Tolerance for comparisons Sub main() On Error Resume Next Dim swApp As SldWorks.SldWorks Dim swDoc As SldWorks.ModelDoc2 Dim SelMgr As SldWorks.SelectionMgr Dim swFeat As SldWorks.Feature Dim swSelType As Long Dim StartView As ViewData Dim CurView As ViewData Dim compRes As CompareViewResult_e ' Initialize SolidWorks objects Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc Set SelMgr = swDoc.SelectionManager StartView = GetViewData(swDoc.ActiveView) ' Check if a sketch is active If Not swDoc.GetActiveSketch2 Is Nothing Then ' No selection: Align view \"normal to\" the sketch If SelMgr.GetSelectedObjectCount2(-1) < 1 Then swDoc.ShowNamedView2 \"*Normal To\", -1 CurView = GetViewData(swDoc.ActiveView) compRes = CompareViewData(StartView, CurView, Tol) If compRes = Same Then swDoc.SketchManager.InsertSketch True Exit Sub End If Else swDoc.SketchManager.InsertSketch True End If End If ' Resolve selected feature or entity swSelType = SelMgr.GetSelectedObjectType3(1, -1) Select Case swSelType Case swSelFACES, swSelEDGES Set swFeat = SelMgr.GetSelectedObject6(1, -1).GetFeature If swFeat Is Nothing Then Exit Sub Case swSelBODYFEATURES, swSelSKETCHES Set swFeat = SelMgr.GetSelectedObject6(1, -1) Case Else Exit Sub End Select ' Edit sketch or feature If swFeat.GetTypeName = \"ProfileFeature\" Then swDoc.EditSketchOrSingleSketchFeature Else swDoc.FeatEdit End If ' Align view to \"normal to\" if a sketch is active If Not swDoc.GetActiveSketch2 Is Nothing Then swDoc.ShowNamedView2 \"*Normal To\", -1 End If ' Clear selections swDoc.ClearSelection2 True End Sub ' Function to get view data (scale, orientation, translation) Private Function GetViewData(view As SldWorks.ModelView) As ViewData Dim data As ViewData Set data.Orientation = view.Orientation3 ' Get orientation matrix Set data.Translation = view.Translation3 ' Get translation vector data.ViewScale = view.Scale2 ' Get view scale GetViewData = data End Function ' Function to compare two sets of view data Private Function CompareViewData(firstViewData As ViewData, secondViewData As ViewData, Tol As Integer) As CompareViewResult_e Dim res As CompareViewResult_e res = Same ' Compare orientation If Not CompareArrays(firstViewData.Orientation.ArrayData, secondViewData.Orientation.ArrayData, Tol) Then res = res + DiffOrientation End If ' Compare translation If Not CompareArrays(firstViewData.Translation.ArrayData, secondViewData.Translation.ArrayData, Tol) Then res = res + difftranslation End If ' Compare scale If Not TolerantEqual(firstViewData.ViewScale, secondViewData.ViewScale, Tol) Then res = res + diffscale End If CompareViewData = res End Function ' Function to compare arrays with tolerance Private Function CompareArrays(firstArr As Variant, secondArr As Variant, Tol As Integer) As Boolean If UBound(firstArr) = UBound(secondArr) Then Dim i As Integer For i = 0 To UBound(firstArr) If Not TolerantEqual(firstArr(i), secondArr(i), Tol) Then CompareArrays = False Exit Function End If Next CompareArrays = True Else CompareArrays = False End If End Function ' Function to compare two numbers with tolerance Private Function TolerantEqual(a As Variant, b As Variant, Tol As Integer) As Boolean TolerantEqual = Abs(a - b) <= Abs(a / 10 ^ Tol) ' Compare within tolerance End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExplodeCollapse.html": {
    "href": "src/ExplodeCollapse.html",
    "title": "Explode/Collapse Toggle Macro for SolidWorks Assemblies | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Explode/Collapse Toggle Macro for SolidWorks Assemblies Description This macro toggles the explode or collapse state of the first exploded view found in the active configuration of an assembly document in SolidWorks. It is useful for quickly changing the view state of an assembly to better visualize the layout and positioning of components. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly should have at least one exploded view in its active configuration. Results Note Toggles the first exploded view of the assembly to either an exploded or collapsed state, depending on its current state. Steps to Setup the Macro Create the VBA Module: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project and copy the provided macro code into this module. Run the Macro: Ensure that an assembly with at least one exploded view is open. Execute the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your macro file. Using the Macro: The macro automatically checks the first exploded view in the active configuration and toggles its state. No user interaction is required beyond starting the macro. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ******************************************************************************* ' This macro toggles the explode/collapse state of the first exploded view ' in the active configuration of an assembly document. ' ******************************************************************************* ' Declare variables for SolidWorks objects and operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' ModelDocExtension object Dim swAssembly As SldWorks.AssemblyDoc ' Assembly document object Dim swConfigMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConfig As SldWorks.Configuration ' Active configuration object Dim activeConfigName As String ' Name of the active configuration Dim viewNames As Variant ' Array of exploded view names Dim viewName As String ' Individual exploded view name Dim i As Long ' Loop counter Dim xViewCount As Long ' Number of exploded views in the configuration Dim boolstatus As Boolean ' Boolean for operation success ' Main subroutine Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if the active document is an assembly If (swModel.GetType <> swDocASSEMBLY) Then Exit Sub ' Cast the active document as an assembly Set swAssembly = swModel ' Get the active configuration name Set swConfigMgr = swModel.ConfigurationManager Set swConfig = swConfigMgr.ActiveConfiguration activeConfigName = swConfig.Name ' Get the number of exploded views in the active configuration xViewCount = swAssembly.GetExplodedViewCount2(activeConfigName) If xViewCount < 1 Then End ' Exit if no exploded views exist ' Retrieve the names of the exploded views in the active configuration viewNames = swAssembly.GetExplodedViewNames2(activeConfigName) ' Select the first exploded view in the list boolstatus = swAssembly.Extension.SelectByID2(viewNames(0), \"EXPLODEDVIEWS\", 0, 0, 0, False, 0, Nothing, 0) If boolstatus = False Then End ' Exit if the selection fails ' Check if the assembly is currently exploded or collapsed boolstatus = swAssembly.IsExploded ' Toggle the explode/collapse state based on the current state If boolstatus = False Then swAssembly.ViewExplodeAssembly ' Explode the assembly Else swAssembly.ViewCollapseAssembly ' Collapse the assembly End If ' Clear the selection to finish the operation swAssembly.ClearSelection2 True ' Clean up references and end the macro Set swModel = Nothing Set swAssembly = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Explode_Collapse.html": {
    "href": "src/Explode_Collapse.html",
    "title": "Exploded View Toggle Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Exploded View Toggle Macro for SolidWorks Description This macro automates the process of toggling the exploded view state of an active assembly in SolidWorks. It checks if an exploded view exists and then either explodes or collapses it based on its current state. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly should have at least one exploded view configured. Results Note Toggles the state of the first exploded view found in the active configuration of the assembly. Either explodes or collapses the assembly view depending on its initial state. Steps to Setup the Macro Create the VBA Module: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project. Run the Macro: Ensure that an assembly with an exploded view is open. Execute the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your macro file. Using the Macro: The macro checks for the presence of an exploded view and changes its state. No user interaction is required apart from initiating the macro. VBA Macro Code Main Subroutine ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' Declare variables for SolidWorks objects and operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' ModelDocExtension object Dim swAssembly As SldWorks.AssemblyDoc ' Assembly document object Dim swConfigMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConfig As SldWorks.Configuration ' Active configuration object Dim activeConfigName As String ' Name of the active configuration Dim viewNames As Variant ' Array of exploded view names Dim viewName As String ' Individual exploded view name Dim i As Long ' Loop counter Dim xViewCount As Long ' Number of exploded views in the configuration Dim boolstatus As Boolean ' Boolean for operation success ' Main subroutine Sub main() ' Initialize the SolidWorks application and active document objects Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly If (swModel.GetType <> swDocASSEMBLY) Then Exit Sub ' Cast the active document as an assembly Set swAssembly = swModel ' Get the active configuration name Set swConfigMgr = swModel.ConfigurationManager Set swConfig = swConfigMgr.ActiveConfiguration activeConfigName = swConfig.Name ' Get the number of exploded views in the active configuration xViewCount = swAssembly.GetExplodedViewCount2(activeConfigName) If xViewCount < 1 Then End ' Exit if no exploded views exist ' Retrieve the names of the exploded views in the active configuration viewNames = swAssembly.GetExplodedViewNames2(activeConfigName) ' Select the first exploded view in the list boolstatus = swAssembly.Extension.SelectByID2(viewNames(0), \"EXPLODEDVIEWS\", 0, 0, 0, False, 0, Nothing, 0) If boolstatus = False Then End ' Exit if the selection fails ' Check if the assembly is currently exploded or collapsed boolstatus = swAssembly.IsExploded ' Toggle the explode/collapse state based on the current state If boolstatus = False Then swAssembly.ViewExplodeAssembly ' Explode the assembly Else swAssembly.ViewCollapseAssembly ' Collapse the assembly End If ' Clear the selection to finish the operation swAssembly.ClearSelection2 True ' Clean up references and end the macro Set swModel = Nothing Set swAssembly = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Export Flat Pattern View (Configurations).html": {
    "href": "src/Export Flat Pattern View (Configurations).html",
    "title": "Export Flat Pattern Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Flat Pattern Macro Description This macro exports the flat pattern view of all configurations in an open sheet metal part as DXF files. The DXF files are saved in the same directory as the part file with the configuration name appended to the file name. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A sheet metal part must be open in SolidWorks. The document must be a valid part file. Results Note Flat pattern DXF files are created for all configurations in the part file. The files are saved in the same directory as the part file. Steps to Use the Macro 1. Open a Sheet Metal Part Ensure the active document in SolidWorks is a sheet metal part. 2. Execute the Macro Run the macro to generate DXF files for each configuration in the part. 3. Verify Exported Files Check the directory containing the part file for the generated DXF files. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare variables for SolidWorks application and active document Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim vConfNameArr As Variant ' Array to hold configuration names Dim sConfigName As String ' Current configuration name Dim i As Long ' Loop counter Dim bShowConfig As Boolean ' Flag for showing configuration Dim bRebuild As Boolean ' Flag for rebuilding the model Dim bRet As Boolean ' Flag for export success Dim FilePath As String ' File path of the part Dim PathSize As Long ' Length of the file path Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' File path for the new DXF file ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is active If swModel Is Nothing Then MsgBox \"No document is open. Please open a sheet metal part and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Validate if the document is a part If swModel.GetType <> swDocPART Then MsgBox \"This macro only supports sheet metal parts. Please open a sheet metal part and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Get the file path of the active part FilePath = swModel.GetPathName If FilePath = \"\" Then MsgBox \"The part must be saved before running the macro.\", vbExclamation, \"Error\" Exit Sub End If ' Get the list of all configuration names in the part vConfNameArr = swModel.GetConfigurationNames ' Loop through each configuration For i = 0 To UBound(vConfNameArr) sConfigName = vConfNameArr(i) ' Current configuration name ' Show the configuration bShowConfig = swModel.ShowConfiguration2(sConfigName) ' Rebuild the model to ensure the configuration is up-to-date bRebuild = swModel.ForceRebuild3(False) ' Construct the file path for the DXF file PathSize = Strings.Len(FilePath) ' Get the length of the file path PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Remove extension from file path NewFilePath = PathNoExtension & \"_\" & sConfigName & \".DXF\" ' Append configuration name and DXF extension ' Export the flat pattern as a DXF file bRet = swModel.ExportFlatPatternView(NewFilePath, 1) ' Check if the export was successful and log the result If bRet Then Debug.Print \"Successfully exported: \" & NewFilePath Else MsgBox \"Failed to export flat pattern for configuration: \" & sConfigName, vbExclamation, \"Export Error\" End If Next i ' Notify the user of successful completion MsgBox \"Flat patterns exported successfully for all configurations.\", vbInformation, \"Export Complete\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportFlatToDxfFromAssembly.html": {
    "href": "src/ExportFlatToDxfFromAssembly.html",
    "title": "Traverse Assembly and Save Parts as DXF | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly and Save Parts as DXF Description This macro traverses the active assembly and saves all its child components (parts) as DXF files in the specified folder. It recursively traverses through the assembly hierarchy, flattens any sheet metal parts, and exports the flat pattern as a DXF file. This macro is designed to streamline the export process for sheet metal parts. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. Sheet metal parts should be set up correctly for flattening and exporting. A folder path must be provided where the DXF files will be saved. Results Note All sheet metal parts within the active assembly are exported as DXF files. The DXF files will be saved in the specified folder. The macro will skip any parts that are not sheet metal. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to start the process and get user input for save path ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim savepath As String ' User input for the folder path to save DXF files ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the currently active document Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Prompt user for the folder path to save DXF files savepath = InputBox(\"Where do you want to save the DXF files?\") ' Call the traverse function to iterate through components and export DXF files traverse swModel, savepath End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly components and export parts ' -------------------------------------------------------------------------- Function traverse(Pathname As ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Model document object Dim swRootComp As SldWorks.Component2 ' Root component of the assembly Dim swConf As SldWorks.Configuration ' Configuration of the active assembly Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager of the active assembly Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Child component object Dim i As Long ' Loop counter for iterating through child components ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Set the active model to the passed Pathname parameter Set swModel = Pathname ' Get the configuration manager and active configuration of the model Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration ' Get the root component of the assembly Set swRootComp = swConf.GetRootComponent3(True) ' Get the children components of the root component vChildComp = swRootComp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Get the model document of the child component Set swModel = swChildComp.GetModelDoc2 ' If the child component is a part, traverse further or export as DXF If Not swModel Is Nothing Then ' Check if the component is an assembly (type 2 = swDocASSEMBLY) If swModel.GetType = 2 Then traverse swModel, savepath ' Recursively traverse through sub-assemblies ' If the component is a part, flatten and export as DXF Else flat swModel, savepath End If End If Next i End Function ' -------------------------------------------------------------------------- ' Function to flatten sheet metal parts and save as DXF ' -------------------------------------------------------------------------- Sub flat(swModel As SldWorks.ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swFeat As SldWorks.Feature ' Feature object to access flat pattern feature Dim swFlat As SldWorks.Feature ' Flat pattern feature object ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the first feature in the part Set swFeat = swModel.FirstFeature ' Loop through each feature to find the \"FlatPattern\" feature Do While Not swFeat Is Nothing ' Check if the feature is a \"FlatPattern\" feature If swFeat.GetTypeName = \"FlatPattern\" Then ' Un-suppress the flat pattern swFeat.Select (True) swModel.EditUnsuppress2 ' Export the part as a DXF file dxf swModel, savepath ' Re-suppress the flat pattern swFeat.Select (True) swModel.EditSuppress2 End If ' Move to the next feature in the model Set swFeat = swFeat.GetNextFeature Loop End Sub ' -------------------------------------------------------------------------- ' Function to export the flat pattern of the part as a DXF file ' -------------------------------------------------------------------------- Public Function dxf(swModel As SldWorks.ModelDoc2, savepath As String) ' Declare necessary variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swPart As SldWorks.PartDoc ' Part document object Dim sModelName As String ' Model name of the part Dim sPathName As String ' Path name of the DXF file Dim varAlignment As Variant ' Alignment data for exporting Dim dataAlignment(11) As Double ' Alignment data array Dim varViews As Variant ' Views data for exporting Dim dataViews(1) As String ' Views data array Dim options As Long ' Export options ' Initialize SolidWorks application Set swApp = Application.SldWorks swApp.ActivateDoc swModel.GetPathName ' Check if the part is in the bent state (flat pattern should be unsuppressed) If swModel.GetBendState <> 2 Then Exit Function End If ' Get the model name and set the path for DXF file sModelName = swModel.GetPathName sPathName = savepath & \"\\\" & swModel.GetTitle & \".dxf\" ' Set alignment and view data for DXF export dataAlignment(0) = 0#: dataAlignment(1) = 0#: dataAlignment(2) = 0# dataAlignment(3) = 1#: dataAlignment(4) = 0#: dataAlignment(5) = 0# dataAlignment(6) = 0#: dataAlignment(7) = 1#: dataAlignment(8) = 0# dataAlignment(9) = 0#: dataAlignment(10) = 0#: dataAlignment(11) = 1# varAlignment = dataAlignment dataViews(0) = \"*Current\" dataViews(1) = \"*Front\" varViews = dataViews ' Export the flat pattern of the sheet metal part to DXF file options = 13 ' Export options for flat pattern geometry, bend lines, and sketches swPart.ExportToDWG sPathName, sModelName, 1, True, varAlignment, False, False, options, Null ' Close the part document after exporting swApp.CloseDoc (swModel.GetPathName) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportSketchToDxf.html": {
    "href": "src/ExportSketchToDxf.html",
    "title": "Export Custom-Named Sketches to DXF | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Custom-Named Sketches to DXF Description This macro hides all the bodies and sketches in the active part, then looks at all features to identify custom-named sketches. For each custom-named sketch, the macro will unhide the sketch, view normal to its plane, insert the view into a new drawing, set the scale to 1:1, save the drawing as a DXF file, and then close the drawing. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. Sketches should be custom-named for the macro to process them individually. The macro assumes that a drawing template is available and accessible to create the new drawings. Results Note All bodies and sketches in the part are hidden. Custom-named sketches are displayed and exported as DXF files. Each sketch view is set to a 1:1 scale in the drawing before saving. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to process custom-named sketches and export as DXF ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim PART As SldWorks.PartDoc ' Part document object Dim swModel As SldWorks.ModelDoc2 ' Model document object for the part Dim featmgr As SldWorks.FeatureManager ' Feature manager object to access features Dim feat As Variant ' Individual feature object Dim feats As Variant ' Array of features in the part Dim selmgr As SldWorks.SelectionMgr ' Selection manager object Dim swbody As Variant ' Individual body object Dim bodies As Variant ' Array of bodies in the part Dim body As SldWorks.Body2 ' Body object in the part Dim LONGSTATUS As Long ' Long variable for capturing status Dim DRAW As SldWorks.DrawingDoc ' Drawing document object for new drawings Dim currentSheet As SldWorks.Sheet ' Current sheet object in the drawing Dim BOOLSTATUS As Boolean ' Boolean variable for operation results Dim myView As Object ' View object for creating drawing views Dim closedoc As ModelDoc2 ' Object to handle and close documents ' Initialize SolidWorks application and get the active part document Set swApp = Application.SldWorks Set PART = swApp.ActiveDoc Set swModel = swApp.ActiveDoc Set selmgr = swModel.SelectionManager Set featmgr = swModel.FeatureManager ' Hide all bodies in the active part bodies = PART.GetBodies2(swAllBodies, False) For Each swbody In bodies swbody.HideBody (True) Next ' Hide all sketches in the active part feats = featmgr.GetFeatures(False) For Each feat In feats If feat.GetTypeName = \"ProfileFeature\" Then feat.Select (False) ' Select the feature without adding to the current selection swModel.BlankSketch ' Hide the selected sketch End If Next ' Process each feature to identify and export custom-named sketches For Each feat In feats ' Check if the feature is a sketch and if it is custom-named (not containing \"Sketch\" in its name) If feat.GetTypeName = \"ProfileFeature\" And InStr(feat.Name, \"Sketch\") < 1 Then ' Unhide the custom-named sketch feat.Select (False) swModel.UnblankSketch ' Orient the view to be normal to the sketch plane feat.Select (False) swModel.Extension.RunCommand swCommands_NormalTo, \"\" ' Create a new drawing document for the sketch view Set DRAW = swApp.NewDocument(swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing), 2, 0.2794, 0.4318) ' Insert the current sketch view into the drawing Set myView = DRAW.CreateDrawViewFromModelView3(swModel.GetPathName, \"Current Model View\", 0, 0, 0) ' Set the scale of the drawing view to 1:1 Set currentSheet = DRAW.GetCurrentSheet BOOLSTATUS = currentSheet.SetScale(1, 1, True, False) ' Save the drawing as a DXF file in the same folder as the part Set closedoc = DRAW LONGSTATUS = closedoc.SaveAs3(Left(swModel.GetPathName, Len(swModel.GetPathName) - 7 - Len(GetTitle(swModel.GetPathName))) & GetTitle(swModel.GetPathName) & \" \" & feat.Name & \".DXF\", 0, 0) ' Close the drawing document after saving swApp.CloseDoc (closedoc.GetTitle) ' Hide the sketch again after exporting feat.Select (False) swModel.BlankSketch End If Next End Sub ' -------------------------------------------------------------------------- ' Function to extract the title (filename without extension) from the path ' -------------------------------------------------------------------------- Public Function GetTitle(Path As String) As String ' Declare necessary variables Dim path1 As Variant ' Array to hold path segments Dim title As String ' Extracted title (filename without extension) ' Split the path into segments based on \"\\\" path1 = Split(Path, \"\\\") ' Get the last segment of the path as the filename title = path1(UBound(path1)) ' Return the title without the file extension GetTitle = Left(title, InStr(title, \".\") - 1) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportToParasolid.html": {
    "href": "src/ExportToParasolid.html",
    "title": "Traverse Assembly and Save Parts as Parasolid (X_T) | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly and Save Parts as Parasolid (X_T) Description This macro traverses the active assembly and saves all child components (parts) as Parasolid files (X_T format) in the specified folder. It recursively traverses through the assembly hierarchy, ensuring that all parts are saved with their respective names. This macro simplifies the process of saving parts in an assembly by automatically exporting them to the desired location. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. A folder path must be provided where the Parasolid files will be saved. Results Note All parts within the active assembly are saved as Parasolid (X_T) files. The files will be saved in the specified folder with the same names as the parts. The macro will skip any parts that are already open or in a suppressed state. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and prompt the user for a save path ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim savepath As String ' User input for the folder path to save Parasolid files ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Prompt user for the folder path to save Parasolid files savepath = InputBox(\"Where do you want to save the Parasolid (X_T) files?\") ' Call the traverse function to iterate through components and save as Parasolid files traverse swApp.ActiveDoc, savepath End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly components and save parts ' -------------------------------------------------------------------------- Function traverse(Pathname As ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Model document object for components Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConf As SldWorks.Configuration ' Configuration object for the active configuration Dim swRootComp As SldWorks.Component2 ' Root component of the assembly Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Individual child component object Dim i As Long ' Loop counter for iterating through child components Dim longstatus As Long ' Status variable for capturing save operations ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = Pathname ' Set the model to the input pathname (active document) ' Get the configuration manager and active configuration of the model Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration ' Get the root component of the assembly Set swRootComp = swConf.GetRootComponent3(True) ' Get the child components of the root component vChildComp = swRootComp.GetChildren ' Loop through each child component in the assembly For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Set the child component ' Get the model document of the child component Set swModel = swChildComp.GetModelDoc2 ' If the child component is a part, traverse further or save as Parasolid (X_T) If Not swModel Is Nothing Then ' Check if the component is an assembly (type 2 = swDocASSEMBLY) If swModel.GetType = 2 Then ' Recursively traverse through sub-assemblies traverse swModel, savepath Else ' Save the part as a Parasolid (X_T) file in the specified folder longstatus = swModel.SaveAs3(savepath & \"\\\" & swModel.GetTitle & \".X_T\", 0, 0) End If End If Next i End Function ' -------------------------------------------------------------------------- ' Function to extract the title (filename without extension) from the path ' -------------------------------------------------------------------------- Public Function GetTitle(Path As String) As String ' Declare necessary variables Dim path1 As Variant ' Array to hold path segments Dim title As String ' Extracted title (filename without extension) ' Split the path into segments based on \"\\\" path1 = Split(Path, \"\\\") ' Get the last segment of the path as the filename title = path1(UBound(path1)) ' Return the title without the file extension GetTitle = Left(title, InStr(title, \".\") - 1) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportToParasolid2.html": {
    "href": "src/ExportToParasolid2.html",
    "title": "Save All Parts of an Assembly as Parasolid Files | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save All Parts of an Assembly as Parasolid Files Description This macro opens all parts of the currently active assembly and saves each part as a Parasolid file. It simplifies the process of exporting parts from an assembly by automatically saving them in the desired format. The macro should be used when the active document is an assembly, and it will save the parts in the specified location. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. All parts must be resolved (not in a suppressed or hidden state) to ensure successful export. The destination folder path must be valid and writable. Results Note All parts within the active assembly will be saved as Parasolid files in the specified folder. The files will be named according to the original part names and saved in the Parasolid (.X_T) format. A message box will be displayed if the document is not an assembly or if there is any issue during saving. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and save parts as Parasolid files ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (assembly) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim longstatus As Long, longwarnings As Long ' Long variables for capturing status and warnings ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the currently active document (assembly) Set Part = swApp.ActiveDoc ' Check if there is an active document open If Part Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If Part.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Save the assembly as a Parasolid file (change the path as needed) ' Note: Replace the path with a dynamic path or prompt for user input if required longstatus = Part.SaveAs3(\"C:\\Users\\pnovorolsky\\Music\\Para TEst\\1014016.X_T\", 0, 0) ' Check if the save operation was successful If longstatus = 0 Then MsgBox \"Parasolid file saved successfully.\", vbInformation, \"Save Successful\" Else MsgBox \"Failed to save the Parasolid file. Please check the file path or permissions.\", vbExclamation, \"Save Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/File Copy (with blank property values).html": {
    "href": "src/File Copy (with blank property values).html",
    "title": "Custom Properties and Save As Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Custom Properties and Save As Macro Description This macro automates the process of managing custom properties and saving a SolidWorks model with a new file name in a user-specified folder. It is particularly useful for standardizing and organizing files with consistent metadata and locations. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks model document must be open. The macro requires the user to input a new file name and select a target folder for saving the file. Results Note Existing custom properties (drawing number, old drawing number, search description, and material) are removed and replaced with new ones. The document is saved with the specified file name in the chosen folder. Steps to Setup the Macro 1. Run the Macro: The macro will prompt you to input a new file name. After entering the name, you will be asked to select a target folder using a folder browser dialog. The macro will then save the document with the specified name and add predefined custom properties. 2. Custom Property Management: You can edit the custom properties added by modifying the relevant lines in the macro code. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare SolidWorks application and model variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim retval As String Dim FileName As String Dim Path As String Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure a document is active If swModel Is Nothing Then MsgBox \"No active document found. Please open a SolidWorks file and try again.\", vbCritical, \"Error\" Exit Sub End If ' Remove existing custom properties retval = swModel.DeleteCustomInfo2(\"\", \"drawing number\") retval = swModel.DeleteCustomInfo2(\"\", \"old drawing number\") retval = swModel.DeleteCustomInfo2(\"\", \"search description\") retval = swModel.DeleteCustomInfo2(\"\", \"material\") ' Add new custom properties with default values retval = swModel.AddCustomInfo3(\"\", \"drawing number\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"old drawing number\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"search description\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"material\", swCustomInfoText, \"\"\"SW-Material\"\"\") ' Prompt user for a new file name FileName = InputBox(\"Enter the new file name\", \"Add New File Name\", FileName) If FileName = \"\" Then MsgBox \"File name cannot be empty. Please try again.\", vbExclamation, \"Error\" Exit Sub End If ' Prompt user for folder selection Path = BrowseFolder(\"Select a Folder/Path\") If Path = \"\" Then MsgBox \"You must select a valid folder to save the file.\", vbExclamation, \"Error\" Exit Sub End If ' Ensure the folder path ends with a backslash If Right(Path, 1) <> \"\\\" Then Path = Path & \"\\\" ' Save the file with the new name in the selected folder swModel.Extension.SaveAs Path & FileName & \".prt\", swSaveAsVersion_e.swSaveAsCurrentVersion, swSaveAsOptions_e.swSaveAsOptions_Copy, Nothing, 0, 0 ' Notify the user of successful save MsgBox \"File saved successfully at: \" & Path & FileName & \".prt\", vbInformation, \"Save Successful\" End Sub ' Function to open a folder browser dialog Function BrowseFolder(Optional Title As String) As String Dim SH As Object Dim F As Object ' Create Shell Application object Set SH = CreateObject(\"Shell.Application\") ' Open the folder browser dialog Set F = SH.BrowseForFolder(0, Title, 0) If Not F Is Nothing Then BrowseFolder = F.Items.Item.Path ' Get selected folder path Else BrowseFolder = \"\" ' Return empty if no folder selected End If End Function Folder Browser Module Code Option Explicit Private Const BIF_RETURNONLYFSDIRS As Long = &H1 Private Const MAX_PATH As Long = 260 ' Windows API declarations Declare Function SHGetPathFromIDListA Lib \"shell32.dll\" ( _ ByVal pidl As Long, _ ByVal pszBuffer As String) As Long Declare Function SHBrowseForFolderA Lib \"shell32.dll\" ( _ lpBrowseInfo As BrowseInfo) As Long ' Structure for folder browsing dialog Type BrowseInfo hOwner As Long pidlRoot As Long pszDisplayName As String lpszINSTRUCTIONS As String ulFlags As Long lpfn As Long lParam As Long iImage As Long End Type ' Function to display a folder selection dialog Function BrowseFolder(Optional Caption As String = \"Select a Folder\") As String Dim BrowseInfo As BrowseInfo Dim FolderName As String Dim ID As Long Dim Res As Long ' Initialize the BrowseInfo structure With BrowseInfo .hOwner = 0 .pidlRoot = 0 .pszDisplayName = String$(MAX_PATH, vbNullChar) .lpszINSTRUCTIONS = Caption .ulFlags = BIF_RETURNONLYFSDIRS End With ' Prepare a buffer for the folder path FolderName = String$(MAX_PATH, vbNullChar) ' Display the folder selection dialog ID = SHBrowseForFolderA(BrowseInfo) If ID Then ' Convert the PIDL to a file system path Res = SHGetPathFromIDListA(ID, FolderName) If Res Then BrowseFolder = Left$(FolderName, InStr(FolderName, vbNullChar) - 1) Else BrowseFolder = \"\" End If Else BrowseFolder = \"\" End If End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FormatLine.html": {
    "href": "src/FormatLine.html",
    "title": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing Description This macro applies custom line properties (color and width) to selected edges in a SolidWorks drawing. It helps users visually differentiate specific edges or lines in a drawing by changing their appearance based on the specified properties. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must select at least one edge in the drawing before running the macro. Results Note The selected edge(s) will have their line width and color updated based on the specified properties. A confirmation message will be shown if the operation is successful, or an error message if there are any issues. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare SolidWorks application object and initialize it Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks ' Get the currently active document Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Check if there is an active document If Not swModel Is Nothing Then ' Check if the active document is a drawing If swModel.GetType = swDocDRAWING Then ' Declare drawing document object and selection manager object Dim swDraw As SldWorks.DrawingDoc Set swDraw = swModel Dim swSelMgr As SldWorks.SelectionMgr Set swSelMgr = swModel.SelectionManager ' Check if any edge is selected in the drawing If swSelMgr.GetSelectedObjectCount2(-1) > 0 Then ' Specify custom line properties Dim edgeWidth As Double Dim edgeColor As Integer edgeWidth = 0.0007 ' Line width in meters (e.g., 0.0007m = 0.7mm) edgeColor = 255 ' Color in RGB (e.g., 255 = Red) ' Apply custom line width and color to the selected edge(s) swDraw.SetLineWidthCustom (edgeWidth) swDraw.SetLineColor edgeColor ' Notify the user of successful application MsgBox \"Line width and color applied successfully to the selected edge(s).\", vbInformation, \"Success\" Else ' Error message if no edge is selected MsgBox \"Please select at least one edge in the drawing to apply the properties.\", vbExclamation, \"No Edge Selected\" End If Else ' Error message if the active document is not a drawing MsgBox \"The active document is not a drawing. Please open a drawing and select an edge.\", vbExclamation, \"Invalid Document Type\" End If Else ' Error message if no document is open MsgBox \"No active document found. Please open a drawing and select an edge.\", vbExclamation, \"No Active Document\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FullyDefineAllPartSketches.html": {
    "href": "src/FullyDefineAllPartSketches.html",
    "title": "Fully Define Under-Defined Sketches in Part Feature Tree | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Fully Define Under-Defined Sketches in Part Feature Tree Description This macro traverses the part feature tree and fully defines any sketch that is under-defined. It is particularly useful for automating the process of constraining sketches to ensure all dimensions and relations are applied correctly. The macro checks each sketch within the part and applies the FullyDefineSketch method if it is found to be under-defined. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. The part file must contain sketches or features with sketches (e.g., holes, extrudes). Ensure the part is open and active before running the macro. Results Note All under-defined sketches in the part will be fully defined with dimensions and relations. A confirmation message or error message will be displayed based on the operation's success. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part) Dim SelMgr As Object ' Selection manager object Dim boolstatus As Boolean ' Boolean status variable to capture operation results Dim longstatus As Long, longwarnings As Long ' Long status and warning variables for operations Dim Feature, swSketch As Object ' Feature and Sketch objects for iterating through features and accessing sketches Dim SubFeatSketch As Object ' Sub-feature sketch object for handling sketches inside features like Hole Wizard Dim SketchName, MsgStr, FeatType, SubFeatType As String ' Strings for storing feature names, types, and messages Dim EmptyStr, SubFeatName As String ' Empty strings for message formatting and sub-feature names Dim longSketchStatus As Long ' Status variable for checking if the sketch is fully defined ' -------------------------------------------------------------------------- ' Main subroutine to traverse the feature tree and fully define under-defined sketches ' -------------------------------------------------------------------------- Sub main() ' Initialize the SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc Set SelMgr = Part.SelectionManager ' Check if the active document is a part file longstatus = Part.GetType If longstatus <> 1 Then End ' Exit if the document type is not a part (1 = swDocPART) ' Get the first feature in the feature tree of the part Set Feature = Part.FirstFeature ' Loop through each feature in the feature tree until no more features are found Do While Not Feature Is Nothing ' Get the feature name and type FeatName = Feature.Name FeatType = Feature.GetTypeName ' Check if the feature is a sketch-based feature (e.g., \"ProfileFeature\" for extrudes, revolves, etc.) If FeatType = \"ProfileFeature\" Then ' Get the sketch associated with the feature Set swSketch = Feature.GetSpecificFeature2 ' Check the constraint status of the sketch (e.g., fully defined, under-defined) longSketchStatus = swSketch.GetConstrainedStatus() ' If the sketch is under-defined (2 = swUnderDefinedSketch), fully define it If longSketchStatus = 2 Then ' Clear any existing selections in the document Part.ClearSelection2 True ' Select the under-defined sketch by its name boolstatus = Part.Extension.SelectByID2(FeatName, \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) ' Enter the sketch edit mode Part.EditSketch Part.ClearSelection2 True ' Select the origin point of the sketch to help define constraints boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 6, Nothing, 0) ' Fully define the sketch using the `FullyDefineSketch` method longstatus = Part.SketchManager.FullyDefineSketch(1, 1, 1023, 1, 1, Nothing, -1, Nothing, 1, -1) ' Clear selection and exit sketch edit mode Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ClearSelection2 True End If End If ' Check if the feature is a Hole Wizard feature (contains a sub-feature sketch) If FeatType = \"HoleWzd\" Then ' Get the first sub-feature within the Hole Wizard feature (usually a sketch) Set SubFeatSketch = Feature.GetFirstSubFeature SubFeatName = SubFeatSketch.Name SubFeatType = SubFeatSketch.GetTypeName ' Get the sketch associated with the sub-feature Set swSketch = SubFeatSketch.GetSpecificFeature2 ' Check the constraint status of the sub-feature sketch longSketchStatus = swSketch.GetConstrainedStatus() ' If the sketch is under-defined (2 = swUnderDefinedSketch), fully define it If longSketchStatus = 2 Then ' Clear any existing selections in the document Part.ClearSelection2 True ' Select the under-defined sub-feature sketch by its name boolstatus = Part.Extension.SelectByID2(SubFeatName, \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) ' Enter the sub-feature sketch edit mode Part.EditSketch Part.ClearSelection2 True ' Select the origin point of the sketch to help define constraints boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 6, Nothing, 0) ' Fully define the sub-feature sketch using the `FullyDefineSketch` method longstatus = Part.SketchManager.FullyDefineSketch(1, 1, 1023, 1, 1, Nothing, -1, Nothing, 1, -1) ' Clear selection and exit sketch edit mode Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ClearSelection2 True End If End If ' Move to the next feature in the feature tree Set Feature = Feature.GetNextFeature Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/GUARDADXF.html": {
    "href": "src/GUARDADXF.html",
    "title": "Export Sheet Metal Flat Pattern as DXF for CAM Software | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheet Metal Flat Pattern as DXF for CAM Software Description This macro unfolds a sheet metal part and saves it as a DXF file, configured for use in CAM programs, with flat pattern views exported. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a sheet metal part. The part must have valid configurations with flat pattern views enabled. Results Note The sheet metal part will be unfolded (flattened) and saved as a DXF file. The DXF file will be saved in the same directory as the part with the same name but with a .DXF extension. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to export sheet metal flat patterns as DXF for CAM software ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active model document (part) Dim vConfNameArr As Variant ' Array to hold configuration names Dim sConfigName As String ' String to hold the current configuration name Dim i As Long ' Loop counter for iterating through configurations Dim bShowConfig As Boolean ' Boolean to show the configuration Dim bRebuild As Boolean ' Boolean to rebuild the model Dim bRet As Boolean ' Boolean to check the success of DXF export Dim FilePath As String ' String to hold the path of the current file Dim PathSize As Long ' Length of the current file path Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' New file path for the DXF file ' Initialize SolidWorks application and get the active document (sheet metal part) Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Get all configuration names of the active part vConfNameArr = swModel.GetConfigurationNames ' Loop through each configuration in the part For i = 0 To UBound(vConfNameArr) ' Get the name of the current configuration sConfigName = vConfNameArr(i) ' Show the current configuration bShowConfig = swModel.ShowConfiguration2(sConfigName) ' Rebuild the model after showing the configuration bRebuild = swModel.ForceRebuild3(True) ' Get the file path of the current part FilePath = swModel.GetPathName ' Calculate the size of the path and remove the file extension PathSize = Strings.Len(FilePath) PathNoExtension = Strings.Left(FilePath, PathSize - 7) ' Generate the new file path with the \".DXF\" extension NewFilePath = PathNoExtension & \".DXF\" ' Export the flat pattern view as a DXF file bRet = swModel.ExportFlatPatternView(NewFilePath, 1) Next i End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/HideAllSketchesInAssy.html": {
    "href": "src/HideAllSketchesInAssy.html",
    "title": "Hide All Sketches Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Hide All Sketches Macro for SolidWorks Description This macro hides all visible sketches in the active assembly. This is useful for cleaning up the view in complex assemblies where multiple sketches may clutter the workspace. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. At least one part within the assembly should have a sketch that is set to show. Results Note All visible sketches in the assembly will be hidden. Steps to Setup the Macro 1. Open the Assembly: Ensure that the assembly document you wish to clean up is open in SolidWorks. 2. Load and Execute the Macro: Load the macro into SolidWorks using the VBA editor (Alt + F11). Execute the macro from within SolidWorks by navigating to Tools > Macro > Run. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ********************************************************* ' Hide All Sketches.swp ' Description: Macro to hide all sketches in the active assembly. ' ********************************************************* Option Explicit ' Subroutine to hide a sketch feature Sub BlankSketchFeature(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swFeat As SldWorks.Feature) Dim bRet As Boolean ' Check if the feature is a sketch If \"ProfileFeature\" = swFeat.GetTypeName Then ' Select the sketch and hide it bRet = swFeat.Select2(False, 0): Debug.Assert bRet swModel.BlankSketch End If End Sub ' Subroutine to traverse features and their subfeatures Sub TraverseFeatureFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swFeat As SldWorks.Feature, nLevel As Long) Dim swSubFeat As SldWorks.Feature Dim swSubSubFeat As SldWorks.Feature Dim swSubSubSubFeat As SldWorks.Feature Dim sPadStr As String Dim i As Long Dim bRet As Boolean ' Create padding for debug output based on the level of recursion For i = 0 To nLevel sPadStr = sPadStr + \" \" Next i ' Traverse through all features While Not swFeat Is Nothing Debug.Print sPadStr + swFeat.Name + \" [\" + swFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swFeat ' Traverse subfeatures Set swSubFeat = swFeat.GetFirstSubFeature While Not swSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubFeat.Name + \" [\" + swSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubFeat ' Traverse sub-subfeatures Set swSubSubFeat = swSubFeat.GetFirstSubFeature While Not swSubSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubSubFeat.Name + \" [\" + swSubSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubSubFeat ' Traverse sub-sub-subfeatures Set swSubSubSubFeat = swSubSubFeat.GetFirstSubFeature While Not swSubSubSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubSubSubFeat.Name + \" [\" + swSubSubSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubSubSubFeat Set swSubSubSubFeat = swSubSubSubFeat.GetNextSubFeature Wend Set swSubSubFeat = swSubSubFeat.GetNextSubFeature Wend Set swSubFeat = swSubFeat.GetNextSubFeature Wend Set swFeat = swFeat.GetNextFeature Wend End Sub ' Subroutine to traverse features of a component Sub TraverseComponentFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swComp As SldWorks.Component2, nLevel As Long) Dim swFeat As SldWorks.Feature Set swFeat = swComp.FirstFeature TraverseFeatureFeatures swApp, swModel, swFeat, nLevel End Sub ' Subroutine to traverse components and their features Sub TraverseComponent(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swComp As SldWorks.Component2, nLevel As Long) Dim vChildComp As Variant Dim swChildComp As SldWorks.Component2 Dim sPadStr As String Dim i As Long ' Create padding for debug output based on the level of recursion For i = 0 To nLevel - 1 sPadStr = sPadStr + \" \" Next i ' Get child components and traverse them vChildComp = swComp.GetChildren For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) Debug.Print sPadStr & \"+\" & swChildComp.Name2 & \" <\" & swChildComp.ReferencedConfiguration & \">\" TraverseComponentFeatures swApp, swModel, swChildComp, nLevel TraverseComponent swApp, swModel, swChildComp, nLevel + 1 Next i End Sub ' Subroutine to traverse features in the main model Sub TraverseModelFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, nLevel As Long) Dim swFeat As SldWorks.Feature Set swFeat = swModel.FirstFeature TraverseFeatureFeatures swApp, swModel, swFeat, nLevel End Sub ' Main subroutine to execute the macro Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swConf As SldWorks.Configuration Dim swRootComp As SldWorks.Component2 Dim nStart As Single ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly.\", vbExclamation, \"Error\" Exit Sub End If Set swConf = swModel.GetActiveConfiguration Set swRootComp = swConf.GetRootComponent ' Start timing the process nStart = Timer Debug.Print \"File = \" & swModel.GetPathName ' Traverse and hide all sketches in the model TraverseModelFeatures swApp, swModel, 1 TraverseComponent swApp, swModel, swRootComp, 1 ' Output elapsed time Debug.Print \"Time = \" & Timer - nStart & \" s\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/HideShowNote.html": {
    "href": "src/HideShowNote.html",
    "title": "Hide / Show All Notes in Drawing Document | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Hide / Show All Notes in Drawing Document Description This macro automates the process of hiding or showing annotations in a SolidWorks drawing. It begins by checking if a document is open and if the active document is a drawing. If not, it prompts the user to open a drawing. Once a valid drawing is open, the macro presents a message box asking the user whether they want to hide or show annotations. Based on the user's choice, the macro loops through all views in the drawing, processing each one to either hide or display annotations of the \"Note\" type. After processing all views, the drawing is redrawn to reflect the changes. The macro consists of two subroutines: one for hiding and one for showing annotations, which it calls depending on the user's input. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Post-Conditions Note The macro will hide or show all notes in the drawing based on the user selection VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare variables for SolidWorks application, model, drawing, view, and a boolean return value Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swView As SldWorks.View Dim bRet As Boolean ' Get the SolidWorks application instance Set swApp = Application.SldWorks ' Get the active document (drawing/model) from SolidWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document loaded If swModel Is Nothing Then ' Display a message if no document is open swApp.SendMsgToUser (\"No document loaded, please open a drawing\") ' Exit the macro if no document is found Exit Sub End If ' Check if the active document is not a drawing If (swModel.GetType <> swDocDRAWING) Then ' Display a message if the document is not a drawing swApp.SendMsgToUser (\"This is not a drawing, please open a drawing\") Else ' If the document is a drawing, set it as the drawing document object Set swDraw = swModel ' Get the first view in the drawing Set swView = swDraw.GetFirstView ' Prompt the user with a message box to hide or show annotations nResponse = MsgBox(\"Hide Annotations (Yes = Hide; No = Show)?\", vbYesNo) ' Loop through each view in the drawing Do While Not Nothing Is swView ' If user selects 'Yes', hide annotations If nResponse = vbYes Then ProcessDrawing1 swApp, swDraw, swView Else ' If user selects 'No', show annotations ProcessDrawing swApp, swDraw, swView End If ' Move to the next view in the drawing Set swView = swView.GetNextView Loop ' Redraw the document to reflect the changes swModel.GraphicsRedraw2 End If End Sub ' Subroutine to process and show annotations in a drawing view Sub ProcessDrawing(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swView As SldWorks.View) ' Declare variable for an annotation in the drawing view Dim swAnn As SldWorks.Annotation ' Get the first annotation in the current view Set swAnn = swView.GetFirstAnnotation2 ' Loop through each annotation in the view Do While Not Nothing Is swAnn ' Check if the annotation is of the Note type If swNote = swAnn.GetType Then ' Make the annotation visible swAnn.Visible = swAnnotationVisible End If ' Move to the next annotation Set swAnn = swAnn.GetNext2 Loop End Sub ' Subroutine to process and hide annotations in a drawing view Sub ProcessDrawing1(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swView As SldWorks.View) ' Declare variable for an annotation in the drawing view Dim swAnn As SldWorks.Annotation ' Get the first annotation in the current view Set swAnn = swView.GetFirstAnnotation2 ' Loop through each annotation in the view Do While Not Nothing Is swAnn ' Check if the annotation is of the Note type If swNote = swAnn.GetType Then ' Hide the annotation swAnn.Visible = swAnnotationHidden End If ' Move to the next annotation Set swAnn = swAnn.GetNext2 Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/IGES.html": {
    "href": "src/IGES.html",
    "title": "Export Active Document as IGES File | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Active Document as IGES File Description This macro exports the active SolidWorks document (part or assembly) as an IGES file (.igs) to the same directory where the original file is saved. The exported IGES file will have the same name as the active document but with the .igs extension. This macro is useful for quickly saving parts and assemblies in IGES format for compatibility with other CAD software. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro does not work for drawing files. Ensure the document is saved before running the macro, as the file will be exported in the same directory. Results Note The macro will save the active document as an .igs file in the same directory. A message box will appear confirming the location of the saved file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim Part As ModelDoc2 Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Exit if no document is active If Part Is Nothing Then Exit Sub ' Get the path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing (since IGES export is not supported for drawings) If Part.GetType = swDocDRAWING Then Exit Sub End If ' Prepare the path for the IGES file by replacing the extension Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) Path = Replace(Path, Extension, \".igs\") Extension = \".igs\" ' Export the file as IGES longstatus = Part.SaveAs3(Path, 0, 0) ' Notify the user about the saved file location MsgBox \"Saved \" & Path, vbInformation End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ISO & Shaded With Edges.html": {
    "href": "src/ISO & Shaded With Edges.html",
    "title": "ISO & Shaded With Edges Macro in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "ISO & Shaded With Edges Macro in SolidWorks Description This macro sets the active view display mode to Shaded with Edges in SolidWorks, changes the view orientation to Isometric, zooms to fit, saves the part silently, and then closes it. This tool is useful for quickly adjusting and saving a part’s display settings in a standardized format. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An active part document must be open with at least one body. The macro should be executed in SolidWorks with the part open. Results Note Sets the view mode to Shaded with Edges. Changes the view orientation to Isometric. Zooms to fit the part in the window. Saves the part silently and closes it. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Public Enum swViewDisplayMode_e swViewDisplayMode_Wireframe = 1 swViewDisplayMode_HiddenLinesRemoved = 2 swViewDisplayMode_HiddenLinesGrayed = 3 swViewDisplayMode_Shaded = 4 swViewDisplayMode_ShadedWithEdges = 5 ' Only valid for a part End Enum Sub main() Const nNewDispMode As Long = swViewDisplayMode_e.swViewDisplayMode_ShadedWithEdges Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swModView As SldWorks.ModelView Dim bRet As Boolean Dim swError As Long Dim swWarnings As Long On Error GoTo ErrorHandler ' Set up error handling ' Initialize SolidWorks application and model Set swApp = Application.SldWorks If swApp Is Nothing Then MsgBox \"SolidWorks application not found.\", vbCritical Exit Sub End If Set swModel = swApp.ActiveDoc If swModel Is Nothing Then MsgBox \"No active document found. Please open a document and try again.\", vbCritical Exit Sub End If Set swModView = swModel.ActiveView If swModView Is Nothing Then MsgBox \"Unable to access model view.\", vbCritical Exit Sub End If ' Set display mode to Shaded with Edges swModView.DisplayMode = nNewDispMode Debug.Assert nNewDispMode = swModView.DisplayMode ' Change view to Isometric and zoom to fit bRet = swModel.ShowNamedView2(\"*Isometric\", 7) If Not bRet Then MsgBox \"Failed to set view orientation to Isometric.\", vbExclamation End If swModel.ViewZoomtofit2 ' Force rebuild to apply changes swModel.ForceRebuild3 False ' Save the document silently and close it bRet = swModel.Save3(swSaveAsOptions_e.swSaveAsOptions_Silent, swError, swWarnings) If Not bRet Then MsgBox \"Error saving document. Error code: \" & swError & \", Warnings: \" & swWarnings, vbExclamation End If swApp.CloseDoc swModel.GetPathName Exit Sub ErrorHandler: MsgBox \"An unexpected error occurred: \" & Err.Description, vbCritical End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ISOViews.html": {
    "href": "src/ISOViews.html",
    "title": "Create ISO Views Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Create ISO Views Macro for SolidWorks Description This macro generates eight custom named ISO views in an active SolidWorks document, providing various orientations based on the front, right, back, and left perspectives from both top and bottom angles. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An active SolidWorks document must be open. The document should preferably be a 3D model where ISO views will provide meaningful perspectives. Results Note Eight custom ISO views are created: Top-front-right (TRF-ISO), Top-right-rear (TRR-ISO), Top-left-rear (TLR-ISO), Top-left-front (TLF-ISO), Bottom-right-front (BRF-ISO), Bottom-right-rear (BRR-ISO), Bottom-left-rear (BLR-ISO), and Bottom-left-front (BLF-ISO). Previous ISO views with these names are deleted before new views are created to ensure there are no duplicates. Steps to Setup the Macro Open the Document: Ensure that a 3D model document is open in SolidWorks where ISO views can be meaningfully generated. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code. Run the macro directly from the VBA editor or within SolidWorks under Tools > Macro > Run. Using the Macro: The macro will automatically delete any existing named views that match the intended output to prevent duplicates. New ISO views will be created and saved under custom names for quick access. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ********************************************************* ' Description: ' This macro creates a series of isometric views and saves them as named views in the active SolidWorks document. ' ********************************************************* Sub main() ' Declare SolidWorks application and document variables Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim boolstatus As Boolean ' Boolean to capture status (not used in this macro) Dim longstatus As Long ' Long status for operations (not used in this macro) Dim Annotation As Object ' Annotation object placeholder (not used here) Dim Gtol As Object ' Geometric tolerance object placeholder (not used here) Dim DatumTag As Object ' Datum tag object placeholder (not used here) Dim FeatureData As Object ' Feature data placeholder (not used here) Dim Feature As Object ' Feature object placeholder (not used here) Dim Component As Object ' Component object placeholder (not used here) ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Check if a document is open If Part Is Nothing Then MsgBox \"No active document found. Please open a model.\", vbExclamation, \"Error\" Exit Sub End If ' Define mathematical constants and view transformations pi = 4 * Atn(1) ' Value of π (pi) Z = Tan(30 * pi / 180) ' Tangent of 30 degrees X = Atn(Z / Sqr(-Z * Z + 1)) ' Rotation angle in radians for X-axis Y = -45 * pi / 180 ' Rotation angle in radians for Y-axis ' Delete previously saved ISO views to ensure clean state Part.DeleteNamedView (\"TRF-ISO\") Part.DeleteNamedView (\"TRR-ISO\") Part.DeleteNamedView (\"TLF-ISO\") Part.DeleteNamedView (\"TLR-ISO\") Part.DeleteNamedView (\"BRF-ISO\") Part.DeleteNamedView (\"BRR-ISO\") Part.DeleteNamedView (\"BLF-ISO\") Part.DeleteNamedView (\"BLR-ISO\") ' Create and save named views for different ISO perspectives ' Top Right Front ISO View Part.ShowNamedView2 \"*Front\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TRF-ISO\") ' Top Right Rear ISO View Part.ShowNamedView2 \"*Right\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TRR-ISO\") ' Top Left Rear ISO View Part.ShowNamedView2 \"*Back\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TLR-ISO\") ' Top Left Front ISO View Part.ShowNamedView2 \"*Left\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TLF-ISO\") ' Bottom Right Front ISO View Part.ShowNamedView2 \"*Front\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BRF-ISO\") ' Bottom Right Rear ISO View Part.ShowNamedView2 \"*Right\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BRR-ISO\") ' Bottom Left Rear ISO View Part.ShowNamedView2 \"*Back\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BLR-ISO\") ' Bottom Left Front ISO View Part.ShowNamedView2 \"*Left\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BLF-ISO\") ' Clean up objects Set Part = Nothing Set swApp = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/InsertBlock.html": {
    "href": "src/InsertBlock.html",
    "title": "Programmatically Insert a Block into SolidWorks Drawing | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Programmatically Insert a Block into SolidWorks Drawing Description A one-line function call to programmatically insert a block into the active SolidWorks drawing. This macro returns the SketchBlockInstance for the inserted block, enabling users to efficiently place and manage sketch blocks within a drawing. It is particularly useful for automating the placement of standardized blocks, reducing repetitive tasks. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The block file to be inserted must exist in the specified path. Results Note The block will be inserted at the specified X and Y coordinates. The macro returns a SketchBlockInstance object for the inserted block. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks ' Main subroutine to insert a block and print block attributes Sub main() Dim part As ModelDoc2 Dim swBlkInst As SketchBlockInstance Dim boolstatus As Boolean ' Initialize SolidWorks application Set swApp = Application.SldWorks Set part = swApp.ActiveDoc ' Insert the block at specified location with optional scale and rotation Set swBlkInst = Insert_Block(part, \"C:\\temp\\myblock.SLDBLK\", 0.254, 0.254) ' Display block attributes in the Immediate window Debug.Print \"Number of attributes: \" & swBlkInst.GetAttributeCount Debug.Print \"Scale: \" & swBlkInst.Scale Debug.Print \"Name: \" & swBlkInst.Name ' Set an attribute value for the inserted block boolstatus = swBlkInst.SetAttributeValue(\"ItemNo\", \"Value\") End Sub ' Function to insert a block into the active document Function Insert_Block(ByVal rModel As ModelDoc2, ByVal blkName As String, ByVal Xpt As Double, ByVal Ypt As Double, _ Optional ByVal sAngle As Double = 0, Optional ByVal sScale As Double = 1) As Object Dim swBlockDef As SketchBlockDefinition Dim swBlockInst As SketchBlockInstance Dim swMathPoint As MathPoint Dim vBlockInst As Variant Dim swMathUtil As MathUtility Set swMathUtil = swApp.GetMathUtility ' Prepare coordinates for block insertion Dim pt(2) As Double pt(0) = Xpt pt(1) = Ypt pt(2) = 0 ' Turn off grid and entity snapping to facilitate block insertion rModel.SetAddToDB True ' Check if the block definition already exists in the drawing Set swBlockDef = GetBlockDefination(Mid(blkName, InStrRev(blkName, \"\\\") + 1), rModel) Set swMathPoint = swMathUtil.CreatePoint(pt) ' Insert the block if definition is found, otherwise create a new one If Not swBlockDef Is Nothing Then Set swBlockInst = rModel.SketchManager.InsertSketchBlockInstance(swBlockDef, swMathPoint, sScale, sAngle) Else Set swBlockDef = rModel.SketchManager.MakeSketchBlockFromFile(swMathPoint, blkName, False, sScale, sAngle) vBlockInst = swBlockDef.GetInstances Set swBlockInst = vBlockInst(0) End If ' Restore grid and entity snapping rModel.SetAddToDB False ' Redraw graphics to reflect the changes rModel.GraphicsRedraw2 Set Insert_Block = swBlockInst End Function ' Function to get the block definition if it already exists in the drawing Function GetBlockDefination(ByVal blkName As String, ByVal rModel As ModelDoc2) As Object Dim swBlockDef As Object Dim vBlockDef As Variant Dim i As Integer ' Check if there are existing block definitions in the drawing If rModel.SketchManager.GetSketchBlockDefinitionCount > 0 Then vBlockDef = rModel.SketchManager.GetSketchBlockDefinitions If UBound(vBlockDef) >= 0 Then ' Loop through existing definitions to find the matching one For i = 0 To UBound(vBlockDef) Set swBlockDef = vBlockDef(i) If UCase(Mid(swBlockDef.FileName, InStrRev(swBlockDef.FileName, \"\\\") + 1)) = UCase(blkName) Then Set GetBlockDefination = swBlockDef Exit Function End If Next i End If End If ' Return nothing if no matching block definition is found Set GetBlockDefination = Nothing End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/InsertPartIntoNewPart.html": {
    "href": "src/InsertPartIntoNewPart.html",
    "title": "Insert Part into a New Part Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Insert Part into a New Part Macro for SolidWorks Description This macro creates a new part document in SolidWorks and inserts the currently active part into it. It also copies the material properties from the original part to the new part. This is particularly useful for creating derived parts with similar material properties but potentially different geometries or features. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part document must be currently active in SolidWorks. Results Note A new part document is created. The active part is inserted into the new part document. Material properties are copied from the original part to the new part. Steps to Setup the Macro 1. Open the Part Document: Ensure that the part document you want to replicate into a new part is currently active in SolidWorks. 2. Load and Execute the Macro: Load the macro into SolidWorks using the VBA editor (Alt + F11). Execute the macro from within SolidWorks by navigating to Tools > Macro > Run. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ****************************************************************************** ' Insert Part into a New Part ' Description: This macro inserts the currently active SolidWorks part into a new part, ' copies the material properties, and adjusts the view. ' ****************************************************************************** Option Explicit ' Global variables for SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim Part, Parent As Object ' Objects for new part and parent part Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Status and warnings for operations Dim Parent_FullPathName As String ' Full path of the parent part Dim EmptyStr As String ' Placeholder for empty strings Dim myFeature As Object ' Feature object for inserting the part Dim sMatName As String ' Material name of the parent part Dim sMatDB As String ' Material database path Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks Set Parent = swApp.ActiveDoc ' Get the currently active document ' Precondition: Exit quietly if the active document is not a part If (Parent.GetType <> swDocPART) Then Exit Sub ' Get the full path name of the parent part Parent_FullPathName = Parent.GetPathName ' Get the short name (title) of the parent part and remove the file extension if present Dim ParentName As String ParentName = Parent.GetTitle If InStr(1, ParentName, \".\") Then ParentName = Left$(ParentName, InStr(1, ParentName, \".\") - 1) End If ' Get the material name and database path of the parent part sMatName = Parent.GetMaterialPropertyName2(\"\", sMatDB) ' Create a new part Set Part = swApp.NewPart ' Insert the parent part into the new part Set myFeature = Part.InsertPart2(Parent_FullPathName, 1) Part.ClearSelection2 True ' Clear any selections in the new part ' Set the view to isometric and fit the window Part.ShowNamedView2 \"*Isometric\", 7 Part.ViewZoomtofit2 ' Copy material from the parent part to the new part Part.SetMaterialPropertyName \"SOLIDWORKS Materials.sldmat\", sMatName ' Clean up references to objects Set Parent = Nothing Set Part = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Instances.html": {
    "href": "src/Instances.html",
    "title": "Instance Count Increment Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Instance Count Increment Macro Description This macro automates the incrementation or decrementation of numbering in selected dimensions and notes within a SolidWorks document. It's particularly useful for rapidly updating numbering sequences in dimensions or notes for engineering documents. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part document must be currently open in SolidWorks. At least one dimension or note must be selected. Results Note Updates the numbering in the selected dimensions or notes by adding or subtracting one, based on the selected macro button (+1 or -1). Allows control over whether the prefix or suffix of the dimension/note text is altered. Steps to Setup the Macro 1. Configure Macro Settings: Set the IncStr constant to define the increment notation (X, #, etc.). Set the IncPrefix boolean to True to increment the prefix of the text or False for the suffix. 2. Running the Macro: Execute the Plus1 subroutine to increase the numbering by one. Execute the Minus1 subroutine to decrease the numbering by one. 3. Macro Execution: The macro checks the selection type and applies the increment or decrement to each selected object. If the selected object is a dimension or hole callout, it extracts and updates the prefix or suffix based on the IncPrefix setting. If the selection is a note, it directly updates the text of the note. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Constants for increment notation Const IncStr As String = \"X\" ' The string appended to incremented values Const IncPrefix As Boolean = True ' True = change prefix, False = change suffix ' SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim Part As SldWorks.ModelDoc2 ' Active document object Dim SelMgr As SldWorks.SelectionMgr ' Selection manager for managing selected entities Dim i As Integer ' Loop counter Dim selCount As Integer ' Count of selected objects Dim selType As Long ' Type of the selected object Dim swDispDim As SldWorks.DisplayDimension ' Display dimension object Dim swDim As SldWorks.Dimension ' Dimension object Dim Note As SldWorks.Note ' Note object Dim NumValue As Integer ' Numeric value extracted from text Dim OldText As String ' Original text from the selected entity Dim NewText As String ' New text after increment/decrement ' Macro to increment values by +1 Sub Plus1() Increment 1 End Sub ' Macro to decrement values by -1 Sub Minus1() Increment -1 End Sub ' Core subroutine to increment or decrement selected text or dimensions Sub Increment(x As Integer) ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc Set SelMgr = Part.SelectionManager() ' Get the count of selected objects selCount = SelMgr.GetSelectedObjectCount() ' Loop through each selected object For i = 1 To selCount ' Get the type of the selected object selType = SelMgr.GetSelectedObjectType3(i, -1) Select Case selType Case swSelDIMENSIONS ' Handle selected dimensions Set swDispDim = SelMgr.GetSelectedObject6(i, -1) ' Get the selected dimension OldText = swDispDim.GetText(swDimensionTextPrefix) ' Get the current prefix text NumValue = Val(OldText) + x ' Increment or decrement the numeric value NewText = Format(NumValue) & IncStr ' Create the new text with increment notation swDispDim.SetText swDimensionTextPrefix, NewText ' Update the dimension text Case swSelNOTES ' Handle selected notes Set Note = SelMgr.GetSelectedObject6(i, -1) ' Get the selected note OldText = Note.GetText ' Get the current note text NumValue = Val(OldText) + x ' Increment or decrement the numeric value NewText = Format(NumValue) & IncStr ' Create the new text with increment notation Note.SetText NewText ' Update the note text End Select Next ' Refresh the graphics to reflect the changes Part.GraphicsRedraw2 End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Isolate.html": {
    "href": "src/Isolate.html",
    "title": "Isolate Selected Components in an Assembly | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Isolate Selected Components in an Assembly Description Pre-select one or more components in an assembly and execute the macro. The selected components will become isolated in the assembly. This macro can be placed on the Graphics Area menu (which pops up when you right-click a component) for convenient access, making it ideal for users who frequently isolate components. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note One or more components must be pre-selected in an active assembly. The active document must be an assembly file. Results Note The selected components will be isolated in the assembly. A message box will be displayed if no components are selected or if the active document is not an assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to isolate selected components in an assembly Sub main() ' Declare SolidWorks application and active document objects Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (assembly) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim longstatus As Long, longwarnings As Long ' Long variables for capturing status and warnings ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Check if there is an active document open If Part Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If Part.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Isolate the pre-selected components in the assembly ' RunCommand with ID 2726 is used to isolate components in SolidWorks boolstatus = Part.Extension.RunCommand(2726, \"\") ' Note: The following command can be used to exit isolation mode if required: ' boolstatus = Part.Extension.RunCommand(2732, \"\") ' RunCommand ID 2732 exits isolate mode ' Clean up by releasing references to objects Set Part = Nothing Set swApp = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/LinkNoteToConfig.html": {
    "href": "src/LinkNoteToConfig.html",
    "title": "Link Note to Configuration Specific Property in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Link Note to Configuration Specific Property in SolidWorks Description This macro allows users to link a note in a SolidWorks document to a configuration-specific property. The macro pushes the value of the note into a custom property in the configuration, but it does not update the note with changes in the property value. The macro prompts the user to enter the property name to which the selected note will be linked. Additionally, a macro feature is created, ensuring that the note and custom property linkage is maintained. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The user must preselect a note in the SolidWorks model before running the macro. The active document must support configuration-specific properties. A valid name for the property should be provided in the input box on the UserForm. Results Note The selected note's text is linked to a configuration-specific property with the specified name. A macro feature is added to maintain this link, allowing the custom property to update as the note text changes. A message box appears if no note is selected or if an invalid name is entered. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to display the UserForm Sub Main() UserForm1.Show End Sub ' Create a Module named FeatureModule and paste the code Below vbnet Copy code Option Explicit ' Rebuild routine for the macro feature Function swmRebuild(varApp As Variant, varDoc As Variant, varFeat As Variant) As Variant Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swCusPropMgr As CustomPropertyManager Dim swCfgPropMgr As CustomPropertyManager Set swApp = varApp Set swModel = varDoc Set swCusPropMgr = swModel.Extension.CustomPropertyManager(\"\") Dim CustomPropNames As Variant Dim CustomPropValues As Variant swCusPropMgr.GetAll CustomPropNames, Nothing, CustomPropValues Dim i As Integer If swCusPropMgr.Count = 0 Then Exit Function For i = LBound(CustomPropNames) To UBound(CustomPropNames) If Left(CustomPropNames(i), 9) = \"Linked - \" Then Set swCfgPropMgr = swModel.Extension.CustomPropertyManager(swModel.ConfigurationManager.ActiveConfiguration.name) swCfgPropMgr.Delete CustomPropValues(i) swCfgPropMgr.Add2 CustomPropValues(i), swCustomInfoText, GetNoteTextByName(Mid(CustomPropNames(i), 10)) End If Next End Function ' Function to get the text of a note by name Function GetNoteTextByName(ByVal name As String) Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swNote As Note Dim swSelMgr As SelectionMgr Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swSelMgr = swModel.SelectionManager swModel.Extension.SelectByID2 name & \"@Annotations\", \"NOTE\", 0, 0, 0, False, -1, Nothing, swSelectOptionDefault Set swNote = swSelMgr.GetSelectedObject6(1, -1) If Not swNote Is Nothing Then GetNoteTextByName = swNote.GetText End Function ' Edit definition routine for the macro feature Function swmEditDefinition(varApp As Variant, varDoc As Variant, varFeat As Variant) As Variant UserForm1.Show End Function ' Security routine for the macro feature Function swmSecurity(varApp As Variant, varDoc As Variant, varFeat As Variant) As Variant swmSecurity = SwConst.swMacroFeatureSecurityOptions_e.swMacroFeatureSecurityByDefault End Function ' Subroutine to create the macro feature if it doesn't already exist Sub CreateNewMacroFeature(ByRef swApp As SldWorks.SldWorks) If Not LinkFeatureExists(swApp) Then Dim swModel As SldWorks.ModelDoc2 Dim feat As Feature Dim Methods(8) As String Dim Names As Variant, Types As Variant, Values As Variant Dim options As Long Dim icons(2) As String Set swModel = swApp.ActiveDoc ThisFile = swApp.GetCurrentMacroPathName Methods(0) = ThisFile: Methods(1) = \"FeatureModule\": Methods(2) = \"swmRebuild\" Methods(3) = ThisFile: Methods(4) = \"FeatureModule\": Methods(5) = \"swmEditDefinition\" options = swMacroFeatureAlwaysAtEnd Set feat = swModel.FeatureManager.InsertMacroFeature3(\"Link Properties\", \"\", Methods, Names, Types, Values, Empty, Empty, Empty, icons, options) swModel.ForceRebuild3 False End If End Sub ' Function to check if the macro feature already exists Function LinkFeatureExists(ByRef swApp As SldWorks.SldWorks) Dim swModel As ModelDoc2 Dim swFeat As Feature Set swModel = swApp.ActiveDoc LinkFeatureExists = False Set swFeat = swModel.FirstFeature Do Until swFeat Is Nothing If Left(swFeat.Name, Len(\"Link Properties\")) = \"Link Properties\" Then LinkFeatureExists = True Exit Function End If Set swFeat = swFeat.GetNextFeature Loop End Function 'End of Feature Module 'Create User Form With TestBox and 2 Command Buttons as Below 'textBox1 'CommandButton1 'CommandButton2 'Paste the below in the backcode of the User Form Option Explicit Private Sub CommandButton1_Click() Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks If TextBox1.Text <> \"\" Then CreateNoteProperties TextBox1.Text CreateNewMacroFeature swApp Else MsgBox \"Enter a name first\" End If End Sub ' Function to create custom properties for the note Function CreateNoteProperties(ByVal OutputName As String) As String Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swSelMgr As SelectionMgr Dim swNote As Note Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swSelMgr = swModel.SelectionManager If swSelMgr.GetSelectedObjectCount2(-1) = 0 Or swSelMgr.GetSelectedObjectType3(1, -1) <> 15 Then MsgBox \"You must select a note to link first\" Exit Function End If Set swNote = swSelMgr.GetSelectedObject6(1, -1) If Not swNote Is Nothing Then CreateNoteProperties = swNote.GetText swModel.Extension.CustomPropertyManager(\"\").Delete \"Linked - \" & swNote.GetName swModel.Extension.CustomPropertyManager(\"\").Add2 \"Linked - \" & swNote.GetName, swCustomInfoText, OutputName End If End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MatToPipeFromAssy.html": {
    "href": "src/MatToPipeFromAssy.html",
    "title": "Material Assignment Macro for Pipes and Tubes in SolidWorks Assemblies | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Material Assignment Macro for Pipes and Tubes in SolidWorks Assemblies Description This macro automates the process of assigning materials to pipe and tube components within a SolidWorks assembly. It iterates through all components, identifies pipes and tubes, and applies a predefined material to each. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly should contain pipe and tube components that are compatible with the Routing component manager. Results Note Assigns the material 'AISI 304' to all pipe and tube components found in the assembly. Updates each configuration of the parts with the selected material. Steps to Setup the Macro Create the VBA Module: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project and copy the provided macro code into this module. Run the Macro: Make sure an assembly with pipe and tube components is open. Execute the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your macro file. Using the Macro: Upon execution, the macro automatically processes the active assembly. Each pipe and tube component will have the material 'AISI 304' assigned across all configurations. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declaration of SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swAssyDoc As SldWorks.AssemblyDoc ' Assembly document object Dim swComponent As SldWorks.Component2 ' Individual assembly component object Dim swRtCompMgr As SWRoutingLib.RoutingComponentManager ' Routing component manager for determining component type Dim swModelDoc As SldWorks.ModelDoc2 ' Active SolidWorks document Dim swModelDocComp As SldWorks.ModelDoc2 ' Component document within the assembly Dim swModelDocExt As SldWorks.ModelDocExtension ' Model extension object for accessing extended functionalities Dim swPipePart As SldWorks.PartDoc ' Part document for pipe components Dim swTubePart As SldWorks.PartDoc ' Part document for tube components Dim vComponents As Variant ' Array of components in the assembly Dim vComponent As Variant ' Individual component in the array Dim sComponentName0 As String ' Current component name Dim sComponentName1 As String ' Previous component name (used for comparison) Dim sArrayPipeNames() As String ' Array to store pipe component names Dim sArrayTubeNames() As String ' Array to store tube component names Dim vConfigNames As Variant ' Array of configuration names in a part Dim sConfigName As String ' Individual configuration name Dim swConfig As SldWorks.Configuration ' Configuration object Dim sMaterialDataBase As String ' Path to the material database Dim sMaterialName As String ' Name of the material to assign Dim i As Integer ' Loop counter for components Dim p As Integer ' Counter for pipe components Dim t As Integer ' Counter for tube components ' Main subroutine to process assembly components Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc ' Check if a document is open If swModelDoc Is Nothing Then MsgBox \"No document loaded.\" End End If p = 1 ' Initialize pipe counter t = 1 ' Initialize tube counter ' Check if the current document is an assembly If swModelDoc.GetType = 2 Then ' Cast the document as an assembly Set swAssyDoc = swModelDoc ' Get all components in the assembly vComponents = swAssyDoc.GetComponents(False) ' Initialize arrays to store component names ReDim sArrayPipeNames(1) ReDim sArrayTubeNames(1) ' Process pipe components For i = 0 To UBound(vComponents) Set swComponent = vComponents(i) Set swModelDocComp = swComponent.GetModelDoc2 If Not swModelDocComp Is Nothing Then If swModelDocComp.GetType = 1 Then ' Check if the component is a part Set swModelDocExt = swModelDocComp.Extension Set swRtCompMgr = swModelDocExt.GetRoutingComponentManager If swRtCompMgr.GetComponentType = 1 Then ' Check if the part is a pipe Set swPipePart = swComponent.GetModelDoc2 sComponentName0 = swComponent.GetPathName sArrayPipeNames(p) = sComponentName0 If sComponentName0 <> sComponentName1 Then p = p + 1 ReDim Preserve sArrayPipeNames(UBound(sArrayPipeNames) + 1) Call AssigMaterial(swPipePart) ' Assign material to the pipe End If sComponentName1 = sComponentName0 End If End If End If Next i ' Process tube components For i = 0 To UBound(vComponents) Set swComponent = vComponents(i) Set swModelDocComp = swComponent.GetModelDoc2 If Not swModelDocComp Is Nothing Then If swModelDocComp.GetType = 1 Then ' Check if the component is a part Set swModelDocExt = swModelDocComp.Extension Set swRtCompMgr = swModelDocExt.GetRoutingComponentManager If swRtCompMgr.GetComponentType = 25 Then ' Check if the part is a tube Set swTubePart = swComponent.GetModelDoc2 sComponentName0 = swComponent.GetPathName sArrayTubeNames(t) = sComponentName0 If sComponentName0 <> sComponentName1 Then t = t + 1 ReDim Preserve sArrayTubeNames(UBound(sArrayTubeNames) + 1) Call AssigMaterial(swTubePart) ' Assign material to the tube End If sComponentName1 = sComponentName0 End If End If End If Next i ElseIf swModelDoc.GetType <> 2 Then MsgBox \"Current Document must be Assembly.\" End End If End Sub ' Subroutine to assign material to parts Sub AssigMaterial(swPipePart As SldWorks.PartDoc) Dim j As Integer ' Loop counter for configurations ' Get all configuration names in the part vConfigNames = swPipePart.GetConfigurationNames ' Define material database path and material name sMaterialDataBase = \"C:/Program Files/SOLIDWORKS Corp/SolidWorks (2)/lang/english/sldmaterials/SolidWorks Materials.sldmat\" sMaterialName = \"AISI 304\" ' Assign the material to all configurations For j = 0 To UBound(vConfigNames) sConfigName = vConfigNames(j) Call swPipePart.SetMaterialPropertyName2(sConfigName, sMaterialDataBase, sMaterialName) Next j End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MatchTextProperties.html": {
    "href": "src/MatchTextProperties.html",
    "title": "Match Text Properties in SolidWorks Drawing | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Match Text Properties in SolidWorks Drawing Description This macro matches text properties such as height and font of the selected text to a parent text object in a SolidWorks drawing. The macro enables users to ensure consistency in text properties across multiple notes and dimensions by using a single function call to apply the formatting of the selected parent text. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must first select the parent text object (either a note or dimension) whose properties will be matched. Subsequent selections must include the text objects to be modified. Results Note The selected text objects will have their properties (font, height) updated to match the parent text. A confirmation message will be shown in the Immediate window for each updated text object. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Global variables for the SolidWorks application, selected text objects, and text object counters Public swApp As SldWorks.SldWorks Public vNoteObjects() As Object ' Array to hold selected note objects Public vdisDimObjects() As Object ' Array to hold selected dimension objects Dim iDisDim As Integer ' Counter for dimension objects Dim iNote As Integer ' Counter for note objects Dim parentNote As Note ' Parent note object for text matching Dim parentDisDim As DisplayDimension ' Parent dimension object for text matching Dim isNote As Boolean ' Flag indicating if a note is selected Dim isDisDim As Boolean ' Flag indicating if a dimension is selected ' Constants for SolidWorks selection types Const vSelNote As Integer = SwConst.swSelectType_e.swSelNOTES ' Selection type for notes Const vSelDims As Integer = SwConst.swSelectType_e.swSelDIMENSIONS ' Selection type for dimensions ' Subroutine to get the selected text objects and populate arrays Public Sub GetTheTextObjects() Dim swSelMgr As SelectionMgr ' Selection manager object Dim swPart As ModelDoc2 ' Active document object Dim i As Integer ' Number of selected objects Dim t As Integer ' Loop counter ' Initialize objects Set swPart = swApp.ActiveDoc Set swSelMgr = swPart.SelectionManager i = swSelMgr.GetSelectedObjectCount2(-1) ' Check if no text objects are selected If i = 0 Then MsgBox \"No text objects selected.\" Exit Sub End If On Error GoTo Errhandler ' Load the arrays with the selected text objects For t = 0 To i ' Check if selected object is a note If swSelMgr.GetSelectedObjectType3(t, -1) = vSelNote Then isNote = True If iNote = 0 Then ReDim vNoteObjects(0) iNote = 1 Else ReDim Preserve vNoteObjects(UBound(vNoteObjects) + 1) End If Set vNoteObjects(UBound(vNoteObjects)) = swSelMgr.GetSelectedObject6(t, -1) End If ' Check if selected object is a dimension If swSelMgr.GetSelectedObjectType3(t, -1) = vSelDims Then isDisDim = True If iDisDim = 0 Then ReDim vdisDimObjects(0) iDisDim = 1 Else ReDim Preserve vdisDimObjects(UBound(vdisDimObjects) + 1) End If Set vdisDimObjects(UBound(vdisDimObjects)) = swSelMgr.GetSelectedObject6(t, -1) End If Next On Error GoTo 0 ' Call subroutine to apply text properties Call changeText Exit Sub Errhandler: MsgBox \"Error occurred while getting text objects: \" & Err.Description Resume Next End Sub ' Function to grab the parent text properties for matching Public Function GrabParentText() As Boolean Dim swSelMgr As SelectionMgr ' Selection manager object Dim swPart As ModelDoc2 ' Active document object Dim retVal As Boolean ' Return value indicating if a parent text is found Dim i As Integer ' Number of selected objects Dim t As Integer ' Loop counter retVal = False ' Initialize return value to False ' Initialize objects Set parentNote = Nothing Set parentDisDim = Nothing Set swPart = swApp.ActiveDoc Set swSelMgr = swPart.SelectionManager i = swSelMgr.GetSelectedObjectCount2(-1) ' Check if no objects are selected If i = 0 Then MsgBox \"No objects selected.\" GrabParentText = retVal Exit Function End If On Error GoTo Errhandler ' Loop through selected objects to find a parent text object For t = 0 To i ' Check if selected object is a note If swSelMgr.GetSelectedObjectType3(t, -1) = vSelNote Then Set parentNote = swSelMgr.GetSelectedObject6(t, -1) retVal = True Exit For End If ' Check if selected object is a dimension If swSelMgr.GetSelectedObjectType3(t, -1) = vSelDims Then Set parentDisDim = swSelMgr.GetSelectedObject6(t, -1) retVal = True Exit For End If Next Errhandler: ' Show message if no valid parent text object is found If parentNote Is Nothing And parentDisDim Is Nothing Then MsgBox \"No text objects selected.\" End If GrabParentText = retVal End Function ' Subroutine to apply parent text properties to the selected text objects Sub changeText() Dim sdModel As ModelDoc2 ' Active document object Dim swSelMgr As SelectionMgr ' Selection manager object Dim pFont As String ' Parent text font Dim pCharHt As Double ' Parent text character height Dim pAnn As Annotation ' Parent annotation object Dim pTextFor As TextFormat ' Parent text format object Dim pIsUseDocFormat As Boolean ' Flag for using document format Dim swAnn As Annotation ' Annotation object for selected text Dim swTxtFormat As TextFormat ' Text format object for selected text Dim swNote As Note ' Note object Dim swdisdim As DisplayDimension ' Display dimension object Dim nAngle As Double ' Angle for the note ' Retrieve parent text properties If Not parentNote Is Nothing Then Set pAnn = parentNote.GetAnnotation ElseIf Not parentDisDim Is Nothing Then Set pAnn = parentDisDim.GetAnnotation End If ' Get text format properties from parent annotation pIsUseDocFormat = pAnn.GetUseDocTextFormat(0) Set pTextFor = pAnn.GetTextFormat(0) pFont = pTextFor.TypeFaceName pCharHt = pTextFor.CharHeight Set sdModel = swApp.ActiveDoc Set swSelMgr = sdModel.SelectionManager ' Apply parent properties to selected note objects If isNote = True Then On Error GoTo Errhandler For i = 0 To UBound(vNoteObjects) Set swNote = vNoteObjects(i) nAngle = swNote.Angle Set swAnn = swNote.GetAnnotation Set swTxtFormat = swAnn.GetTextFormat(0) swTxtFormat.CharHeight = pCharHt swTxtFormat.TypeFaceName = pFont swAnn.SetTextFormat 0, pIsUseDocFormat, swTxtFormat swNote.Angle = nAngle Next End If ' Apply parent properties to selected dimension objects If isDisDim = True Then On Error GoTo Errhandler1 For i = 0 To UBound(vdisDimObjects) Set swdisdim = vdisDimObjects(i) Set swAnn = swdisdim.GetAnnotation Set swTxtFormat = swAnn.GetTextFormat(0) swTxtFormat.CharHeight = pCharHt swTxtFormat.TypeFaceName = pFont swAnn.SetTextFormat 0, pIsUseDocFormat, swTxtFormat Next End If ' Redraw graphics to apply changes sdModel.GraphicsRedraw2 Exit Sub Errhandler: MsgBox \"Error occurred while applying note properties: \" & Err.Description Resume Next Errhandler1: MsgBox \"Error occurred while applying dimension properties: \" & Err.Description Resume Next End Sub ' Main subroutine to initialize the macro Sub main() Dim swPart As ModelDoc2 ' Active document object Set swApp = Application.SldWorks Set swPart = swApp.ActiveDoc ' Check if the active document is a drawing If swPart Is Nothing Then MsgBox \"No Active File.\", vbCritical, \"Wrong File Type\" End End If ' Check if the active document type is a drawing If swPart.GetType <> 3 Then MsgBox \"Can only run in a drawing.\" & vbNewLine & \"Active document must be a drawing file.\" End End If ' Initialize counters iNote = 0 iDisDim = 0 ' Rebuild the drawing to ensure proper updates swPart.ForceRebuild3 True ' Show form for user interaction (assumes a form named frmSelect exists) frmSelect.Show vbModeless End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/McMaster Screw Fix.html": {
    "href": "src/McMaster Screw Fix.html",
    "title": "Suppress Threads, Add Mate Reference, Lower Image Quality, and Set BOM to Document Name | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Suppress Threads, Add Mate Reference, Lower Image Quality, and Set BOM to Document Name Description This macro performs the following actions on the active part: Suppresses the threads in the model to optimize performance. Adds a mate reference to the largest face of the part, allowing it to be used easily in assemblies. Lowers the image quality (tessellation quality) to reduce the graphical load. Sets the Bill of Materials (BOM) to use the document name instead of the configuration name. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part. The macro assumes that the thread features are labeled appropriately (e.g., \"Cut-Sweep1\", \"Sweep1\", \"Cut-Extrude1\"). The part must have valid bodies and faces for mate references. Results Note Thread features will be suppressed to improve performance. A mate reference will be added to the largest face, which simplifies assembly creation. Image quality (tessellation) will be lowered to reduce performance load. The Bill of Materials (BOM) will be set to use the document name instead of the configuration name. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to suppress threads, add mate reference, lower image quality, and set BOM to document name Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swmodel As SldWorks.ModelDoc2 ' Active document object (part) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim selmgr As SldWorks.SelectionMgr ' Selection manager object Dim swfeatmgr As SldWorks.FeatureManager ' Feature manager object Dim Configmgr As SldWorks.ConfigurationManager' Configuration manager object Dim swconfig As SldWorks.Configuration ' Configuration object Dim swfeats As Variant ' Array of features in the part Dim feat As Variant ' Individual feature object Dim swBody As SldWorks.Body2 ' Body object in the part Dim swFace As SldWorks.Face2 ' Face object for mate reference Dim edges As Variant ' Array of edges for mate reference Dim templarge As SldWorks.Face2 ' Temporarily store the largest face Dim swEnt As SldWorks.Entity ' Entity object for selection Dim myFeature As SldWorks.Feature ' Feature object for mate reference Dim i As Long ' Loop counter for iterating through faces ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swmodel = swApp.ActiveDoc Set selmgr = swmodel.SelectionManager Set swfeatmgr = swmodel.FeatureManager Set Configmgr = swmodel.ConfigurationManager Set swconfig = Configmgr.ActiveConfiguration ' Suppressing threads by selecting specific features (e.g., Cut-Sweep, Sweep1, Cut-Extrude1) boolstatus = swmodel.Extension.SelectByID2(\"Cut-Sweep1\", \"BODYFEATURE\", 0, 0, 0, False, 0, Nothing, 0) If selmgr.GetSelectedObjectCount = 0 Then boolstatus = swmodel.Extension.SelectByID2(\"Sweep1\", \"BODYFEATURE\", 0, 0, 0, True, 0, Nothing, 0) boolstatus = swmodel.Extension.SelectByID2(\"Cut-Extrude1\", \"BODYFEATURE\", 0, 0, 0, True, 0, Nothing, 0) End If swmodel.EditSuppress2 ' Suppress selected features swmodel.ClearSelection2 True ' Clear the selection after suppression ' Set the BOM to use the document name instead of the configuration name boolstatus = swmodel.EditConfiguration3(swconfig.Name, swconfig.Name, \"\", \"\", 32) ' Lower image quality (tessellation quality) to reduce performance load swmodel.SetTessellationQuality 6 ' Set tessellation quality to lower value (6) ' Hide all sketches and planes swfeats = swfeatmgr.GetFeatures(False) For Each feat In swfeats ' Hide reference planes, sketches, and helixes If feat.GetTypeName = \"RefPlane\" Or feat.GetTypeName = \"ProfileFeature\" Or feat.GetTypeName = \"Helix\" Then feat.Select (True) swmodel.BlankRefGeom ' Hide reference geometry swmodel.BlankSketch ' Hide sketches End If Next ' Adding Mate Reference (only works with basic parts, not screws, washers, etc.) Dim vBodies As Variant vBodies = swmodel.GetBodies2(swAllBodies, True) Set swBody = vBodies(0) ' Get the first body in the part Set swFace = swBody.GetFirstFace swmodel.ClearSelection2 True Set templarge = swFace ' Initialize the largest face with the first face ' Find the largest face in the body (based on area) For i = 1 To swBody.GetFaceCount Set swEnt = swFace If swFace.GetArea > templarge.GetArea Then Set templarge = swFace ' Update the largest face End If Set swFace = swFace.GetNextFace ' Move to the next face Next i ' Get the edges of the largest face Set swEnt = templarge edges = templarge.GetEdges ' Add mate reference using the first edge of the largest face Set myFeature = swmodel.FeatureManager.InsertMateReference2(\"Mate Reference\", edges(1), 0, 0, False, Nothing, 0, 0, False, Nothing, 0, 0) End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MeasureSketchAndAddLengthProperty.html": {
    "href": "src/MeasureSketchAndAddLengthProperty.html",
    "title": "Measure Sketch and Add Length Property | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Measure Sketch and Add Length Property Description This macro measures the length of all the segments in the selected sketch of the active model file and adds the total length as a custom property with a value in inches or millimeters (up to 2 decimal places). The macro checks the model units and accordingly converts the total length into inches or mm based on the current unit system of the document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The desired sketch must be selected from the feature manager before running the macro. The active document must be a part or assembly. The sketch should not contain any construction geometry or text, as these are ignored in the length calculation. Results Note The macro calculates the total length of all the sketch segments in the selected sketch. A custom property named \"Total Length\" is added to the part or assembly with the length value in inches or mm, depending on the document units. A message box will be displayed if no sketch is selected or the active document is not a part or assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Public Enum swSkchSegments_e swSketchLINE = 0 swSketchARC = 1 swSketchELLIPSE = 2 swSketchSPLINE = 3 swSketchTEXT = 4 swSketchPARABOLA = 5 End Enum Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (part or assembly) Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swFeat As SldWorks.Feature ' Feature object for the selected sketch Dim swSketch As SldWorks.sketch ' Sketch object to store the selected sketch Dim swCustProp As CustomPropertyManager ' Custom property manager for adding properties to the model Dim swSkchSeg As SldWorks.SketchSegment ' Sketch segment object for each segment in the sketch Dim UserUnit As UserUnit ' User unit object to determine the document's unit system Dim i As Long ' Loop counter for iterating through sketch segments Dim bRet As Boolean ' Return status of custom property addition Dim vSkchSeg As Variant ' Array to hold the sketch segments in the selected sketch Dim nLength As Double ' Total length of the sketch segments ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently active If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a part or assembly (skip if it's a drawing) If swModel.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the user unit system (e.g., metric or imperial) Set UserUnit = swModel.GetUserUnit(swUserUnitsType_e.swLengthUnit) ' Get the selection manager object Set swSelMgr = swModel.SelectionManager ' Check if a sketch is selected in the feature manager If swSelMgr.GetSelectedObjectCount2(-1) > 0 And swSelMgr.GetSelectedObjectType3(1, -1) = swSelSKETCHES Then ' Get the selected sketch feature Set swFeat = swSelMgr.GetSelectedObject5(1) Set swSketch = swFeat.GetSpecificFeature2 ' Get all the sketch segments in the selected sketch vSkchSeg = swSketch.GetSketchSegments ' Loop through each segment in the sketch For i = 0 To UBound(vSkchSeg) Set swSkchSeg = vSkchSeg(i) ' Ignore construction lines and text segments If swSkchSeg.ConstructionGeometry = False Then If swSketchTEXT <> swSkchSeg.GetType Then ' Accumulate the length of valid sketch segments nLength = nLength + swSkchSeg.GetLength End If End If Next i ' Clear any selections in the document swModel.ClearSelection2 True ' Get the custom property manager object for the active document Set swCustProp = swModel.Extension.CustomPropertyManager(\"\") ' Add the total length as a custom property in inches or mm based on the unit system If UserUnit.IsMetric = False Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 39.3701, 2) & \" in\", 1) ' Add total length in inches ElseIf UserUnit.IsMetric Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 1000, 2) & \" mm\", 1) ' Add total length in mm End If Else ' Show error message if no sketch is selected MsgBox \"Please select a sketch from the feature manager and try again.\", vbExclamation, \"No Sketch Selected\" Exit Sub End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/OpenAndSaveAsPartNumber.html": {
    "href": "src/OpenAndSaveAsPartNumber.html",
    "title": "Open & Save As Part Number Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Open & Save As Part Number Macro Description This macro automates the process of opening SolidWorks part files from a specified directory, retrieving a custom property (part number), and saving the parts to a new location with the part number as the filename. It streamlines file management and ensures consistency in naming conventions based on part properties. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The directories for the source files and the target save location must be set up in the macro. The parts should contain a custom property named \"Part Number\". Results Note Parts will be saved in the new location with the filename set to their part number. Any existing files with the same name in the target directory will be overwritten. Steps to Setup the Macro 1. Configure Source and Target Directories: Modify the OpenAndSaveas subroutine calls to set the source (X:\\123\\) and target (X:\\ABC\\) directories. Ensure that the target directory has write permissions. 2. Run the Macro: Execute the main subroutine. The macro opens each part in the source directory, reads its \"Part Number\" custom property, and saves it in the target directory with the part number as the new filename. 3. Review Results: Check the target directory to ensure all files are correctly renamed and saved. Verify that no files were inappropriately overwritten. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for SolidWorks application, models, and file operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As ModelDoc2 ' Active SolidWorks document Dim swFilename As String ' File path and name of the model Dim nErrors As Long ' Variable to store error count Dim nWarnings As Long ' Variable to store warning count Dim retval As Long ' Return value for operations Dim Response As String ' String to store the response from the directory listing Dim DocName As String ' Document name for operations ' Main subroutine to initiate the process Sub main() ' Initialize SolidWorks application object Set swApp = Application.SldWorks ' Specify the folder path containing files to process ' and invoke the OpenAndSaveas subroutine OpenAndSaveas \"X:\\123\\\", \".SLDPRT\", True End Sub ' Subroutine to open files from a folder and save them with a new name Sub OpenAndSaveas(folder As String, ext As String, silent As Boolean) ' Declare variables for document type, custom properties, and file paths Dim swDocTypeLong As Long ' SolidWorks document type Dim swCustPrpMgr As SldWorks.CustomPropertyManager ' Custom property manager Dim Value As String ' Value of the custom property Dim GetName As String ' New file name with path Dim swSavePath As String ' Destination folder for saving ' Determine the document type based on the file extension ext = UCase$(ext) ' Convert file extension to uppercase swDocTypeLong = Switch( _ ext = \".SLDPRT\", swDocPART, _ ext = \".SLDDRW\", swDocDRAWING, _ ext = \".SLDASM\", swDocASSEMBLY, _ True, -1 _ ) ' Exit if the file is not a recognized SolidWorks document type If swDocTypeLong = -1 Then Exit Sub ' Change the working directory to the specified folder ChDir (folder) ' Loop through all files in the folder Response = Dir(folder) Do Until Response = \"\" ' Construct the full file path for the current file swFilename = folder & Response ' Check if the file matches the specified extension If Right(UCase$(Response), 7) = ext Then ' Open the document in SolidWorks Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", nErrors, nWarnings) ' For non-drawing files, set the view to Isometric If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Access the custom property manager Set swCustPrpMgr = swModel.Extension.CustomPropertyManager(\"\") ' Retrieve the \"Part Number\" custom property value swCustPrpMgr.Get3 \"Part Number\", False, \"\", Value ' Define the new save path and file name swSavePath = \"X:\\ABC\\\" GetName = swSavePath & Value & \".sldprt\" ' Save the file with the new name swModel.SaveAs (GetName) ' Close the document after saving swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the directory Response = Dir Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/OpenSelectedPart.html": {
    "href": "src/OpenSelectedPart.html",
    "title": "Open Selected Part Separately from Assembly in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Open Selected Part Separately from Assembly in SolidWorks Description This macro enables users to select a part in an assembly and open it in a separate window with a single command. The macro can be conveniently assigned to a keyboard shortcut (e.g., the 'O' key) for quick access, making it faster to edit parts without manually navigating through the assembly. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly with at least one part. A part in the assembly must be selected before running this macro. Results Note Opens the selected part in a new SolidWorks window. The main assembly remains open, allowing quick switching between the assembly and the part. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object Dim Part As Object Sub main() Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Attempt to open the selected component part Part.OpenCompFile End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/OpenTopLevelAssembly.html": {
    "href": "src/OpenTopLevelAssembly.html",
    "title": "Open and Activate Assembly Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Open and Activate Assembly Macro for SolidWorks Description This macro is designed to navigate through the assembly structure in SolidWorks to find the top-level assembly for a selected component and open it if it's not already active. If the selected component is a part, the macro will open its file directly. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The macro should be run within an open document in SolidWorks. A component must be selected within an assembly or part document before running the macro. Results The macro opens and activates the top-level assembly of the selected component. If the selected component is a part, that part document is opened directly. Steps to Setup the Macro Create the Module: Open the VBA editor in SolidWorks by pressing (Alt + F11). Navigate to the VBA project where you want to include the macro. Right-click on Modules and select Insert > Module. Paste the provided VBA code into the module. Run the Macro: Ensure a component within a sub-assembly is selected in the open document. Save the macro file (e.g., OpenSubAssembly.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro file. Using the Macro: The macro will automatically determine the sub-assembly that directly contains the selected component and open it. If the selected component is nested within multiple sub-assemblies, the macro opens the immediate parent assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swmodel As SldWorks.ModelDoc2 ' Active document object Dim assemdoc As SldWorks.ModelDoc2 ' Assembly document object Dim swselmgr As SldWorks.SelectionMgr ' Selection manager object Dim selcomp As SldWorks.Component2 ' Selected component object Dim swent As SldWorks.Entity ' Entity object representing selected geometry Dim parcomp As SldWorks.Component2 ' Parent component in the hierarchy Dim tempcomp As SldWorks.Component2 ' Temporary component for parent traversal Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set swmodel = swApp.ActiveDoc ' Get the selection manager for the active document Set swselmgr = swmodel.SelectionManager ' Get the first selected object as an entity Set swent = swselmgr.GetSelectedObject(1) ' Retrieve the component associated with the selected entity Set selcomp = swent.GetComponent ' Get the parent component of the selected component Set tempcomp = selcomp.GetParent ' Check if the selected component has no parent (it is a standalone part) If tempcomp Is Nothing Then ' Open the document associated with the selected component Set swmodel = swApp.OpenDoc(selcomp.GetPathName, 2) ' Open as a part document ' Activate the document to display it in the SolidWorks interface Set swmodel = swApp.ActivateDoc(selcomp.Name) Exit Sub End If ' Initialize parent component as the immediate parent Set parcomp = tempcomp ' Traverse the hierarchy to find the topmost parent component Do While Not tempcomp Is Nothing ' Get the parent of the current component Set tempcomp = tempcomp.GetParent ' Update the parent component to the current one if valid If Not tempcomp Is Nothing Then Set parcomp = tempcomp End If Loop ' Get the assembly document associated with the topmost parent component Set assemdoc = parcomp.GetModelDoc2 ' Open the assembly document Set swmodel = swApp.OpenDoc(assemdoc.GetPathName, 2) ' Open as an assembly document ' Activate the assembly document to display it Set swmodel = swApp.ActivateDoc(assemdoc.GetTitle) End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/PARASOLID.html": {
    "href": "src/PARASOLID.html",
    "title": "Export Active Document as PARASOLID File | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Active Document as PARASOLID File Description This macro exports the active SolidWorks document (part or assembly) as a PARASOLID file (.X_T) to the same directory where the original file is saved. The exported file will automatically be named with the same name as the active document but with the .X_T extension. This macro is especially useful for quickly saving parts and assemblies as PARASOLID files for use in other software or for sharing with colleagues. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro does not work for drawing files. Ensure the document is saved before running the macro, as the file will be exported in the same directory. Results Note The macro will save the active document as a .X_T file in the same directory. A message box will appear confirming the location of the saved file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim Part As ModelDoc2 Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Exit if no document is active If Part Is Nothing Then Exit Sub ' Get the path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing (since PARASOLID export is not supported for drawings) If Part.GetType = swDocDRAWING Then Exit Sub End If ' Prepare the path for the PARASOLID file by replacing the extension Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) Path = Replace(Path, Extension, \".X_T\") Extension = \".X_T\" ' Export the file as PARASOLID longstatus = Part.SaveAs3(Path, 0, 0) ' Notify the user about the saved file location MsgBox \"Saved \" & Path, vbInformation End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ParallelMate.html": {
    "href": "src/ParallelMate.html",
    "title": "Mate Addition and Rebuild Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Mate Addition and Rebuild Macro for SolidWorks Description This macro automates the addition of a specific type of mate (e.g., coincident mate) to a selected component in an assembly document. After adding the mate, it forces a rebuild of the assembly to ensure that all changes take effect. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The component to which the mate is to be applied must be selected prior to running the macro. Results Note Adds a specified mate to the selected component. Forces a rebuild of the assembly to reflect the new mate addition. Clears any selections to tidy up the workspace post-operation. Steps to Setup the Macro Prepare the Assembly Document: Open the assembly document in SolidWorks. Select the component to which you want to apply the mate. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code into this module. Run the macro directly from the VBA editor or save and run it from within SolidWorks under Tools > Macro > Run. Using the Macro: The macro will automatically add the specified mate to the selected component. After execution, the assembly is rebuilt to apply the changes, and the selection is cleared. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to add a coincident mate to the selected component in an assembly Sub main() ' Declare and set SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Set swApp = Application.SldWorks Dim Part As SldWorks.ModelDoc2 ' Active document object Set Part = swApp.ActiveDoc ' Validate if a document is loaded If Part Is Nothing Then MsgBox \"No document is open.\", vbExclamation, \"Error\" Exit Sub ' Exit if no document is loaded End If ' Declare variables for operations Dim boolstatus As Boolean ' Status of the operation (not used directly here) Dim longstatus As Long ' Long status to capture errors or warnings Dim longwarnings As Long ' Long warnings (not used directly here) Dim Feature As Object ' Object for the newly added mate ' Add a coincident mate to the selected component ' Parameters: ' - Mate type: 3 (Coincident) ' - Alignment: 2 (Aligned) ' - Flip flag: False (No flipping) ' - Distance/Angle: All set to 0 for this mate type ' - Long status: Captures the success or failure of the mate addition Set Feature = Part.AddMate2(3, 2, False, 0, 0, 0, 1, 1, 0, 0, 0, longstatus) ' Check if the mate was successfully added If longstatus <> 0 Then MsgBox \"Failed to add mate. Status code: \" & longstatus, vbCritical, \"Error\" Exit Sub End If ' Force a rebuild to update the assembly with the new mate Part.ForceRebuild ' Clear any remaining selections to ensure a clean state Part.ClearSelection2 True ' Notify the user of successful operation MsgBox \"Coincident mate added successfully.\", vbInformation, \"Success\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ParentSelect.html": {
    "href": "src/ParentSelect.html",
    "title": "Parent Assembly Selector Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Parent Assembly Selector Macro for SolidWorks Description This macro selects the parent assembly of the currently selected assembly component in SolidWorks. It is particularly useful for navigating assembly hierarchies and understanding component relationships within complex assemblies. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open. At least one component must be selected within the assembly. Results Note The selection in the assembly will be replaced with its parent assembly component. Steps to Setup the Macro Create the VBA Modules: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project and copy the provided macro code into this module. Run the Macro: Ensure that an assembly with selectable components is open. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro will automatically replace the last selected item with its parent assembly, making it the active selection. If the selected item has no parent assembly or is already a top-level component, no changes will be made to the selection. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' SolidWorks VBA macro to select the parent assembly of a selected component Option Explicit ' Main subroutine Sub main() ' Declare variables for SolidWorks objects and operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swSelComp As SldWorks.Component2 ' Selected assembly component object Dim bRet As Boolean ' Boolean for operation success Dim i As Integer ' Loop counter (unused in this version) Dim CurSelCount As Long ' Number of selected objects Dim NewObjToSelect As Object ' Object to select (parent assembly) Dim DwgDocComp As DrawingComponent ' Drawing component object for drawings Dim OldToggleVal As Long ' Stores the previous toggle state of a user preference ' Initialize the SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is open If swModel Is Nothing Then Exit Sub ' Validate the document type (must be assembly or assembly drawing) If swModel.GetType = swDocPART Then Exit Sub ' Exit if the document is a part ElseIf swModel.GetType = swDocDRAWING Then ' Check if the drawing references a part document If swModel.ActiveDrawingView.ReferencedDocument.GetType = swDocPART Then Exit Sub ' Exit if the referenced document is a part End If End If ' Get the selection manager Set swSelMgr = swModel.SelectionManager ' Get the number of selected objects CurSelCount = swSelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Nothing was selected\" Exit Sub End If ' Get the selected object (component or drawing component) If swModel.GetType = swDocDRAWING Then ' For drawings, retrieve the component associated with the drawing view Set DwgDocComp = swSelMgr.GetSelectedObjectsComponent2(CurSelCount) Set swSelComp = DwgDocComp.Component Else ' For assemblies, get the selected assembly component Set swSelComp = swSelMgr.GetSelectedObjectsComponent(CurSelCount) End If ' Get the parent assembly of the selected component Set NewObjToSelect = swSelComp.GetParent If Not NewObjToSelect Is Nothing Then ' Deselect the current selection swSelMgr.DeSelect CurSelCount If swModel.GetType = swDocDRAWING Then ' For drawings, adjust selection to the drawing context Set NewObjToSelect = NewObjToSelect.GetDrawingComponent(swSelMgr.GetSelectedObject6(swSelMgr.GetSelectedObjectCount2(-1), -1)) swModel.ClearSelection2 True ' Temporarily disable the property manager auto-show preference OldToggleVal = swApp.GetUserPreferenceToggle(swAutoShowPropertyManager) swApp.SetUserPreferenceToggle swAutoShowPropertyManager, False ' Select the new object (parent assembly) bRet = NewObjToSelect.Select(True, Nothing) ' Restore the original preference toggle value swApp.SetUserPreferenceToggle swAutoShowPropertyManager, OldToggleVal Else ' For assemblies, directly select the parent assembly bRet = NewObjToSelect.Select(True) End If End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/PrepForNewFeatures.html": {
    "href": "src/PrepForNewFeatures.html",
    "title": "Suppress New Features and Mates in All Configurations Except the Active Configuration | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Suppress New Features and Mates in All Configurations Except the Active Configuration Description This macro suppresses all newly added features and mates in all configurations of the active model, except for the currently active configuration. This allows new features or mates to be added only to the active configuration, ensuring that they are suppressed in other configurations by default. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. Ensure that you have multiple configurations created in the active document. This macro does not work for drawing files. Results Note New features and mates will only be unsuppressed in the active configuration. All other configurations will suppress the newly added features and mates. A message will be displayed upon completion, confirming the configuration is ready for new features. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ****************************************************************************** ' Set New Features And Mates For This Configuration Only ' ****************************************************************************** Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim oConfigs As Variant Dim sCurrentConfig As String Dim sConfigComment As String Dim sConfigAltName As String Dim swConfig As SldWorks.Configuration Dim i As Integer Dim bRet As Boolean Sub main() ' Initialize the SolidWorks application Set swApp = Application.SldWorks ' Exit if no documents are open If swApp.GetDocumentCount() = 0 Then Exit Sub ' Get the active document (part or assembly) Set swModel = swApp.ActiveDoc ' Exit if the document is a drawing If swModel.GetType() = swDocumentTypes_e.swDocDRAWING Then Exit Sub ' Get the active configuration Set swConfig = swModel.GetActiveConfiguration sCurrentConfig = swConfig.Name ' Retrieve all configuration names oConfigs = swModel.GetConfigurationNames ' Loop through each configuration For i = 0 To UBound(oConfigs) Set swConfig = swModel.GetConfigurationByName(oConfigs(i)) ' Check if configuration exists If Not swConfig Is Nothing Then sConfigComment = swConfig.Comment sConfigAltName = swConfig.AlternateName ' If it's the current active configuration, set the new features to be unsuppressed If swConfig.Name = sCurrentConfig Then bRet = swModel.EditConfiguration3(swConfig.Name, swConfig.Name, sConfigComment, sConfigAltName, 32) Else ' For all other configurations, suppress new features and mates by default bRet = swModel.EditConfiguration3(swConfig.Name, swConfig.Name, sConfigComment, sConfigAltName, swConfigurationOptions2_e.swConfigOption_SuppressByDefault) End If End If Next i ' Rebuild the model to apply changes swModel.ForceRebuild3 (False) ' Notify the user that the operation is complete MsgBox (\"This Configuration Is Now Ready For New Features\") End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild Referenced File.html": {
    "href": "src/Rebuild Referenced File.html",
    "title": "Rebuild Referenced Models in All Drawing Sheets | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild Referenced Models in All Drawing Sheets Description This macro rebuilds all referenced models for each sheet in an active SolidWorks drawing document.It validates the active document, iterates through all sheets, and for each sheet, rebuilds the models referenced by the views. After rebuilding, it closes the models to free up memory. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing with multiple sheets and views is open. Post-Conditions Note The referenced files will be opened, rebuilt, and closed. The original drawing views will update. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDrawModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swView As SldWorks.View Dim swSheet As SldWorks.Sheet Dim vSheetNameArr As Variant Dim vSheetName As Variant Dim bRet As Boolean Dim sFileName As String Dim nErrors As Long Sub main() ' Initialize SolidWorks application object Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a drawing document is active If swModel Is Nothing Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Verify the document is a drawing If swModel.GetType <> SwConst.swDocDRAWING Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Cast the active document as a drawing Set swDraw = swModel ' Get the current sheet and sheet names Set swSheet = swDraw.GetCurrentSheet vSheetNameArr = swDraw.GetSheetNames ' Loop through each sheet For Each vSheetName In vSheetNameArr ' Activate each sheet bRet = swDraw.ActivateSheet(vSheetName) Set swView = swDraw.GetFirstView Set swView = swView.GetNextView ' Skip the sheet's overall view ' Loop through all views in the sheet Do While Not swView Is Nothing ' Get the referenced model for the view Set swDrawModel = swView.ReferencedDocument sFileName = swDrawModel.GetPathName ' Open and rebuild the referenced model Set swDrawModel = swApp.ActivateDoc3(sFileName, True, swRebuildActiveDoc, nErrors) ' Rebuild the referenced model swDrawModel.EditRebuild3 ' Close the referenced model after rebuild swApp.CloseDoc swDrawModel.GetTitle ' Move to the next view Set swView = swView.GetNextView Loop Next vSheetName ' Notify the user that the rebuild is complete MsgBox \"Rebuild is done.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/RebuildNSaveAllParts.html": {
    "href": "src/RebuildNSaveAllParts.html",
    "title": "Rebuild And Save All Parts Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild And Save All Parts Macro Description This macro rebuilds and saves a SolidWorks assembly document and all its dependent parts and assemblies. It iterates through dependencies, applies changes, and ensures that all associated files are updated. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be active in SolidWorks. Ensure that all referenced files are accessible during the operation. Results Note The assembly and its dependencies are rebuilt and saved. A message is displayed upon successful completion. Steps to Use the Macro 1. Add a UserForm Open the Visual Basic for Applications (VBA) editor (Alt + F11). Insert a new UserForm: Go to Insert > UserForm. Rename the UserForm to frmRebuild. Add a Label to the UserForm and name it Label1. Adjust the layout as shown in the attached image. Add the UserForm Code to the UserForm. 2. Update the Macro Code Ensure the main macro integrates the UI for rebuild status updates. Use the ChangeLabel method to update the status during processing. 3. Execute the Macro Open an assembly document in SolidWorks. Run the macro to rebuild and save the assembly and its dependencies. The UI will display the status for each file being processed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Public variables for SolidWorks application and global data Public swApp As SldWorks.SldWorks Public swBlisterItem As String Public swProjectNumber As String Dim Mainsourcefiles() As String Dim changedfiles() As String Dim vRebuild As New frmRebuild ' Form instance for rebuild progress display ' Subroutine to rebuild and save the current part and its dependencies Public Sub Change_Stamp(ByRef swpart As ModelDoc2) Dim swDocName As String Dim hDname As Variant Dim vDocName As Variant Dim isChanged As Boolean Dim boolstatus As Boolean Dim sModel As SldWorks.ModelDoc2 Dim nRetVal As Long Dim nErrors As Long Dim nWarnings As Long ' Show progress form vRebuild.Show vbModeless ' Check if the document is a part If swpart.GetType = swDocPART Then ' Force rebuild for part documents swpart.ForceRebuild3 True Debug.Print \"Rebuilt part: \" & swpart.GetPathName Else ' Get all dependent files for the assembly Mainsourcefiles = Get_Depends(swpart) Dim AssemblyName As String ReDim Preserve changedfiles(0) AssemblyName = swpart.GetPathName changedfiles(0) = AssemblyName ' Loop through all dependent files For Each vDocName In Mainsourcefiles Dim pType As String pType = UCase(Mid(vDocName, InStrRev(vDocName, \".\", -1) + 1)) swDocName = vDocName DoEvents vRebuild.ChangeLabel swDocName DoEvents Set sModel = swApp.ActivateDoc2(swDocName, True, nRetVal) ' If the document is a part If pType = \"SLDPRT\" Then isChanged = False ' Check if the file is already rebuilt For Each hDname In changedfiles If UCase(hDname) = UCase(vDocName) Then isChanged = True Exit For End If Next ' Rebuild if not already done If Not isChanged Then If Not sModel Is Nothing Then sModel.ForceRebuild3 True End If End If End If ' If the document is an assembly, process its dependencies recursively If Not sModel Is Nothing Then If pType = \"SLDASM\" Then Call Cycle_Through_Dependents(sModel) End If sModel.Visible = False End If Set sModel = Nothing Next ' Hide progress form vRebuild.Hide ' Rebuild and save the main assembly Set swpart = swApp.ActivateDoc2(AssemblyName, True, nRetVal) swpart.ForceRebuild3 True swpart.Save3 swSaveAsOptions_SaveReferenced, nErrors, nWarnings End If End Sub ' Recursive function to process dependents of an assembly Private Sub Cycle_Through_Dependents(ByRef swpart As ModelDoc2) Dim sourcefiles() As String Dim AssemblyName As String Dim vDocName As Variant Dim swDocName As String Dim nRetVal As Long Dim sModel As ModelDoc2 Dim pType As String Dim isInTheAssembly As Boolean sourcefiles = Get_Depends(swpart) AssemblyName = swpart.GetPathName ' Loop through all dependent files For Each vDocName In sourcefiles pType = UCase(Mid(vDocName, InStrRev(vDocName, \".\", -1) + 1)) swDocName = vDocName isInTheAssembly = False ' Check if the file is already processed For Each hDname In Mainsourcefiles If UCase(hDname) = UCase(vDocName) Then isInTheAssembly = True Exit For End If Next If Not isInTheAssembly Then DoEvents vRebuild.ChangeLabel swDocName DoEvents Set sModel = swApp.ActivateDoc2(swDocName, True, nRetVal) ' If the document is a part If pType = \"SLDPRT\" Then sModel.ForceRebuild3 True End If ' If the document is an assembly, process its dependencies recursively If pType = \"SLDASM\" Then Call Cycle_Through_Dependents(sModel) End If ' Close the document after processing sModel.Visible = False swApp.CloseDoc sModel.GetPathName Set sModel = Nothing End If Next ' Rebuild the main assembly after processing dependents Set swpart = swApp.ActivateDoc2(AssemblyName, True, nRetVal) swpart.ForceRebuild3 True End Sub ' Function to get all dependent files of a given document Private Function Get_Depends(ByRef swpart As ModelDoc2) As Variant Dim depends As Variant Dim sourcefiles() As String Dim d As Integer depends = swApp.GetDocumentDependencies2(swpart.GetPathName, True, True, False) For d = 1 To UBound(depends) Step 2 ReDim Preserve sourcefiles(UBound(sourcefiles) + 1) sourcefiles(UBound(sourcefiles)) = depends(d) Next Get_Depends = sourcefiles End Function ' Main entry point for the macro Sub main() Dim swpart As SldWorks.ModelDoc2 Dim intResp As Integer ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swpart = swApp.ActiveDoc If swpart Is Nothing Then swApp.SendMsgToUser2 \"No active file.\", swMbInformation, swMbOk Exit Sub End If ' Prompt user for confirmation intResp = swApp.SendMsgToUser2(\"The macro will rebuild and save the document and all dependents. Do you wish to continue?\", swMbInformation, swMbYesNo) If intResp = swMbHitNo Then Exit Sub ' Start the processing Change_Stamp swpart swApp.SendMsgToUser2 \"Macro finished successfully.\", swMbInformation, swMbOk End Sub VBA UserForm Code Option Explicit ' Public variable to hold the label text Public lblText As String ' Event triggered when the UserForm is activated Private Sub UserForm_Activate() ' This is a placeholder for additional UI activation logic ' Add any initialization logic here if required End Sub ' Public subroutine to change the caption of Label1 dynamically ' Parameters: ' vText (String) - The text to set as the label caption Public Sub ChangeLabel(ByVal vText As String) ' Update the label's caption with the provided text Me.Label1.Caption = vText End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Referenced_File.html": {
    "href": "src/Rebuild_Referenced_File.html",
    "title": "Rebuild Referenced Models in All Drawing Sheets | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild Referenced Models in All Drawing Sheets Description This macro rebuilds all referenced models for each sheet in an active SOLIDWORKS drawing document.It validates the active document, iterates through all sheets, and for each sheet, rebuilds the models referenced by the views. After rebuilding, it closes the models to free up memory. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SOLIDWORKS must be installed and running on the machine. An active drawing with multiple sheets and views is open. Post-Conditions Note The referenced files will be opened, rebuilt, and closed. The original drawing views will update. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDrawModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swView As SldWorks.View Dim swSheet As SldWorks.Sheet Dim vSheetNameArr As Variant Dim vSheetName As Variant Dim bRet As Boolean Dim sFileName As String Dim nErrors As Long Sub main() ' Initialize SOLIDWORKS application object Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a drawing document is active If swModel Is Nothing Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Verify the document is a drawing If swModel.GetType <> SwConst.swDocDRAWING Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Cast the active document as a drawing Set swDraw = swModel ' Get the current sheet and sheet names Set swSheet = swDraw.GetCurrentSheet vSheetNameArr = swDraw.GetSheetNames ' Loop through each sheet For Each vSheetName In vSheetNameArr ' Activate each sheet bRet = swDraw.ActivateSheet(vSheetName) Set swView = swDraw.GetFirstView Set swView = swView.GetNextView ' Skip the sheet's overall view ' Loop through all views in the sheet Do While Not swView Is Nothing ' Get the referenced model for the view Set swDrawModel = swView.ReferencedDocument sFileName = swDrawModel.GetPathName ' Open and rebuild the referenced model Set swDrawModel = swApp.ActivateDoc3(sFileName, True, swRebuildActiveDoc, nErrors) ' Rebuild the referenced model swDrawModel.EditRebuild3 ' Close the referenced model after rebuild swApp.CloseDoc swDrawModel.GetTitle ' Move to the next view Set swView = swView.GetNextView Loop Next vSheetName ' Notify the user that the rebuild is complete MsgBox \"Rebuild is done.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html": {
    "href": "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Post-Conditions Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Reload_All_Sheet_Formats.html": {
    "href": "src/Reload_All_Sheet_Formats.html",
    "title": "Reloading Sheet Formats in Drawing Documents | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Reloading Sheet Formats in Drawing Documents Description This macro automates the process of reloading sheet formats across all sheets in a SolidWorks drawing document. It iterates through each sheet, temporarily removes the current format, and then reloads the original template. The macro ensures that all drawing sheets are updated with their default formats and concludes by rebuilding and saving the document, improving efficiency in drawing maintenance and formatting updates. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Post-Conditions Note The macro will first remove the existing sheet format and then reload the previous format from the specified location for each sheet. Note: This may remove all content contained within the old/existing format. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swSheet As SldWorks.Sheet Dim vSheetProps As Variant Dim vSheetName As Variant Dim vTemplateName As Variant Dim longstatus As Long Dim longwarnings As Long Dim nErrors As Long Dim nWarnings As Long Dim i As Long ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if an active drawing is open If swModel Is Nothing Then MsgBox \"There is no active drawing document.\" Exit Sub End If ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"Open a drawing first and then try again!\" Exit Sub End If Set swDraw = swModel vSheetName = swDraw.GetSheetNames ' Traverse and update each sheet in the drawing For i = 0 To UBound(vSheetName) swDraw.ActivateSheet vSheetName(i) Set swSheet = swDraw.GetCurrentSheet ' Retrieve sheet properties and format template vTemplateName = swSheet.GetTemplateName vSheetProps = swSheet.GetProperties ' Remove the current sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateNone, _ vSheetProps(2), vSheetProps(3), False, \"\", _ vSheetProps(5), vSheetProps(6), \"Default\", True ' Reload the original sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateCustom, _ vSheetProps(2), vSheetProps(3), False, vTemplateName, _ vSheetProps(5), vSheetProps(6), \"Default\", True swDraw.ViewZoomtofit2 Next i ' Activate the first sheet and force rebuild swDraw.ActivateSheet vSheetName(0) swDraw.ForceRebuild3 False ' Save the drawing swDraw.Save3 1, nErrors, nWarnings ' Clean up Set swDraw = Nothing Set swModel = Nothing Set swApp = Nothing MsgBox \"Sheet format reloaded!\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Return_A_Axis_to_HOME1.html": {
    "href": "src/Return_A_Axis_to_HOME1.html",
    "title": "Mate Toggling Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Mate Toggling Macro for SolidWorks Description This macro toggles the suppression state of a specified mate named \"Angle 0 Deg\" in a SolidWorks document. It first unsuppresses the mate if it is suppressed, then suppresses it again. This can be useful for automating the testing of assembly constraints. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The macro is run within an open SolidWorks assembly that contains a mate named \"Angle 0 Deg.\" Results The mate \"Angle 0 Deg\" is toggled between suppressed and unsuppressed states. The assembly view is maximized before the operations (optional and can be enabled by uncommenting certain code lines). Steps to Setup the Macro Open SolidWorks: Ensure SolidWorks is open and an assembly with the specified mate is active. Access VBA Editor: Press (Alt + F11) to open the VBA editor in SolidWorks. Create a New Macro: Insert a new module and paste the provided VBA code. Run the Macro: Run the macro directly from the VBA editor or save it and run it from the SolidWorks Macro toolbar. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for the SolidWorks application and active document Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part or assembly) Dim boolstatus As Boolean ' Boolean to capture operation success Dim longstatus As Long, longwarnings As Long ' Longs to capture detailed operation statuses Sub main() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the currently active document Set Part = swApp.ActiveDoc ' Optional: Declare and set the active model view Dim myModelView As Object ' Object for controlling the model view Set myModelView = Part.ActiveView ' Optional: Maximize the SolidWorks window (uncomment to enable functionality) ' myModelView.FrameState = swWindowState_e.swWindowMaximized ' Step 1: Select the mate named \"Angle 0 Deg\" boolstatus = Part.Extension.SelectByID2(\"Angle 0 Deg\", \"MATE\", 0, 0, 0, False, 0, Nothing, 0) ' Step 2: Unsuppress the selected mate to activate it Part.EditUnsuppress2 ' Step 3: Clear the current selection to reset the environment Part.ClearSelection2 True ' Step 4: Re-select the mate named \"Angle 0 Deg\" boolstatus = Part.Extension.SelectByID2(\"Angle 0 Deg\", \"MATE\", 0, 0, 0, False, 0, Nothing, 0) ' Step 5: Suppress the selected mate to deactivate it Part.EditSuppress2 ' Step 6: Clear the selection again to clean up the selection state Part.ClearSelection2 True End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rotate All Bodies in Part.html": {
    "href": "src/Rotate All Bodies in Part.html",
    "title": "Rotate All Bodies in Active Part Along X-Axis in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rotate All Bodies in Active Part Along X-Axis in SolidWorks Description This macro rotates all bodies in the active part document along the X-axis by a specified angle (in degrees), in either a positive or negative direction. It’s ideal for adjusting the orientation of all bodies within a part file for alignment or repositioning needs. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part document containing at least one body. The macro prompts the user to enter an angle (in degrees) for the rotation. Results Note All bodies in the part are rotated along the X-axis by the specified angle. The macro clears selections and sets the rotation transformation based on the entered angle. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub SelectOrigin(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, nSelMark As Long) On Error GoTo ErrorHandler Dim swFeat As SldWorks.Feature Dim bRet As Boolean Set swFeat = swModel.FirstFeature Do While Not swFeat Is Nothing If \"OriginProfileFeature\" = swFeat.GetTypeName Then bRet = swFeat.Select2(True, nSelMark) If Not bRet Then MsgBox \"Failed to select the origin feature.\", vbExclamation Exit Sub End If Exit Do End If Set swFeat = swFeat.GetNextFeature Loop Exit Sub ErrorHandler: MsgBox \"Error selecting origin: \" & Err.Description, vbCritical End Sub Sub SelectBodies(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, vBodyArr As Variant) On Error GoTo ErrorHandler Dim swSelMgr As SldWorks.SelectionMgr Dim swSelData As SldWorks.SelectData Dim vBody As Variant Dim swBody As SldWorks.Body2 Dim bRet As Boolean If IsEmpty(vBodyArr) Then MsgBox \"No bodies found in the part.\", vbExclamation Exit Sub End If For Each vBody In vBodyArr Set swBody = vBody Set swSelMgr = swModel.SelectionManager Set swSelData = swSelMgr.CreateSelectData swSelData.Mark = 1 bRet = swBody.Select2(True, swSelData) If Not bRet Then MsgBox \"Failed to select body.\", vbExclamation Exit For End If Next vBody Exit Sub ErrorHandler: MsgBox \"Error selecting bodies: \" & Err.Description, vbCritical End Sub Sub main() On Error GoTo ErrorHandler Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swPart As SldWorks.PartDoc Dim vBodyArr As Variant Dim swFeatMgr As SldWorks.FeatureManager Dim swFeat As SldWorks.Feature Dim bRet As Boolean Set swApp = Application.SldWorks If swApp Is Nothing Then MsgBox \"SolidWorks application not found.\", vbCritical Exit Sub End If Set swModel = swApp.ActiveDoc If swModel Is Nothing Then MsgBox \"No active document found. Please open a part document.\", vbCritical Exit Sub End If If swModel.GetType <> swDocPART Then MsgBox \"Active document is not a part. Please open a part document.\", vbExclamation Exit Sub End If Set swPart = swModel Set swFeatMgr = swModel.FeatureManager ' Clear any existing selection swModel.ClearSelection2 True ' Get all bodies in the part vBodyArr = swPart.GetBodies(swAllBodies) SelectBodies swApp, swModel, vBodyArr ' Select origin for rotation SelectOrigin swApp, swModel, 8 ' Prompt user for rotation angle Dim X As Double X = InputBox(\"Enter angle in degrees for rotation along X-axis:\", \"Rotation Angle\") If Not IsNumeric(X) Then MsgBox \"Invalid input. Please enter a numeric value.\", vbExclamation Exit Sub End If X = X * 0.0174532925 ' Convert degrees to radians ' Rotate bodies in X-axis direction Set swFeat = swFeatMgr.InsertMoveCopyBody2(0, 0, 0, 0, 0, 0, 0, 0, 0, X, False, 1) If swFeat Is Nothing Then MsgBox \"Failed to rotate bodies.\", vbExclamation End If ' Clear selection swModel.ClearSelection2 True Exit Sub ErrorHandler: MsgBox \"An unexpected error occurred: \" & Err.Description, vbCritical End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save AssemblyAsEasm.html": {
    "href": "src/Save AssemblyAsEasm.html",
    "title": "Save Assembly as eDrawings (.easm) File | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Assembly as eDrawings (.easm) File Description This macro saves the currently active assembly as an eDrawings (.easm) file in the same folder as the original assembly file. It automatically assigns the eDrawings file the same name as the assembly and checks if the file already exists in the directory to avoid overwriting. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. The assembly should be saved to ensure the path can be derived correctly. Ensure that the assembly and its components are not read-only or open in another application. Results Note The active assembly is saved as an eDrawings (.easm) file in the same folder as the assembly file. The eDrawings file is saved with the same name as the assembly. If a file with the same name already exists, the macro appends a counter value to the filename to avoid overwriting. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare necessary SolidWorks and macro variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim Name As String ' File name for the eDrawings file Dim Error As Long, Warnung As Long ' Error and warning variables Dim nRetval As Long ' Return value for file saving operations Dim return_value As Boolean ' Boolean variable to check saving status Dim OpenDoc As Object ' Object for the currently active document Dim ZählerInt As Integer ' Counter to avoid overwriting files Dim ZählerStr As String ' String representation of the counter Dim fertig As Boolean ' Boolean variable to indicate completion Dim Pfad As String ' Path for saving the eDrawings file Dim Originalname As String ' Original file name of the assembly Dim Speicherort As String ' Full path for saving the eDrawings file ' -------------------------------------------------------------------------- ' Main subroutine to save the assembly as an eDrawings (.easm) file ' -------------------------------------------------------------------------- Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set OpenDoc = swApp.ActiveDoc() ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If swModel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Initialize counter and variables ZählerInt = 1 fertig = False Originalname = OpenDoc.GetTitle ' Get the original name of the active document ' Loop to determine a unique file name if a file with the same name exists Do ' Get the full path of the currently active document Speicherort = OpenDoc.GetPathName ' Extract the base name of the document (remove extension) Name = OpenDoc.GetTitle Name = Left(Name, (Len(Name) - 7)) ' Convert counter to string and append to the file name if necessary ZählerStr = Str(ZählerInt) ZählerStr = Right(ZählerStr, (Len(ZählerStr) - 1)) Pfad = Name + \".easm\" Speicherort = Left(Speicherort, Len(Speicherort) - Len(Originalname)) + Pfad ' Check if a file with the same name already exists in the directory Pfad = Dir(Speicherort, vbNormal) If Pfad = \"\" Then fertig = True Else ZählerInt = ZählerInt + 1 End If Loop Until fertig = True ' Repeat until a unique file name is found ' Save the assembly as an eDrawings file (.easm) in the specified location return_value = swModel.SaveAs4(Speicherort, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Error, Warnung) If return_value = True Then nRetval = swApp.SendMsgToUser2(\"Problems saving file.\", swMbWarning, swMbOk) End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save Assy As Part (Exterior Components).html": {
    "href": "src/Save Assy As Part (Exterior Components).html",
    "title": "Save Assembly as Part (Exterior Components) Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Assembly as Part (Exterior Components) Macro for SolidWorks Description This macro converts an active SolidWorks assembly into a part file that contains only the exterior components. This feature is useful for reducing the complexity of the assembly when sharing with external stakeholders or for performance improvements in visualization and analysis. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document (.SLDASM) must be actively open in SolidWorks. The assembly should include at least one part to be processed. Results Note The macro saves the active assembly as a new part (.SLDPRT) file that includes only the exterior components. The new part file is saved in the same directory as the original assembly with the same base file name followed by \"SLDPRT\". Steps to Setup the Macro Prepare SolidWorks: Open SolidWorks with the target assembly document loaded. Ensure that the assembly contains at least one part component. Configure and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and copy the provided macro code into this module. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro will automatically save the active document as a new part file with only the exterior components. The original assembly remains unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active SolidWorks document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Extension object for advanced file operations Dim FilePath As String ' Full file path of the current document Dim PathSize As Long ' Length of the file path Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' File path for the new part file Dim nErrors As Long ' Counter for errors during the save operation Dim nWarnings As Long ' Counter for warnings during the save operation ' Main subroutine Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is open If swModel Is Nothing Then MsgBox \"No active document found. Please open a file.\" Exit Sub End If ' Get the ModelDocExtension object for advanced operations Set swModelDocExt = swModel.Extension ' Extract the file path and prepare the new file path FilePath = swModel.GetPathName ' Get the full file path of the active document PathSize = Strings.Len(FilePath) ' Get the length of the file path PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Remove the last 6 characters (e.g., \".SLDASM\") NewFilePath = PathNoExtension & \"SLDPRT\" ' Append \"SLDPRT\" to create the new file path ' Set options to save only the exterior components swApp.SetUserPreferenceIntegerValue swSaveAssemblyAsPartOptions, swSaveAsmAsPart_ExteriorComponents ' Save the assembly as a new part file swModelDocExt.SaveAs NewFilePath, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Nothing, nErrors, nWarnings ' Check for errors and warnings during the save operation If nErrors = 0 And nWarnings = 0 Then ' Success: Notify the user that the save operation was successful MsgBox \"Assembly saved as part file successfully at: \" & NewFilePath Else ' Failure: Notify the user about errors and warnings MsgBox \"Failed to save assembly as part file. Errors: \" & nErrors & \", Warnings: \" & nWarnings End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save Assy As Part.html": {
    "href": "src/Save Assy As Part.html",
    "title": "Save Assembly as Part Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Assembly as Part Macro for SolidWorks Description This macro automates the process of saving an active SolidWorks assembly as a single part file containing only the exterior faces. This method is useful for simplifying complex assemblies into more manageable single files for archiving, basic interfacing, or performance optimization. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks assembly (.SLDASM) must be open. The assembly should contain at least one part. Results Note The active assembly is saved as a new part (.SLDPRT) file containing only the exterior faces. The original assembly remains unchanged. Steps to Setup the Macro Prepare SolidWorks: Ensure SolidWorks is running with an assembly document open. Verify that the assembly contains at least one part component. Configure and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and copy the provided macro code into this module. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro will automatically process the active document and save it as a new part file with the same name appended with \"SLDPRT\". VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define module-level SolidWorks application variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active SolidWorks document object Dim boolstatus As Boolean ' Boolean to capture operation success ' Main subroutine Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is open If swModel Is Nothing Then MsgBox \"No active document found. Please open a file.\" Exit Sub End If ' Variables for file path manipulation Dim FilePath As String ' Full path of the current file Dim PathSize As Long ' Length of the file path Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' New file path for saving ' Extract the current file path and modify it for the new part file FilePath = swModel.GetPathName ' Get the full path of the active document PathSize = Strings.Len(FilePath) ' Get the length of the file path PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Remove the last 6 characters (e.g., \".SLDASM\") NewFilePath = PathNoExtension & \"SLDPRT\" ' Append \"SLDPRT\" to create a new file path ' Save the assembly as a new part file containing only exterior faces boolstatus = swModel.SaveAs3(NewFilePath, 0, 0) ' Save operation with default options ' Check the operation success and notify the user If boolstatus Then MsgBox \"Assembly saved as part file successfully at: \" & NewFilePath Else MsgBox \"Failed to save assembly as part file. Please check the file path and permissions.\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveAndCloseDocument.html": {
    "href": "src/SaveAndCloseDocument.html",
    "title": "Save and Close Document Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save and Close Document Macro for SolidWorks Description This macro automates the process of saving an active SolidWorks document in both DWG and PDF formats and then closes the document. This is particularly useful for ensuring consistent output formats for archival or external use. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks document (part or assembly) must be open. The macro must be executed within the SolidWorks environment. Results Saves the active document in both DWG and PDF formats to a predefined path. Closes the active document after saving. The macro ensures that file paths and names are dynamically generated based on the document title and current date and time to prevent overwriting existing files. Steps to Setup the Macro Create the VBA Modules: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert the module as shown in your project (Macro31). Insert a userform named save and add necessary controls (e.g., command buttons). Run the Macro: Save the macro file (e.g., SaveAndCloseDocument.swp). Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro can be triggered from the userform by interacting with the provided controls. The document will be saved in the specified formats and closed automatically. VBA Macro Code UserForm Code (save) ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' Event handler for the CommandButton click event Private Sub CommandButton1_Click() ' Placeholder for additional functionality or event handling when the button is clicked ' Add your custom code here if needed End Sub ' Event handler for changes in the TextBox Private Sub TextBox1_Change() ' Code that executes whenever the text changes in the TextBox ' Add your custom code here for handling text input End Sub ' Main subroutine for performing save and view operations Sub main() ' Initialize the SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Step 1: Adjust the view to fit the model on the screen Part.ViewZoomtofit2 ' Step 2: Clear any current selections in the active document Part.ClearSelection2 True ' Step 3: Save the document as a PDF in the specified directory ' Replace \"C:\\\\Path\\\\To\\\\Your\\\\Folder\\\\\" with the desired output folder Dim longstatus As Long longstatus = Part.SaveAs3(\"C:\\\\Path\\\\To\\\\Your\\\\Folder\\\\\" & Part.GetTitle & \".pdf\", 0, 2) ' Step 4: Refresh the graphics to ensure the display is updated Part.ViewZoomtofit2 Part.GraphicsRedraw2 ' Step 5: Save the document as a DWG in the specified directory ' Perform another view zoom operation and save the file Part.ViewZoomtofit2 longstatus = Part.SaveAs3(\"C:\\\\Path\\\\To\\\\Your\\\\Folder\\\\\" & Part.GetTitle & \".dwg\", 0, 2) End Sub ' Event handler for the Save button click event Private Sub save_Click() ' Trigger the main subroutine when the Save button is clicked Call main End Sub Macro Module (Macro31) ' Declare variables for the SolidWorks application and document Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim boolstatus As Boolean ' Boolean to capture operation success Dim longstatus As Long, longwarnings As Long ' Longs to capture detailed operation statuses Sub saveDWG() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the currently active document Set Part = swApp.ActiveDoc ' Extract the file name without the extension (assuming file extension length is 9 characters, e.g., \".sldprt\") Dim nomeArquivo As String nomeArquivo = Left(Part.GetTitle, Len(Part.GetTitle) - 9) ' Get the current working directory of SolidWorks Dim Path As String Path = swApp.GetCurrentWorkingDirectory ' Step 1: Set preferences for DXF file format ' Set the DXF format to R2013 version for compatibility boolstatus = swApp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swDxfVersion, swDxfFormat_e.swDxfFormat_R2013) ' Step 2: Adjust the view to fit the model Part.ViewZoomtofit2 ' Step 3: Save the document in DWG format longstatus = Part.SaveAs3(Path & nomeArquivo & \".DWG\", 0, 0) ' Step 4: Save the document in PDF format longstatus = Part.SaveAs3(Path & nomeArquivo & \".PDF\", 0, 0) ' Step 5: Save any changes made to the document Dim swErrors As Long, swWarnings As Long boolstatus = Part.Save3(1, swErrors, swWarnings) ' Step 6: Close the document after saving swApp.CloseDoc(Part.GetTitle) End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveAsSTL.html": {
    "href": "src/SaveAsSTL.html",
    "title": "Save as STL Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save as STL Macro for SolidWorks Description This macro automates the process of saving the active SolidWorks document as an STL file, preserving the original document format and renaming the file extension accordingly. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks document (not a drawing) must be open. The document should not be a drawing file to proceed with the STL save operation. Results Note The active document is saved as an STL file in the same directory with the same file name but with an \".stl\" extension. A message box informs the user of the save location. Steps to Setup the Macro Open Your Document: Ensure that a SolidWorks document other than a drawing is open and active. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code. Run the macro directly from the VBA editor or from within SolidWorks under Tools > Macro > Run. Using the Macro: Once run, if the conditions are met, the document will be saved as an STL file. A confirmation message will display the path where the STL file was saved. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to save the active document as an STL file Sub main() ' Declare and initialize SolidWorks application and the active document Dim swApp As SldWorks.SldWorks ' SolidWorks application object Set swApp = Application.SldWorks Dim Part As ModelDoc2 ' Active document object Set Part = swApp.ActiveDoc ' Check if a document is loaded If Part Is Nothing Then MsgBox \"No document is open.\", vbExclamation, \"Error\" Exit Sub ' Exit if no document is active End If ' Get the full file path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing If Part.GetType = swDocDRAWING Then MsgBox \"The macro does not support drawing documents.\", vbCritical, \"Operation Aborted\" Exit Sub End If ' Replace the current file extension with \".stl\" Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) ' Extract the current file extension Path = Replace(Path, Extension, \".stl\") ' Replace the extension with \".stl\" ' Save the document as an STL file Dim longstatus As Long ' Status of the save operation longstatus = Part.SaveAs3(Path, 0, 0) ' Save the file with STL extension ' Check the status of the save operation and inform the user If longstatus = 0 Then MsgBox \"Failed to save the file as STL.\", vbCritical, \"Error\" Else MsgBox \"Saved as STL: \" & Path, vbInformation, \"Success\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveAssemblyAsPartAndStep.html": {
    "href": "src/SaveAssemblyAsPartAndStep.html",
    "title": "Save Assembly as Part Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Assembly as Part Macro for SolidWorks Description This macro saves the active assembly document as a part file containing only exterior faces. This is useful for creating simplified versions of assemblies for sharing or lightweight referencing. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The user must provide a file path where the part file will be saved. Results Note The assembly is saved as a new part file at the specified path. The part file will contain only the exterior faces of the assembly. Steps to Setup the Macro 1. Open the Assembly: Ensure that the assembly document you want to save as a part file is open in SolidWorks. 2. Load and Execute the Macro: Load the macro into SolidWorks using the VBA editor (Alt + F11). Execute the macro from within SolidWorks by navigating to Tools > Macro > Run. 3. Interact with the User Form: Upon running the macro, a user form will appear requesting the file path for saving the new part file. Use the form to enter or browse to the desired save location and specify the file name. 4. User Form Creation: In the VBA editor, insert a new UserForm. Add a TextBox for inputting the file path. Include a \"Browse\" button to open a file dialog allowing the user to select a directory. Add a \"Save\" button to initiate the save process. Optionally, add an \"Exit\" button to close the form without saving. VBA Macro Code Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ****************************************************************************** ' Description: ' This macro checks if an assembly document is open and extracts its file path ' and file name without extension. It then displays this information in a user form. ' ****************************************************************************** ' Global variables Public swApp As SldWorks.SldWorks ' SolidWorks application object Public swModel As ModelDoc2 ' Active SolidWorks document Public FilePathDefault As String ' Default file path for the active document Sub Main() ' Declare variables for document properties Dim docType As swDocumentTypes_e ' Type of the active document Dim sModelNameSize As Long ' Length of the file name Dim sModelName As String ' File name with extension Dim sModelNameNoExtension As String ' File name without extension Dim FilePathLength As Long ' Length of the full file path ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc 200: _ ' Get the active document Set swModel = swApp.ActiveDoc ' Check if a document is open If (swModel Is Nothing) Then Call swApp.SendMsgToUser(\"No assembly is open. Please open an assembly and restart the macro.\") ' No assembly open Else ' Determine the type of the active document docType = swModel.GetType If (docType = swDocASSEMBLY) Then ' Extract the file name and its components sModelName = Mid(swModel.GetPathName, InStrRev(swModel.GetPathName, \"\\\") + 1) ' File name with extension sModelNameNoExtension = Left(sModelName, InStrRev(sModelName, \".\") - 1) ' File name without extension sModelNameSize = Strings.Len(sModelName) ' Length of the file name FilePathLength = Strings.Len(swModel.GetPathName) ' Length of the full file path ' Extract the directory path Dim n As Long n = FilePathLength - sModelNameSize FilePathDefault = Strings.Left(swModel.GetPathName, n) ' Directory path ' Load and display the user form Load UserForm1 UserForm1.TextBox1.Text = FilePathDefault ' Set the default file path in the form UserForm1.Show Else ' Inform the user that the macro works only with assemblies Call swApp.SendMsgToUser(\"This macro is only for processing assemblies. Please open an assembly and restart the macro.\") End If End If End Sub VBA UserForm Code Option Explicit ' Constants for folder browsing options Private Const BIF_RETURNONLYFSDIRS As Long = &H1 Private Const MAX_PATH As Long = 260 ' Function to calculate the length of a file name Function GetFileLength(ByVal CurrentFileName As String) As Integer Dim PathSize As Integer PathSize = Strings.Len(CurrentFileName) GetFileLength = PathSize End Function ' Function to browse for a folder and return its path Function BrowseFolder(Optional Caption As String, Optional InitialFolder As String) As String Dim SH As Shell32.Shell Dim F As Shell32.Folder Set SH = New Shell32.Shell Set F = SH.BrowseForFolder(0&, Caption, BIF_RETURNONLYFSDIRS, InitialFolder) If Not F Is Nothing Then BrowseFolder = F.Items.Item.Path End If End Function ' Function to list all files in a specified folder Function listfiles(ByVal sPath As String) As Variant Dim vaArray As Variant Dim i As Integer Dim oFile As Object Dim oFSO As Object Dim oFolder As Object Dim oFiles As Object Set oFSO = CreateObject(\"Scripting.FileSystemObject\") Set oFolder = oFSO.GetFolder(sPath) Set oFiles = oFolder.Files If oFiles.Count = 0 Then Exit Function ReDim vaArray(1 To oFiles.Count) i = 1 For Each oFile In oFiles vaArray(i) = oFile.Name i = i + 1 Next listfiles = vaArray End Function ' Subroutine to cancel the user form Private Sub Cancel_Click() Unload Me End Sub ' Subroutine to handle folder selection Private Sub CB1_Click() Dim Path As String Dim n As String n = UserForm1.TextBox1.Text Path = BrowseFolder(\"Select A Folder/Path\", n) If Path = \"\" Then MsgBox \"Please select the path and try again\", vbOKOnly Exit Sub Else Path = Path & \"\\\" TextBox1.Text = Path End If End Sub ' Main subroutine to process file save and conversion operations Private Sub CB3_Click() ' Declare variables for file paths and extensions Dim FilePath As String Dim sFilePath As String Dim PathSize As Long Dim PathNoExtension As String Dim NewFilePath As String Dim nErrors As Long Dim nWarnings As Long Dim swModelDocExt As SldWorks.ModelDocExtension Dim sModelName As String Dim Step As Long Dim Response As Variant Dim ListOfExistingFilesOriginal() As Variant Dim LengthOfFileListOriginal As Integer ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swModelDocExt = swModel.Extension FilePath = UserForm1.TextBox1.Text PathSize = Strings.Len(FilePath) If FilePath = \"\" Then MsgBox \"Target path not specified, please specify a target path!\", vbExclamation, \"Error\" Exit Sub End If PathNoExtension = Strings.Left(FilePath, PathSize) ' Check if the directory contains files If Dir(PathNoExtension & \"*.*\") = \"\" Then sModelName = Mid(swModel.GetPathName, InStrRev(swModel.GetPathName, \"\\\") + 1) sModelName = Left(sModelName, InStrRev(sModelName, \".\") - 1) NewFilePath = PathNoExtension & sModelName & \".SLDPRT\" Response = MsgBox(\"The target folder contains no files.\" & vbCrLf & vbCrLf & \"Default file name is: \" & vbCrLf & vbCrLf & sModelName _ & vbCrLf & vbCrLf & \"Would you like to proceed with this name?\", vbYesNo) If Response = vbYes Then GoTo ProcessFile ElseIf Response = vbNo Then Exit Sub End If Else ' List existing files in the directory ListOfExistingFilesOriginal() = listfiles(PathNoExtension) LengthOfFileListOriginal = UBound(ListOfExistingFilesOriginal, 1) - LBound(ListOfExistingFilesOriginal, 1) + 1 sModelName = Mid(swModel.GetPathName, InStrRev(swModel.GetPathName, \"\\\") + 1) sModelName = Left(sModelName, InStrRev(sModelName, \".\") - 1) Response = MsgBox(\"The following files already exist in the folder:\" & vbCrLf & vbCrLf & Join(ListOfExistingFilesOriginal, vbCrLf & vbCrLf) _ & vbCrLf & vbCrLf & \"Default file name: \" & vbCrLf & sModelName & vbCrLf & vbCrLf & \"Proceed? Yes/No\", vbYesNo) If Response = vbNo Then Dim nmbText As String nmbText = InputBox(\"Enter a new file name\", \"Bohaa Inc.\", sModelName) If nmbText = vbNullString Then Exit Sub sModelName = nmbText NewFilePath = PathNoExtension & sModelName & \".SLDPRT\" ElseIf Response = vbYes Then NewFilePath = PathNoExtension & sModelName & \".SLDPRT\" GoTo ProcessFile End If End If ProcessFile: ' Save the assembly as a part file and optionally generate a STEP file swApp.SetUserPreferenceIntegerValue swSaveAssemblyAsPartOptions, swSaveAsmAsPart_ExteriorFaces swModelDocExt.SaveAs NewFilePath, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Nothing, nErrors, nWarnings Response = MsgBox(\"Generate STEP file?\", vbYesNo) If Response = vbYes Then Set swModel = swApp.OpenDoc(NewFilePath, swDocPART) Set swModel = swApp.ActiveDoc Step = swApp.SetUserPreferenceIntegerValue(swStepAP, 214) sFilePath = PathNoExtension & sModelName & \".STEP\" swModel.SaveAs sFilePath swApp.CloseDoc NewFilePath End If End Sub Private Sub CB4_Click() Set swApp = Nothing Unload Me End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveAssyAsPart(All Parts).html": {
    "href": "src/SaveAssyAsPart(All Parts).html",
    "title": "Save Assembly as Part (All Components) Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Assembly as Part (All Components) Macro Description This macro automates the process of saving a SolidWorks assembly as a single part file that includes all components. It is particularly useful for simplifying assemblies for external use or reducing file size. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly must contain at least one part. Results Note The assembly will be saved as a single part file with all components included. Steps to Setup the Macro 1. Prepare the Assembly: Open the desired assembly in SolidWorks. 2. Run the Macro: Execute the macro. The assembly will be saved as a part file with all components included. The new file will be created in the same directory as the original assembly with the .SLDPRT extension. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare SolidWorks objects and variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Extension object for model operations Dim FilePath As String ' Full file path of the active document Dim PathSize As Long ' Length of the file path string Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' Path for the new part file Dim nErrors As Long ' Variable to store errors during save operation Dim nWarnings As Long ' Variable to store warnings during save operation ' Main subroutine to perform the save operation Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swModelDocExt = swModel.Extension ' Get the full path of the active assembly file FilePath = swModel.GetPathName PathSize = Strings.Len(FilePath) ' Remove the extension from the file path to prepare for the new part file PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Create the new file path with \".SLDPRT\" extension NewFilePath = PathNoExtension & \"SLDPRT\" ' Set the user preference to save the assembly as a part with all components included swApp.SetUserPreferenceIntegerValue swSaveAssemblyAsPartOptions, swSaveAsmAsPart_AllComponents ' Save the assembly as a part file swModelDocExt.SaveAs NewFilePath, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Nothing, nErrors, nWarnings ' Provide feedback to the user If nErrors = 0 And nWarnings = 0 Then MsgBox \"Assembly successfully saved as part: \" & NewFilePath, vbInformation, \"Success\" Else MsgBox \"Save operation completed with errors or warnings.\" & vbCrLf & _ \"Errors: \" & nErrors & vbCrLf & \"Warnings: \" & nWarnings, vbExclamation, \"Attention\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveConfigurationsAsSeparateStepFiles.html": {
    "href": "src/SaveConfigurationsAsSeparateStepFiles.html",
    "title": "Batch Export Configurations to STEP Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Batch Export Configurations to STEP Macro for SolidWorks Description This SolidWorks macro facilitates the batch export of each configuration within an active document to the STEP file format, specifically using the AP214 standard. It is especially useful for efficiently managing multiple configurations in projects where external compatibility is necessary. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly or part document with one or more configurations must be open. The macro should be executed within the SolidWorks environment. Results Note Each configuration of the active document is saved as a separate STEP file in a specified directory. The user is prompted to specify a file prefix and output directory to organize the exported files. A progress bar is displayed during the export process, providing feedback on the operation's progress. Steps to Setup the Macro Open SolidWorks: Launch SolidWorks and open the document you wish to export configurations from. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code. Run the macro from the VBA editor or save it and run it from Tools > Macro > Run. Using the Macro: Follow the prompts to specify the file prefix and output directory. Monitor the progress bar that appears to track the export process. Upon completion, a message will confirm the number of files saved. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Initialize SolidWorks application and document Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Verify an active document is open If swModel Is Nothing Then MsgBox \"No active document found. Please open a model.\", vbCritical, \"Error\" Exit Sub End If ' Declare configuration management objects Dim swConfigMgr As SldWorks.ConfigurationManager Set swConfigMgr = swModel.ConfigurationManager Dim swConfig As SldWorks.Configuration Set swConfig = swModel.GetActiveConfiguration ' Prepare file path and name variables Dim path As String, fname As String, current As String, prefix As String, dirName As String path = swModel.GetPathName fname = Mid(path, InStrRev(path, \"\\\") + 1, Len(path) - InStr(path, \".\") - 1) path = Left(path, InStrRev(path, \"\\\") - 1) current = swModel.GetActiveConfiguration.Name Dim configs As Variant configs = swModel.GetConfigurationNames ' User input for file prefix and output directory prefix = InputBox(\"Enter the prefix:\", \"Names\", fname) If prefix = \"\" Then MsgBox \"Prefix cannot be empty.\", vbCritical, \"Error\" Exit Sub End If dirName = InputBox(\"Enter the directory name for saving:\", \"Directory Name\", \"STEP\") If dirName = \"\" Then MsgBox \"Directory name cannot be empty.\", vbCritical, \"Error\" Exit Sub End If ' Ensure output directory exists If Dir(dirName, vbDirectory) = \"\" Then MkDir dirName ChDir dirName ' Progress bar setup and configuration iteration Dim i As Long For i = 0 To UBound(configs) Dim name As String name = prefix & configs(i) & \".STEP\" swModel.ShowConfiguration2 configs(i) Call swModel.SaveAs3(name, 0, 0) Next i ' Confirmation message and cleanup MsgBox \"Saved \" & CStr(i) & \" files!\", vbInformation, \"Done\" swModel.ShowConfiguration2 current ChDir path End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveDrawingAsPdf.html": {
    "href": "src/SaveDrawingAsPdf.html",
    "title": "Save Drawing as PDF Using Toolbar Button | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Drawing as PDF Using Toolbar Button Description This macro saves the active drawing as a PDF file, exporting all the sheets of the drawing document into a single PDF. It is intended to be used in conjunction with a custom toolbar button, making it easy for users to quickly save the active drawing as a PDF with just one click. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing that has been saved. The drawing should not be read-only, and it should have a valid file path. The macro will not work for parts or assemblies. Results Note All sheets of the active drawing are exported to a PDF file. The PDF file is saved in the same location as the drawing, with the same name but with a .PDF extension. A message box will display the save status, indicating whether the operation was successful or failed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to save the active drawing as a PDF file ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (drawing) Dim swModelDocExt As SldWorks.ModelDocExtension ' Document extension object for saving operations Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Boolean status to capture operation results Dim filename As String ' String to hold the file path of the drawing Dim lErrors As Long ' Error variable for save operation Dim lWarnings As Long ' Warning variable for save operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No current document. Please open a drawing and try again.\", vbCritical, \"No Active Document\" End End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" End End If ' Get the document extension object for saving operations Set swModelDocExt = swModel.Extension ' Get the export PDF data object to specify PDF export options Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved previously (it must have a valid file path) If filename = \"\" Then MsgBox \"Please save the file first and try again.\", vbCritical, \"File Not Saved\" End End If ' Generate the PDF file path by changing the file extension to .PDF filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the PDF file boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF file using the specified filename and options boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the save operation was successful and display a message box If boolstatus Then MsgBox \"Save as PDF successful!\" & vbNewLine & filename, vbInformation, \"Save Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Save Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveDrawingToPDF.html": {
    "href": "src/SaveDrawingToPDF.html",
    "title": "Save Drawing as PDF in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Drawing as PDF in SolidWorks Description This macro instantly saves the active part or assembly drawing as a PDF file. The PDF document is saved in the same folder as the drawing with the same name. This macro works best when assigned to a keyboard shortcut, making it easy to quickly export drawings to PDF format without manually navigating through the menus. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a saved drawing file. The drawing should have at least one sheet. Ensure the drawing is open and active before running the macro. Results Note All sheets of the active drawing are exported as a single PDF file. The PDF is saved in the same location as the drawing file with the same name. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Model document extension object Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Status of export operation Dim filename As String ' Filename of the PDF to be saved Dim lErrors As Long ' Variable to capture errors during save Dim lWarnings As Long ' Variable to capture warnings during save ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently open in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a drawing and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works with drawing files. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the extension object of the active drawing document Set swModelDocExt = swModel.Extension ' Initialize the PDF export data object Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved If filename = \"\" Then MsgBox \"The drawing must be saved before exporting to PDF. Please save the drawing and try again.\", vbCritical, \"Save Required\" Exit Sub End If ' Modify the file path to save as PDF (replace extension with .PDF) filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the drawing boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF using the specified filename and export data boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the export was successful and display appropriate message If boolstatus Then MsgBox \"Drawing successfully saved as PDF:\" & vbNewLine & filename, vbInformation, \"Export Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Export Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveSTEP.html": {
    "href": "src/SaveSTEP.html",
    "title": "Export Active Document as STEP File | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Active Document as STEP File Description This macro exports the active SolidWorks document (part or assembly) as a STEP file to the same directory where the original file is saved. It automatically names the STEP file with the same name as the active document but with the .step extension. This macro is convenient for quickly exporting parts and assemblies as STEP files. You can also download an icon for the macro from this link to use when adding it as a toolbar button. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro does not work for drawing files. Ensure the document is saved before running the macro, as the file will be exported in the same directory. Results Note The macro will save the active document as a .step file in the same directory. A message box will appear confirming the location of the saved file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim Part As ModelDoc2 Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Exit if no document is active If Part Is Nothing Then Exit Sub ' Get the path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing (since STEP export is not supported for drawings) If Part.GetType = swDocDRAWING Then Exit Sub End If ' Prepare the path for the STEP file by replacing the extension Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) Path = Replace(Path, Extension, \".step\") Extension = \".step\" ' Export the file as STEP longstatus = Part.SaveAs3(Path, 0, 0) ' Notify the user about the saved file location MsgBox \"Saved \" & Path, vbInformation End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_Each_Sheet_As_PDF.html": {
    "href": "src/Save_Each_Sheet_As_PDF.html",
    "title": "Export Sheets to PDF Automatically | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheets to PDF Automatically Description This VBA macro automates the process of exporting all sheets in a SOLIDWORKS drawing to individual PDF files. The macro loops through all the sheets in the active drawing and exports each one as a PDFs into the folder that the drawing file is in. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Dim swApp As SldWorks.SldWorks Sub ExportSheetsToPDF() ' Set the SOLIDWORKS application object Set swApp = Application.SldWorks ' Check if SOLIDWORKS is running If swApp Is Nothing Then MsgBox \"Error Connecting to SOLIDWORKS. Please Try Again.\", vbCritical Exit Sub End If ' Set the active document object Dim swDoc As ModelDoc2 Set swDoc = swApp.ActiveDoc ' Check if the active document is valid If swDoc Is Nothing Then MsgBox \"Unable to Connect to a Valid SOLIDWORKS Drawing.\", vbCritical Exit Sub End If ' Ensure the active document is a drawing If swDoc.GetType <> SwConst.swDocumentTypes_e.swDocDRAWING Then MsgBox \"The active document is not a SOLIDWORKS drawing.\", vbCritical Exit Sub End If ' Set the drawing document object Dim swDwgDoc As DrawingDoc Set swDwgDoc = swDoc ' Set the PDF export data object Dim swExportPdfData As SldWorks.ExportPdfData Set swExportPdfData = swApp.GetExportFileData(SwConst.swExportDataFileType_e.swExportPdfData) ' Get the output directory from the drawing's path Dim outputPath As String outputPath = GetFolderFromPath(swDoc.GetPathName) ' Get the list of sheet names in the drawing Dim sheetNames As Variant sheetNames = swDwgDoc.GetSheetNames ' Set the current sheet object Dim swSheet As Sheet Set swSheet = swDwgDoc.GetCurrentSheet ' Generate the base output file name Dim outputFileName As String outputFileName = GetFileNameFromTitle(swDoc.GetTitle, swSheet.GetName) ' Initialize variables for error handling Dim lErrors As Long Dim lWarnings As Long Dim i As Integer Dim exportSuccess As Boolean ' Display the export status in the SOLIDWORKS status bar Dim statusBarPane As StatusBarPane Dim swFrame As SldWorks.Frame Set swFrame = swApp.Frame Set statusBarPane = swFrame.GetStatusBarPane statusBarPane.Visible = True ' Loop through each sheet and export to PDF For i = 0 To UBound(sheetNames) ' Update the status bar with the current sheet being exported statusBarPane.Text = \"Exporting sheet: \" & sheetNames(i) ' Set the current sheet for PDF export exportSuccess = swExportPdfData.SetSheets(SwConst.swExportDataSheetsToExport_e.swExportData_ExportSpecifiedSheets, sheetNames(i)) ' Check for errors in setting the sheet If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical Exit Sub End If ' Export the current sheet as PDF exportSuccess = swDoc.Extension.SaveAs(sheetNames(i) & \".pdf\", SwConst.swSaveAsVersion_e.swSaveAsCurrentVersion, _ SwConst.swSaveAsOptions_e.swSaveAsOptions_Silent, swExportPdfData, lErrors, lWarnings) ' Check for errors during the export If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical HandleErrors lErrors Exit Sub End If Next i End Sub ' Function to get the folder path from the full file path Private Function GetFolderFromPath(fullPath As String) As String GetFolderFromPath = Left(fullPath, InStrRev(fullPath, \"\\\")) End Function ' Function to get the file name without the sheet name Private Function GetFileNameFromTitle(fullTitle As String, sheetName As String) As String GetFileNameFromTitle = Left(fullTitle, InStrRev(fullTitle, sheetName) - 1) End Function ' Sub to handle errors based on error codes Private Sub HandleErrors(errorCode As Long) Select Case errorCode Case SwConst.swFileSaveError_e.swGenericSaveError MsgBox \"File Saving Error\", vbExclamation Case SwConst.swFileSaveError_e.swReadOnlySaveError MsgBox \"File Saving Error: Read-Only Rights\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameEmpty MsgBox \"File Saving Error: Empty Filename\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameContainsAtSign MsgBox \"File Saving Error: Invalid FileName Character\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveFormatNotAvailable MsgBox \"File Saving Error: Invalid File Format\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveAsNameExceedsMaxPathLength MsgBox \"File Saving Error: Filename Exceeds Maximum Path Length\", vbExclamation End Select End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_as_eDRAWING.html": {
    "href": "src/Save_as_eDRAWING.html",
    "title": "Save Part as eDrawings File (.eprt) Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Save Part as eDrawings File (.eprt) Macro Description This macro saves the active SolidWorks part as an eDrawings Part (.eprt) file in the same directory as the original part file. If a file with the same name already exists, the macro increments a counter to avoid overwriting, creating a unique file name as necessary. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. Ensure that SolidWorks is open with a part file loaded before running this macro. Results Note The part will be saved as a .eprt file in the same directory as the original part file. If a file with the same name already exists, the macro will increment a counter to avoid overwriting the existing file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swModel As SldWorks.ModelDoc2 Dim Dateiname As String Dim Error As Long Dim Warnung As Long Dim nRetval As Long Dim reurn_value As Boolean Dim OpenDoc As Object Dim ZählerInt As Integer Dim ZählerStr As String Dim fertig As Boolean Dim Pfad As String Dim Originalname As String Dim Speicherort As String Sub main() ' Initialize SolidWorks application and active document Set swApp = CreateObject(\"SldWorks.Application\") Set swModel = swApp.ActiveDoc Set OpenDoc = swApp.ActiveDoc() ' Set initial variables ZählerInt = 1 fertig = False Originalname = OpenDoc.GetTitle ' Start loop to check for existing files and increment file name if needed Do Speicherort = OpenDoc.GetPathName Name = OpenDoc.GetTitle Name = Left(Name, (Len(Name) - 7)) ' Remove file extension from original name ZählerStr = Str(ZählerInt) ZählerStr = Right(ZählerStr, (Len(ZählerStr) - 1)) Pfad = Name + \".eprt\" Speicherort = Left(Speicherort, Len(Speicherort) - Len(Originalname)) + Pfad Pfad = Dir(Speicherort, vbNormal) ' If no file exists with this name, exit loop If Pfad = \"\" Then fertig = True Else ZählerInt = ZählerInt + 1 ' Increment counter for file name End If Loop Until fertig = True ' Save the file as eDrawings Part (.eprt) return_value = swModel.SaveAs4(Speicherort, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Error, Warnung) ' Display message if there was a problem saving the file If reurn_value = True Then nRetval = swApp.SendMsgToUser2(\"Problems saving file.\", swMbWarning, swMbOk) End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SendEmailViaSolidWorks.html": {
    "href": "src/SendEmailViaSolidWorks.html",
    "title": "Send Email via SolidWorks Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Send Email via SolidWorks Macro Description This macro allows users to send an email from within SolidWorks with the assembly name included in the email subject. It's particularly useful for quick updates or notifications about specific assemblies. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Additional Requirements: An email client installed on the user's system that supports mailto: links (e.g., Microsoft Outlook). Pre-Conditions Note An assembly document must be currently open in SolidWorks. The user's default email client must be configured to handle mailto: links. Results Note An email draft will be opened with the subject containing the name of the currently active assembly. The body of the email can be customized within the macro. Steps to Setup the Macro 1. Configure Email Details: Modify the email recipient, subject prefix, and body message in the macro code to fit your specific needs. 2. Run the Macro: Execute the macro while an assembly document is active in SolidWorks. The macro checks the type of the document and proceeds only if it's an assembly. The system's default email client will open a new email draft with pre-filled details. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Private Declare Function ShellExecute Lib \"shell32.dll\" _ Alias \"ShellExecuteA\" (ByVal hwnd As Long, ByVal lpOperation As String, _ ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, _ ByVal nShowCmd As Long) As Long Dim Email As String, Subj As String Dim Msg As String, URL As String Dim swApp As Object Dim Model As Object Sub Main() ' Initialize SolidWorks application and get the active document Set swApp = CreateObject(\"SldWorks.Application\") Set Model = swApp.ActiveDoc ' Check if there is an active document If Model Is Nothing Then MsgBox \"No active file, please open a SolidWorks file and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Ensure the active document is an assembly If Model.GetType <> swDocASSEMBLY Then MsgBox \"This macro works only with assemblies. Please open an assembly and try again.\", vbExclamation, \"Error\" Exit Sub End If ' Set the recipient email address (modify as needed) Email = \"123@123.com\" ' Compose the subject line using the assembly name Subj = \"Assembly To Work On: \" & Model.GetTitle ' Compose the email body (customize as needed) Msg = \"\" Msg = Msg & \"Dear Boss,\" & vbCrLf & vbCrLf Msg = Msg & \"I want to inform you about the following assembly work:\" & vbCrLf Msg = Msg & \"Your Name Here\" & vbCrLf ' Replace spaces and line breaks with URL-encoded equivalents Msg = Replace(Msg, \" \", \"%20\") Msg = Replace(Msg, vbCrLf, \"%0D%0A\") ' Create the mailto URL URL = \"mailto:\" & Email & \"?subject=\" & Subj & \"&body=\" & Msg ' Open the default email client with the pre-composed email ShellExecute 0&, vbNullString, URL, vbNullString, vbNullString, vbNormalFocus End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SetLayersAndDrawLine.html": {
    "href": "src/SetLayersAndDrawLine.html",
    "title": "Set Layer & Draw Line in SolidWorks Drawing | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Set Layer & Draw Line in SolidWorks Drawing Description This macro sets the specified layer as the current layer in the active SolidWorks drawing document and adds a sketched line on that layer. It automates the process of layer management and drawing creation, ensuring that all subsequent sketched entities are added to the specified layer. This is particularly useful for organizing different sketch entities in separate layers. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing document. The specified layer (Grain) must already exist in the active drawing. Results Note The specified layer (Grain) will be set as the active layer. A new sketch line will be created on the specified layer at the given coordinates. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define necessary variables for SolidWorks application, drawing, and layer manager Dim swApp As Object ' Application object (SldWorks) Dim pDrawing As Object ' Active drawing document object Dim pLayerMgr As Object ' Layer manager object Dim pSketchSegment1 As Object ' Sketch segment object (line) Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active drawing document Set pDrawing = swApp.ActiveDoc ' Check if the active document is a drawing If pDrawing Is Nothing Then swApp.SendMsgToUser \"No active drawing document found. Please open a drawing and try again.\" Exit Sub End If ' Get LayerMgr object from the active drawing document Set pLayerMgr = pDrawing.GetLayerManager ' Check if LayerMgr was obtained successfully If pLayerMgr Is Nothing Then swApp.SendMsgToUser \"Failed to get Layer Manager. Make sure you are in a drawing document.\" Exit Sub End If ' Set \"Grain\" as the current layer Dim res As Boolean res = pLayerMgr.SetCurrentLayer(\"Grain\") ' Check if the layer activation was successful If res = False Then swApp.SendMsgToUser \"Error activating the layer 'Grain'. Please ensure the layer exists in the drawing.\" Exit Sub End If ' Enable adding objects to the database without displaying them pDrawing.SetAddToDB True ' Create a line sketch on the active layer Set pSketchSegment1 = pDrawing.CreateLine2(0.15, 0.25, 0, 0.45, 0.25, 0) ' Check if the line was created successfully If pSketchSegment1 Is Nothing Then swApp.SendMsgToUser \"Failed to create the sketch line. Please check the sketch coordinates.\" pDrawing.SetAddToDB False Exit Sub End If ' Disable adding objects to the database pDrawing.SetAddToDB False ' Clear all selections in the drawing pDrawing.ClearSelection ' Notify user of successful operation swApp.SendMsgToUser \"Layer set and line created successfully on the active layer.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SetReadOnly.html": {
    "href": "src/SetReadOnly.html",
    "title": "Toggle Read-Only Status of SolidWorks Files Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Toggle Read-Only Status of SolidWorks Files Macro Description This macro allows users to toggle the read-only attribute for all files currently loaded in SolidWorks. This is especially useful for preventing unintentional edits or when transitioning files to a protected status in a collaborative environment. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note SolidWorks must be open with one or more documents loaded. Results Note The macro will prompt the user to set all loaded files to read-only or revert them to normal status. Changes will affect all files currently open in the SolidWorks session. Steps to Setup the Macro 1. Prepare SolidWorks: Open the documents you want to modify the read-only status for in SolidWorks. 2. Run the Macro: Execute the main subroutine. Respond to the prompt depending on whether you want to enable or disable read-only status. 3. Review Changes: Verify the read-only status of the files after running the macro to ensure it has been applied or removed as expected. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for SolidWorks application and loaded models Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' SolidWorks model object Dim vModels As Variant ' Array to store all loaded models Dim count As Long ' Count of loaded models Dim index As Long ' Index for iterating through models Dim PathName As String ' Path of the model file ' Main subroutine Sub main() ' Initialize SolidWorks application object Set swApp = Application.SldWorks ' Prompt user with a question about setting files to Read-Only Dim Message As String Dim Style As VbMsgBoxStyle Dim Title As String Dim Response As VbMsgBoxResult count = swApp.GetDocumentCount ' Get the count of loaded models Message = \"Set the files loaded in SolidWorks to read-only?\" & vbNewLine & vbNewLine & _ \"Files loaded in the current SolidWorks session: \" & count Style = vbYesNo + vbQuestion + vbDefaultButton2 Title = \" -= SolidWorks 2014 =- \" ' Display the message box to the user Response = MsgBox(Message, Style, Title) ' If the user selects Yes If Response = vbYes Then MsgBox \"Starting Read-Only setting\" & vbNewLine & vbNewLine & _ \"Files loaded in the current SolidWorks session: \" & count, vbOKOnly, \"SolidWorks 2014\" ' Retrieve all loaded models vModels = swApp.GetDocuments For index = LBound(vModels) To UBound(vModels) Set swModel = vModels(index) ' Access each model Path_File = swModel.GetPathName ' Get the file path of the model ' Set the file to Read-Only SetAttr Path_File, vbReadOnly Next index ' If the user selects No Else MsgBox \" Removing the read-only attribute \", vbOKOnly, \"SolidWorks 2014\" ' Retrieve all loaded models vModels = swApp.GetDocuments For index = LBound(vModels) To UBound(vModels) Set swModel = vModels(index) ' Access each model Path_File = swModel.GetPathName ' Get the file path of the model ' Remove the Read-Only attribute SetAttr Path_File, vbNormal Next index Exit Sub End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ShowHideBodies.html": {
    "href": "src/ShowHideBodies.html",
    "title": "Show and Hide Solid Bodies in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Show and Hide Solid Bodies in SolidWorks Description This macro toggles the visibility of solid bodies in a SolidWorks model by selecting the \"Solid Bodies\" folder (named \"Corps volumiques\" in French) and using the HideBodies and ShowBodies methods. This macro is useful for quickly hiding and then showing all solid bodies in a part document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file with solid bodies. The \"Solid Bodies\" folder must be named \"Corps volumiques\" (French localization) for the macro to work as-is. Results Note All solid bodies in the model are first hidden, then shown. The macro clears selections and selects the \"Solid Bodies\" folder as needed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to toggle visibility of solid bodies Dim swApp As Object Dim Part As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the active document (must be a part) Set Part = swApp.ActiveDoc ' Select the \"Solid Bodies\" folder (localized as \"Corps volumiques\") boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) ' Hide all solid bodies in the folder Part.FeatureManager.HideBodies ' Clear selection to reset Part.ClearSelection2 True ' Re-select the \"Solid Bodies\" folder to toggle visibility back boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) ' Show all solid bodies in the folder Part.FeatureManager.ShowBodies End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/StripColors.html": {
    "href": "src/StripColors.html",
    "title": "Color Strip Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Color Strip Macro for SolidWorks Description This macro facilitates the removal of colors applied at various levels within SolidWorks documents, including assemblies and parts. It targets colors set at the assembly, part, feature, body, and face levels, ensuring that all components exhibit their default appearance. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part or assembly document must be open in SolidWorks. The user can optionally select one or more assembly components if specific component color stripping is required. Results Note The macro removes colors from all selected or active components across multiple levels (assembly, part, feature, body, and face). It ensures a clean, uniform appearance for all components by stripping away any custom color modifications. Steps to Setup the Macro Open SolidWorks: Ensure that a part or assembly document is open and, optionally, select specific components if targeted color removal is desired. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and copy the provided macro code into this module. Run the macro from the VBA editor or by using Tools > Macro > Run within SolidWorks. Using the Macro: Upon running, the macro will automatically detect the type of the active document and begin the color removal process. If specific components are selected, only those will be processed; otherwise, all components in the document will be targeted. A confirmation message will appear once the color stripping is completed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Constants to control which elements have their colors removed Const CLEAR_ASSY As Boolean = True ' Clear colors from assemblies Const CLEAR_PART As Boolean = True ' Clear colors from parts Const CLEAR_BODY As Boolean = True ' Clear colors from bodies Const CLEAR_FEAT As Boolean = True ' Clear colors from features Const CLEAR_FACE As Boolean = True ' Clear colors from faces Const SAVE_FLAG As Boolean = False ' Save the document after clearing colors Const OK_FLAG As Boolean = True ' Show completion message ' SolidWorks application and component list variables Dim swApp As SldWorks.SldWorks Dim swCompList As Object ' Main subroutine Sub main() Dim swDoc As SldWorks.ModelDoc2 ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc Set swCompList = CreateObject(\"Scripting.Dictionary\") ' Initialize component list ' Check the document type and clear colors accordingly If swDoc.GetType = swDocPART Then ClearPartColors swDoc ' Clear part colors ElseIf swDoc.GetType = swDocASSEMBLY Then ClearAssyColors swDoc ' Clear assembly colors End If ' Show completion message if OK_FLAG is set If OK_FLAG Then MsgBox \"Color Stripping Completed\", vbOKOnly End Sub ' Subroutine to clear colors from assemblies and their components Private Sub ClearAssyColors(swDoc As SldWorks.ModelDoc2) On Error Resume Next Dim swAssy As SldWorks.AssemblyDoc Dim swComp As SldWorks.Component2 Dim swComponents As Variant Dim swSelMgr As SldWorks.SelectionMgr Dim SelCount As Integer Dim i As Integer Dim Errors As Long, Warnings As Long ' Cast the document to an assembly Set swAssy = swDoc Set swSelMgr = swDoc.SelectionManager SelCount = swSelMgr.GetSelectedObjectCount ' Get components either from selection or the entire assembly If SelCount < 1 Then swComponents = swAssy.GetComponents(True) If IsEmpty(swComponents) Then Exit Sub Else ReDim swComponents(SelCount - 1) For i = 0 To SelCount - 1 Set swComp = swSelMgr.GetSelectedObjectsComponent3(i + 1, -1) Set swComponents(i) = swComp Next i End If ' Iterate over components to remove colors For i = 0 To UBound(swComponents) Set swComp = swComponents(i) If CLEAR_ASSY Then swComp.RemoveMaterialProperty2 swAllConfiguration, Empty Dim swDoc2 As SldWorks.ModelDoc2 Set swDoc2 = swComp.GetModelDoc2 ' Recursively clear colors for subassemblies and parts If swDoc2.GetType = swDocASSEMBLY Then ClearAssyColors swDoc2 ElseIf swDoc2.GetType = swDocPART Then ClearPartColors swDoc2 End If ' Save the document if SAVE_FLAG is enabled If SAVE_FLAG Then swDoc2.Save3 swSaveAsOptions_Silent, Errors, Warnings Next i ' Save the main assembly document if SAVE_FLAG is enabled If SAVE_FLAG Then swDoc.Save3 swSaveAsOptions_Silent, Errors, Warnings End Sub ' Subroutine to clear colors from parts, bodies, features, and faces Private Sub ClearPartColors(swDoc As SldWorks.ModelDoc2) Dim swPart As SldWorks.PartDoc Set swPart = swDoc ' Remove colors from the part level If CLEAR_PART Then swDoc.Extension.RemoveMaterialProperty swAllConfiguration, Empty ' Remove colors from bodies Dim swBodies As Variant swBodies = swPart.GetBodies2(swAllBodies, False) If IsEmpty(swBodies) Then Exit Sub Dim swBody As SldWorks.Body2 For Each swBody In swBodies If CLEAR_BODY Then swBody.RemoveMaterialProperty swAllConfiguration, Empty ' Remove colors from faces If CLEAR_FACE Then Dim swFace As SldWorks.Face2 For Each swFace In swBody.GetFaces swFace.RemoveMaterialProperty2 swAllConfiguration, Empty Next End If Next ' Remove colors from features If CLEAR_FEAT Then Dim swFeat As SldWorks.Feature Set swFeat = swPart.FirstFeature Do While Not swFeat Is Nothing swFeat.RemoveMaterialProperty2 swAllConfiguration, Empty Set swFeat = swFeat.GetNextFeature Loop End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SweepLength.html": {
    "href": "src/SweepLength.html",
    "title": "Sweep Length Calculation Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Sweep Length Calculation Macro for SolidWorks Description This macro calculates the total length of all sweep features in an active SolidWorks part document. It adds a custom property to the part that stores the total length, making it accessible for documentation or further calculations. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks part document must be open. The part should contain one or more sweep features. Results Note Calculates the cumulative length of all sweep features. Adds a custom property to the part document that lists the total length. Steps to Setup the Macro Create the VBA Modules: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project and copy the provided macro code into this module. Run the Macro: Ensure that a part with sweep features is open. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro automatically processes all sweep features in the active document and calculates their total length. The total length is stored as a custom property in the part document for easy reference. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' SolidWorks VBA macro to calculate the total length of all sweep features in a part Option Explicit ' Main subroutine to calculate the total length of sweep features in a part Sub main() ' Declare variables for SolidWorks application, part document, and features Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swPart As SldWorks.PartDoc ' Active part document Dim FeatureV As Variant ' Variant for iterating over features Dim myFeature As SldWorks.Feature ' Feature object Dim Features As Variant ' Array of features in the part Dim swSweepFtData As SldWorks.SweepFeatureData ' Sweep feature data object Dim swSweepFt As SldWorks.Feature ' Sweep feature object Dim Path As Object ' Path object for sweep Dim swSweepPathSk As SldWorks.Sketch ' Sketch object representing the sweep path Dim swSketchSeg As SldWorks.SketchSegment ' Sketch segment object Dim swModelDocExt As SldWorks.ModelDocExtension ' ModelDocExtension object for custom properties Dim swCustProp As SldWorks.CustomPropertyManager ' Custom property manager object Dim swConfig As SldWorks.Configuration ' Active configuration object Dim TotalLength As Double ' Total length of all sweep features Dim Length As Double ' Length of the current sweep path ' Initialize SolidWorks application and active part document Set swApp = Application.SldWorks Set swPart = swApp.ActiveDoc ' Get all features in the part Features = swPart.FeatureManager.GetFeatures(False) TotalLength = 0 ' Initialize total length to zero ' Process each feature to find sweep features and calculate total length For Each FeatureV In Features Set myFeature = FeatureV If myFeature.GetTypeName2 = \"Sweep\" Then ' Check if the feature is a sweep Set swSweepFt = myFeature Set swSweepFtData = swSweepFt.GetDefinition Call swSweepFtData.AccessSelections(swPart, Nothing) ' Access the sweep feature data ' Get the path of the sweep Set Path = swSweepFtData.Path If Not Path Is Nothing Then ' Get the sketch for the sweep path Set swSweepPathSk = Path.GetSpecificFeature2 Dim vSketchSeg As Variant vSketchSeg = swSweepPathSk.GetSketchSegments Length = 0 ' Initialize length for the current sweep For i = 0 To UBound(vSketchSeg) Set swSketchSeg = vSketchSeg(i) If swSketchSeg.ConstructionGeometry = False Then ' Exclude construction geometry Length = swSketchSeg.GetLength + Length ' Accumulate length End If Next i Length = Length * 1000 ' Convert to millimeters Call swSweepFtData.ReleaseSelectionAccess ' Release the selections End If TotalLength = TotalLength + Length ' Add to total length End If Next FeatureV ' Store the total length in a custom property Set swModelDocExt = swPart.Extension Set swConfig = swPart.GetActiveConfiguration Set swCustProp = swModelDocExt.CustomPropertyManager(swConfig.Name) Call swCustProp.Add3(\"Length\", swCustomInfoDouble, TotalLength, swCustomPropertyReplaceValue) ' Display the total length MsgBox \"Total Length = \" & TotalLength & \"mm\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Template.html": {
    "href": "src/Template.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Results Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/TessBox-EN-MM-INCH.html": {
    "href": "src/TessBox-EN-MM-INCH.html",
    "title": "Precise Bounding Box and Sketch Creation | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Precise Bounding Box and Sketch Creation Description This macro computes precise bounding box values based on the part's geometry. Additionally, it can draw a 3D sketch representing the bounding box dimensions, allowing users to visualize the bounding box directly in the part. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a SolidWorks part file (*.sldprt). Results Note Calculates and displays the part's bounding box dimensions (length, width, height). Adds custom properties for bounding box dimensions. Creates a 3D sketch displaying the bounding box dimensions around the part. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks Sub Main() ' Get SOLIDWORKS application Set swApp = Application.SldWorks ' Get active part document Dim swDoc As SldWorks.partDoc Set swDoc = swApp.ActiveDoc If Not swDoc Is Nothing Then ' Get precise bounding box using extreme points Dim boundingBox As Variant boundingBox = GetBoundingBox(swDoc) ' Draw 3D sketch of bounding box CreateBoundingBoxSketch swDoc, boundingBox ' Calculate bounding box dimensions Dim boxWidth As Double Dim boxHeight As Double Dim boxDepth As Double boxWidth = CDbl(boundingBox(3)) - CDbl(boundingBox(0)) boxHeight = CDbl(boundingBox(4)) - CDbl(boundingBox(1)) boxDepth = CDbl(boundingBox(5)) - CDbl(boundingBox(2)) ' Update custom properties UpdateCustomProperties swDoc, boxWidth, boxHeight, boxDepth Else Debug.Print \"Error: No active part document.\" End If End Sub ' Function to Get Bounding Box Using Extreme Points Function GetBoundingBox(partDoc As SldWorks.partDoc) As Variant Dim boundingData(5) As Double Dim solidBodies As Variant solidBodies = partDoc.GetBodies2(swBodyType_e.swSolidBody, True) Dim minX As Double, minY As Double, minZ As Double Dim maxX As Double, maxY As Double, maxZ As Double If Not IsEmpty(solidBodies) Then Dim i As Integer For i = 0 To UBound(solidBodies) Dim bodyObj As SldWorks.Body2 Set bodyObj = solidBodies(i) Dim coordX As Double, coordY As Double, coordZ As Double ' Get extreme points bodyObj.GetExtremePoint 1, 0, 0, coordX, coordY, coordZ: If i = 0 Or coordX > maxX Then maxX = coordX bodyObj.GetExtremePoint -1, 0, 0, coordX, coordY, coordZ: If i = 0 Or coordX < minX Then minX = coordX bodyObj.GetExtremePoint 0, 1, 0, coordX, coordY, coordZ: If i = 0 Or coordY > maxY Then maxY = coordY bodyObj.GetExtremePoint 0, -1, 0, coordX, coordY, coordZ: If i = 0 Or coordY < minY Then minY = coordY bodyObj.GetExtremePoint 0, 0, 1, coordX, coordY, coordZ: If i = 0 Or coordZ > maxZ Then maxZ = coordZ bodyObj.GetExtremePoint 0, 0, -1, coordX, coordY, coordZ: If i = 0 Or coordZ < minZ Then minZ = coordZ Next End If ' Store bounding box coordinates boundingData(0) = minX: boundingData(1) = minY: boundingData(2) = minZ boundingData(3) = maxX: boundingData(4) = maxY: boundingData(5) = maxZ GetBoundingBox = boundingData End Function ' Subroutine to Draw 3D Sketch Bounding Box Sub CreateBoundingBoxSketch(modelDoc As SldWorks.ModelDoc2, boundingBox As Variant) Dim sketchMgr As SldWorks.SketchManager Dim minX As Double, minY As Double, minZ As Double Dim maxX As Double, maxY As Double, maxZ As Double ' Extract bounding box coordinates minX = CDbl(boundingBox(0)): minY = CDbl(boundingBox(1)): minZ = CDbl(boundingBox(2)) maxX = CDbl(boundingBox(3)): maxY = CDbl(boundingBox(4)): maxZ = CDbl(boundingBox(5)) ' Start 3D sketch Set sketchMgr = modelDoc.SketchManager sketchMgr.Insert3DSketch True sketchMgr.AddToDB = True ' Draw bounding box edges Create3DSketchLine sketchMgr, maxX, minY, minZ, maxX, minY, maxZ Create3DSketchLine sketchMgr, maxX, minY, maxZ, minX, minY, maxZ Create3DSketchLine sketchMgr, minX, minY, maxZ, minX, minY, minZ Create3DSketchLine sketchMgr, minX, minY, minZ, maxX, minY, minZ Create3DSketchLine sketchMgr, maxX, maxY, minZ, maxX, maxY, maxZ Create3DSketchLine sketchMgr, maxX, maxY, maxZ, minX, maxY, maxZ Create3DSketchLine sketchMgr, minX, maxY, maxZ, minX, maxY, minZ Create3DSketchLine sketchMgr, minX, maxY, minZ, maxX, maxY, minZ Create3DSketchLine sketchMgr, minX, minY, minZ, minX, maxY, minZ Create3DSketchLine sketchMgr, minX, minY, maxZ, minX, maxY, maxZ Create3DSketchLine sketchMgr, maxX, minY, minZ, maxX, maxY, minZ Create3DSketchLine sketchMgr, maxX, minY, maxZ, maxX, maxY, maxZ ' Finish 3D sketch sketchMgr.AddToDB = False sketchMgr.Insert3DSketch True ' Update Model modelDoc.ForceRebuild3 True modelDoc.GraphicsRedraw2 End Sub ' Helper Function to Create a 3D Sketch Line Sub Create3DSketchLine(sketchMgr As SldWorks.SketchManager, x1 As Double, y1 As Double, z1 As Double, x2 As Double, y2 As Double, z2 As Double) sketchMgr.CreateLine x1, y1, z1, x2, y2, z2 End Sub ' Subroutine to Update Custom Properties Sub UpdateCustomProperties(modelDoc As SldWorks.ModelDoc2, width As Double, height As Double, depth As Double) Dim customPropMgr As SldWorks.CustomPropertyManager Set customPropMgr = modelDoc.Extension.CustomPropertyManager(\"\") ' Convert dimensions to string format for properties Dim widthStr As String Dim heightStr As String Dim depthStr As String widthStr = Format(width * 1000, \"0.000\") ' Convert to mm heightStr = Format(height * 1000, \"0.000\") depthStr = Format(depth * 1000, \"0.000\") ' Set or update custom properties customPropMgr.Add3 \"BoundingBoxWidth\", swCustomInfoText, widthStr & \" mm\", swCustomPropertyDeleteAndAdd customPropMgr.Add3 \"BoundingBoxHeight\", swCustomInfoText, heightStr & \" mm\", swCustomPropertyDeleteAndAdd customPropMgr.Add3 \"BoundingBoxDepth\", swCustomInfoText, depthStr & \" mm\", swCustomPropertyDeleteAndAdd End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ToggleContext.html": {
    "href": "src/ToggleContext.html",
    "title": "Toggle Context Macro | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Toggle Context Macro Description This macro toggles the editing context in SolidWorks between assembly and part environments, depending on the current context. It reselects the previously selected geometry after the context switch. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be active in SolidWorks. At least one entity or component should be selected for optimal behavior. Results Note If the user is in the assembly editing context, the macro switches to the part editing context. If the user is in the part editing context, the macro switches back to the assembly context. The previously selected entity is reselected after the context change. Steps to Use the Macro Open an assembly document in SolidWorks. Select an entity or component in the assembly. Run the macro to toggle between assembly and part editing contexts. The previously selected entity will remain selected after the context switch. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() On Error Resume Next ' Enable error handling to prevent runtime errors ' Declare SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application instance Dim swAssy As SldWorks.AssemblyDoc ' Active assembly document Dim swDoc As SldWorks.ModelDoc2 ' Generic model document Dim swFM As SldWorks.FeatureManager ' Feature manager for the active document Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager for handling selections Dim swSelData As SldWorks.SelectData ' Selection data Dim swComp As SldWorks.Component2 ' Selected component Dim swEnt As SldWorks.Entity ' Selected entity (generic object) Dim swSafeEnt As SldWorks.Entity ' Safe entity reference for re-selection Dim status As Long ' Status of operations ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc ' Check if the active document is an assembly If swDoc.GetType <> swDocASSEMBLY Then Exit Sub ' Exit if no assembly document is open ' Initialize assembly, feature manager, and selection manager Set swAssy = swDoc Set swFM = swDoc.FeatureManager Set swSelMgr = swDoc.SelectionManager ' Retrieve the first selected object and its component Set swEnt = swSelMgr.GetSelectedObject6(1, -1) ' Get the first selected entity Set swComp = swSelMgr.GetSelectedObjectsComponent3(1, -1) ' Get the component containing the selection ' Get a safe reference to the selected entity for re-selection after context change If Not swEnt Is Nothing Then Set swSafeEnt = swEnt.GetSafeEntity ' Toggle context between assembly and part If swDoc.IsEditingSelf Then ' If currently in assembly context, enter part context If Not (swEnt Is Nothing And swComp Is Nothing) Then swAssy.EditPart2 True, True, status ' Switch to part editing context End If Else ' If currently in part context, enter assembly context swAssy.EditAssembly ' Switch back to assembly context End If ' Re-select the previously selected entity in the new context (if applicable) If Not swEnt Is Nothing Then Set swSelData = swSelMgr.CreateSelectData ' Create a new selection data instance swSafeEnt.Select4 True, swSelData ' Re-select the entity End If ' Clean up all object references Set swApp = Nothing Set swDoc = Nothing Set swAssy = Nothing Set swSelMgr = Nothing Set swSelData = Nothing Set swEnt = Nothing Set swSafeEnt = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Tolerances.html": {
    "href": "src/Tolerances.html",
    "title": "Derived Configuration and Tolerance Adjustment Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Derived Configuration and Tolerance Adjustment Macro for SolidWorks Description This macro facilitates the creation of derived configurations in SolidWorks parts or assemblies, where each configuration is adjusted based on the minimum and maximum tolerances of dimensions. It's designed to automate the process of setting dimensions to their extreme tolerances for testing or analysis purposes. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part or assembly must be open. Optionally, the part or assembly may have dimensions with tolerances set. Results Note Creates derived configurations based on the current configuration. Sets all dimensions within the derived configurations to their minimum and maximum tolerances. Removes all tolerances from dimensions after setting. Activates the derived configuration as the current configuration. Steps to Setup the Macro Create the VBA Module: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project. Run the Macro: Ensure a part or assembly is open and optionally has dimensions with tolerances. Execute the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your macro file. Using the Macro: The macro processes the currently active configuration. It creates two new configurations: one with all dimensions set to their minimum tolerance and one set to maximum. The new configurations are then cleaned of any dimensional tolerances. VBA Macro Code Main Subroutine ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare the SolidWorks application object Dim swApp As SldWorks.SldWorks ' Main subroutine that manages the workflow of the macro Sub main() Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swComp As SldWorks.Component2 ' Assembly component object Dim i As Integer ' Counter for selected components ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Determine if the active document is a part or an assembly If swModel.GetType = swDocPART Then ' Process the active part document ProcessPart swModel ElseIf swModel.GetType = swDocASSEMBLY Then ' Handle assemblies by processing selected components Dim swSelMgr As SldWorks.SelectionMgr Set swSelMgr = swModel.SelectionManager ' Loop through all selected objects in the assembly For i = 1 To swSelMgr.GetSelectedObjectCount2(-1) Set swComp = swSelMgr.GetSelectedObjectsComponent4(i, -1) If Not swComp Is Nothing Then ' Process each selected component as a part ProcessPart swComp.GetModelDoc2 End If Next Else ' Prompt the user to open a part or assembly if none are active MsgBox \"Please open a part or assembly first.\" End If End Sub ' Subroutine to process part documents Sub ProcessPart(ByRef swModel As SldWorks.ModelDoc2) Dim swConf As SldWorks.Configuration ' Active configuration object Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager object ' Get the active configuration and configuration manager Set swConf = swModel.GetActiveConfiguration Set swConfMgr = swModel.ConfigurationManager ' Create derived configurations for minimum and maximum tolerances CreateDerivedConfig swModel, 0 ' Min tolerance swModel.ShowConfiguration2 swConf.Name ' Switch back to the active configuration CreateDerivedConfig swModel, 1 ' Max tolerance End Sub ' Subroutine to create derived configurations for tolerances Sub CreateDerivedConfig(ByRef swModel As SldWorks.ModelDoc2, pass As Integer) Dim swFeat As SldWorks.Feature ' Feature object Dim swDispDim As SldWorks.DisplayDimension ' Display dimension object Dim swDim As SldWorks.Dimension ' Dimension object Dim bRet As Boolean ' Boolean for operation success Dim swMidConf As SldWorks.Configuration ' New configuration object Dim swConf As SldWorks.Configuration ' Current configuration object Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager object ' Get the current active configuration Set swConf = swModel.GetActiveConfiguration Set swConfMgr = swModel.ConfigurationManager ' Avoid creating derived configurations if already in tolerance-specific configurations If InStr(1, swConf.Name, \" - max tolerance\") Or InStr(1, swConf.Name, \" - min tolerance\") Then Exit Sub End If ' Create a new derived configuration for the specified tolerance (min/max) Set swMidConf = swConfMgr.AddConfiguration( _ swConf.Name & \" - \" & IIf(pass = 0, \"min\", \"max\") & \" tolerance\", _ IIf(pass = 0, \"min\", \"max\") & \" tolerance\", _ IIf(pass = 0, \"min\", \"max\") & \" tolerance\", _ 1, _ swConf.Name, _ IIf(pass = 0, \"min\", \"max\") & \" tolerance\") If swMidConf Is Nothing Then Exit Sub ' Process features and dimensions in the model for tolerance adjustments Set swFeat = swModel.FirstFeature Debug.Print \"File = \" & swModel.GetPathName Debug.Print \" Nominal Tolerance:\" ProcessMassProps swModel ' Log mass properties for nominal tolerance Debug.Print \" -----------------------------\" ' Loop through each feature in the model Do While Not swFeat Is Nothing Debug.Print \" \" & swFeat.Name Set swDispDim = swFeat.GetFirstDisplayDimension ' Loop through dimensions in the feature Do While Not swDispDim Is Nothing Set swDim = swDispDim.GetDimension ProcessDimension swModel, swDim SetDimensionToMidTolerance swModel, swDim, pass Set swDispDim = swFeat.GetNextDisplayDimension(swDispDim) Loop Set swFeat = swFeat.GetNextFeature Loop ' Rebuild the model to apply changes bRet = swModel.ForceRebuild3(False): Debug.Assert bRet Debug.Print \" Middle Tolerance:\" ProcessMassProps swModel ' Log mass properties for middle tolerance Debug.Print \" -----------------------------\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Traverse and Export SOLIDWORKS Components to DXF.html": {
    "href": "src/Traverse and Export SOLIDWORKS Components to DXF.html",
    "title": "Traverse and Export SOLIDWORKS Components to DXF | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse and Export SOLIDWORKS Components to DXF Description This VBA macro automates traversing through all components of an active SOLIDWORKS assembly and exporting each part as a DXF file. It handles traversing, exporting flat patterns for sheet metal parts, and saving to a specified location. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Sub Main() ' Initialize SOLIDWORKS application and set active document Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Set swApp = CreateObject(\"SldWorks.Application\") Set swModel = swApp.ActiveDoc ' Prompt user for save path Dim savePath As String savePath = InputBox(\"Where do you want to save the files?\") ' Traverse the active document to process components TraverseComponents swApp.ActiveDoc, savePath End Sub ' Traverse through components and process each one Sub TraverseComponents(swModel As ModelDoc2, savePath As String) Dim swApp As SldWorks.SldWorks Dim swRootComp As SldWorks.Component2 Dim swConf As SldWorks.Configuration Dim swConfMgr As SldWorks.ConfigurationManager Dim vChildComp As Variant Dim i As Long Dim swChildComp As SldWorks.Component2 ' Set the application object Set swApp = CreateObject(\"SldWorks.Application\") Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration Set swRootComp = swConf.GetRootComponent3(True) ' Get child components vChildComp = swRootComp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) Set swModel = swChildComp.GetModelDoc2 ' Check if the model exists If Not swModel Is Nothing Then If swModel.GetType = swDocASSEMBLY Then ' Recursively traverse sub-assemblies TraverseComponents swModel, savePath Else ' Process part (e.g., save as STL or DXF) ProcessPartToDXF swModel, savePath End If End If Next i End Sub ' Process and export flat pattern of the part as DXF Sub ProcessPartToDXF(swModel As SldWorks.ModelDoc2, savePath As String) Dim swFeat As SldWorks.Feature Dim swFlatFeat As SldWorks.Feature ' Iterate through features to find flat pattern Set swFeat = swModel.FirstFeature Do While Not swFeat Is Nothing If swFeat.GetTypeName = \"FlatPattern\" Then Set swFlatFeat = swFeat swFeat.Select (True) swModel.EditUnsuppress2 ' Export the flat pattern as DXF ExportToDXF swModel, savePath ' Suppress the flat pattern after exporting swFlatFeat.Select (True) swModel.EditSuppress2 End If Set swFeat = swFeat.GetNextFeature Loop End Sub ' Export the flat pattern to DXF Sub ExportToDXF(swModel As SldWorks.ModelDoc2, savePath As String) Dim swPart As SldWorks.PartDoc Dim sModelName As String Dim sPathName As String Dim options As Long Dim dataAlignment(11) As Double ' Setup default alignment for export dataAlignment(0) = 0#: dataAlignment(1) = 0#: dataAlignment(2) = 0# dataAlignment(3) = 1#: dataAlignment(4) = 0#: dataAlignment(5) = 0# dataAlignment(6) = 0#: dataAlignment(7) = 1#: dataAlignment(8) = 0# dataAlignment(9) = 0#: dataAlignment(10) = 0#: dataAlignment(11) = 1# ' Get model and path names sModelName = swModel.GetPathName sPathName = savePath & \"\\\" & swModel.GetTitle & \".dxf\" ' Set export options options = 13 ' Export flat pattern geometry, bend lines, and sketches ' Perform DXF export Set swPart = swModel swPart.ExportToDWG sPathName, sModelName, 1, True, dataAlignment, False, False, options, Null End Sub ' Function to extract the title from a file path Public Function GetTitle(filePath As String) As String Dim pathParts As Variant pathParts = Split(filePath, \"\\\") GetTitle = Left(pathParts(UBound(pathParts)), InStr(pathParts(UBound(pathParts)), \".\") - 1) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Utilities_Analyze_Geom.html": {
    "href": "src/Utilities_Analyze_Geom.html",
    "title": "Geometry Analysis Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Geometry Analysis Macro for SolidWorks Description This macro leverages SolidWorks Utilities to perform an extensive geometry analysis on the active document. It identifies common geometric issues such as short edges, knife edges, discontinuous edges, small faces, sliver faces, discontinuous faces, and knife vertices, which can impact the manufacturability and integrity of the design. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks part or assembly must be open. SolidWorks Utilities add-in must be enabled to access the geometry analysis tools. Results Note Identifies and lists various geometric defects. Optional: Saves a detailed report to a specified directory. Updates the Design Checker with the results if necessary. Steps to Setup the Macro Prepare SolidWorks: Ensure SolidWorks is running and that a document is open. Enable the SolidWorks Utilities add-in via Tools > Add-Ins. Configure and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and copy the provided macro code into this module. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Review Results: The macro will execute and identify potential issues based on predefined thresholds. Review the output directly in SolidWorks or in the optional saved report. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define module-level SolidWorks application variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swUtil As SWUtilities.gtcocswUtilities ' SolidWorks Utilities interface Dim swUtilGeometryAnalysis As SWUtilities.gtcocswGeometryAnalysis ' Geometry analysis tool interface Dim longStatus As gtError_e ' Status variable for error tracking Dim bCheckStatus As Boolean ' Status of the geometry check Dim lTotalCount, nFailedItemCount As Long ' Counters for total and failed items Dim FailedItemsArr() As String ' Array to store failed item details Dim i As Long ' Loop counter ' Main subroutine to perform geometry analysis Sub main() ' Connect to SolidWorks Set swApp = Application.SldWorks ' Get the SolidWorks Utilities interface Set swUtil = swApp.GetAddInObject(\"Utilities.UtilitiesApp\") Set swUtilGeometryAnalysis = swUtil.GetToolInterface(gtSwToolGeomCheck, longStatus) ' Initialize the geometry analysis tool longStatus = swUtilGeometryAnalysis.Init() ' Perform geometric checks ' Check for short edges Dim lShortEdgeCount As Long lShortEdgeCount = swUtilGeometryAnalysis.GetShortEdgesCount(0.0005, longStatus) ' Threshold: 0.0005 Call BadGeomList(lShortEdgeCount, \"Short Edge\", \"EDGE\") ' Log short edges ' Check for knife edges Dim lKnifeEdgeCount As Long lKnifeEdgeCount = swUtilGeometryAnalysis.GetKnifeEdgesCount(5#, longStatus) ' Threshold: 5 degrees Call BadGeomList(lKnifeEdgeCount, \"Knife Edge\", \"EDGE\") ' Log knife edges ' Optionally save the report to a file ' Uncomment and specify the desired path to enable report saving ' longStatus = swUtilGeometryAnalysis.SaveReport2(\"C:\\Path\\To\\Save\\Report\", False, True) ' Cleanup after the analysis longStatus = swUtilGeometryAnalysis.Close() ' Update the Design Checker with the results Dim dcApp As Object Set dcApp = swApp.GetAddInObject(\"SWDesignChecker.SWDesignCheck\") Call dcApp.SetCustomCheckResult(bCheckStatus, FailedItemsArr) End Sub ' Helper subroutine to handle bad geometry listing Public Sub BadGeomList(iNum As Long, geomType As String, eSelectType As String) ' Iterate over each failed geometry and log details For i = 1 To iNum nFailedItemCount = nFailedItemCount + 1 ' Expand the FailedItemsArr array to accommodate the new failed item ReDim Preserve FailedItemsArr(1 To 2, 1 To nFailedItemCount) ' Log the failed geometry type and selection type FailedItemsArr(1, nFailedItemCount) = geomType & Str(i) FailedItemsArr(2, nFailedItemCount) = eSelectType Next i End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/addmasscenter.html": {
    "href": "src/addmasscenter.html",
    "title": "Add Center of Mass to a Part in SOLIDWORKS | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Add Center of Mass to a Part in SOLIDWORKS Macro Description This VBA macro is designed to automatically add a center of mass (COM) point to a part in SOLIDWORKS. The macro calculates the center of mass of the part and inserts a point at that location, making it easier to analyze the balance and mass distribution of the part. This functionality is especially useful for engineers and designers who frequently work with parts requiring balance and stability assessments. VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim swModelDoc As SldWorks.ModelDoc2 Dim swCenterMass As SldWorks.Feature Dim swCenterMassReferencePoint As SldWorks.Feature Option Explicit Sub main() Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swCenterMass = swModelDoc.FeatureManager.InsertCenterOfMass Set swCenterMassReferencePoint = swModelDoc.FeatureManager.InsertCenterOfMassReferencePoint End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: None required (uses standard SOLIDWORKS API references) Note Pre-conditions The active document must be a part (.sldprt) in SOLIDWORKS. The part should have a valid material assigned to ensure the correct center of mass is calculated. The part must not be empty (should contain geometry). Note Post-conditions A center of mass point will be inserted into the part. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/assembly_export_dxf.html": {
    "href": "src/assembly_export_dxf.html",
    "title": "Export Sheet Metal to DXF in SOLIDWORKS | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheet Metal to DXF in SOLIDWORKS Macro Description This VBA macro automates the process of exporting all sheet metal parts from a SOLIDWORKS assembly to DXF files. The macro loops through each component in the assembly, checks if it's a sheet metal part, and exports the flat pattern of the part to a DXF file. The macro ensures that duplicate parts are not processed more than once, preventing redundant exports. VBA Macro Code Option Explicit ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** ' Enum for Sheet Metal export options Enum SheetMetalOptions_e ExportFlatPatternGeometry = 1 IncludeHiddenEdges = 2 ExportBendLines = 4 IncludeSketches = 8 MergeCoplanarFaces = 16 ExportLibraryFeatures = 32 ExportFormingTools = 64 ExportBoundingBox = 2048 End Enum ' solidworks app variable Dim swApp As SldWorks.SldWorks Dim swModelDoc As ModelDoc2 Dim swAssemblyDoc As AssemblyDoc Dim swComponents As Variant Dim swComponent As Component2 Dim swComponentIterator Dim processedFiles() As String Sub Main() ReDim processedFiles(0) processedFiles(0) = \"\" Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swAssemblyDoc = swModelDoc swComponents = swAssemblyDoc.GetComponents(False) For Each swComponentIterator In swComponents Set swComponent = swComponentIterator Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then If ExistsInProcessedFiles(processedFiles, swComponentModelDoc.GetPathName()) = False Then addItemToProcessedFiles processedFiles, swComponentModelDoc.GetPathName() PrintDXF swComponentModelDoc End If End If Next swComponentIterator End Sub Function ExistsInProcessedFiles(ByRef arr() As String, fileName As Variant) As Boolean Dim i As Long For i = LBound(arr) To UBound(arr) If arr(i) = fileName Then ExistsInProcessedFiles = True Exit Function End If Next i ExistsInProcessedFiles = False End Function Sub PrintDXF(ByRef swmodel As ModelDoc2) If swmodel.GetType() = swDocumentTypes_e.swDocPART Then Dim swPart As PartDoc Set swPart = swmodel Dim modelPath As String modelPath = swmodel.GetPathName Dim outPath As String outPath = Left(modelPath, Len(modelPath) - 6) outPath = outPath + \"dxf\" swmodel.Visible = True Dim saveDXF As Boolean saveDXF = swPart.ExportToDWG2(outPath, modelPath, swConst.swExportToDWG_e.swExportToDWG_ExportSheetMetal, True, vbEmpty, False, False, SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportBendLines, vbEmpty) If saveDXF Then Debug.Print swmodel.GetTitle() & \" saved\" Else Debug.Print swmodel.GetTitle() & \" failed to save\" End If swmodel.Visible = False End If End Sub Public Sub addItemToProcessedFiles(ByRef arr() As String, ByVal processedFile As String) Dim arrLength As Long arrLength = UBound(arr) If arrLength < 0 Then ReDim arr(0) arr(0) = processedFile Else ReDim Preserve arr(arrLength + 1) arr(arrLength + 1) = processedFile End If End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Note Pre-conditions The active document must be an assembly (.sldasm) in SOLIDWORKS. Ensure that the components contain valid sheet metal parts for export. Note Post-conditions The flat pattern of each sheet metal part will be exported as a DXF file. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/create_boundingbox_feature_for_all_components.html": {
    "href": "src/create_boundingbox_feature_for_all_components.html",
    "title": "Create Bounding Box for Assembly and Components | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Create Bounding Box for Assembly and Components Warning This macro creates the SOLIDWORKS bounding box feature and a not custom one. It requires SOLIDWORKS 2018 or newer. We have an alternative macro that uses sketch entities that create a tightest-fit bounding box. Macro Description This macro creates a bounding box for the main assembly and its components within the active document in SOLIDWORKS. It traverses each component in the assembly, checking if a bounding box has already been created for the component. If not, the bounding box is created, and the component is processed. VBA Macro Code Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swAssembly As AssemblyDoc Dim vComponents As Variant Dim ProcessedFiles As New Collection Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly Set swAssembly = swModel ' Create bounding box for the main assembly CreateBoundingBox swModel ' Get all components of the assembly vComponents = swAssembly.GetComponents(False) Dim component For Each component In vComponents Dim swComponent As Component2 Set swComponent = component Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then ' Check if component already processed If ExistsInCollection(ProcessedFiles, swComponentModelDoc.GetTitle()) = False Then ' Create bounding box for the component CreateBoundingBox swComponentModelDoc ' Add component to processed list ProcessedFiles.Add swComponentModelDoc.GetTitle(), swComponentModelDoc.GetTitle() ' Output component path for debugging Debug.Print swComponentModelDoc.GetPathName() End If End If Next component End Sub Sub CreateBoundingBox(ByRef swComponentModelDoc As ModelDoc2) ' Make the document visible swComponentModelDoc.Visible = True Dim swFeatureManager As featureManager Dim swBoundingBoxFeatureDefinition As BoundingBoxFeatureData Dim swBoundingBoxFeature As Feature ' Access the FeatureManager Set swFeatureManager = swComponentModelDoc.featureManager ' Define the bounding box feature Set swBoundingBoxFeatureDefinition = swFeatureManager.CreateDefinition(swConst.swFmBoundingBox) ' Set options for bounding box creation swBoundingBoxFeatureDefinition.ReferenceFaceOrPlane = swConst.swGlobalBoundingBoxFitOptions_e.swBoundingBoxType_BestFit swBoundingBoxFeatureDefinition.IncludeHiddenBodies = False swBoundingBoxFeatureDefinition.IncludeSurfaces = False ' Create the bounding box feature Set swBoundingBoxFeature = swFeatureManager.CreateFeature(swBoundingBoxFeatureDefinition) ' Make the document invisible again swComponentModelDoc.Visible = False End Sub Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) Exit Function err: ExistsInCollection = False End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/export_all_assembly_components_to_multiple_formats.html": {
    "href": "src/export_all_assembly_components_to_multiple_formats.html",
    "title": "Export Configurations of Assembly Components to Multiple Formats | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export Configurations of Assembly Components to Multiple Formats Description This macro automates the process of exporting all configurations of components within an active SOLIDWORKS assembly to multiple file formats. It iterates through each component in the assembly, checks if it has already been processed to avoid duplicates, and then exports each configuration of the component to .step, .igs, and .x_t formats. The exported files are saved in a specified directory with filenames that include the component name and configuration name. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 7 or later VBA Code '********************************************************* ' Blue Byte Systems Inc. ' Disclaimer: Blue Byte Systems Inc. provides this macro \"as-is\" without any warranties. ' Use at your own risk. The company is not liable for any damages resulting from its use. '********************************************************* Option Explicit Dim swApp As SldWorks.SldWorks Dim swAssembly As SldWorks.AssemblyDoc Dim swComponent As SldWorks.Component2 Dim vComponents As Variant Dim processedFiles As Collection Dim component As Variant Sub Main() Dim errors As Long Dim warnings As Long ' Initialize the collection to keep track of processed files Set processedFiles = New Collection ' Get the SOLIDWORKS application object Set swApp = Application.SldWorks ' Get the active document and ensure it is an assembly Set swAssembly = swApp.ActiveDoc If swAssembly Is Nothing Then MsgBox \"No active document found.\", vbExclamation, \"Error\" Exit Sub End If If swAssembly.GetType <> swDocumentTypes_e.swDocASSEMBLY Then MsgBox \"The active document is not an assembly.\", vbExclamation, \"Error\" Exit Sub End If ' Get all components in the assembly vComponents = swAssembly.GetComponents(False) ' Iterate through each component For Each component In vComponents Set swComponent = component Dim swModel As SldWorks.ModelDoc2 Set swModel = swComponent.GetModelDoc2 If Not swModel Is Nothing Then ' Check if the model has already been processed If Not ExistsInCollection(processedFiles, swModel.GetTitle()) Then ' Save configurations of the model SaveConfigurations swModel ' Add the model to the processed files collection processedFiles.Add swModel.GetTitle(), swModel.GetTitle() End If End If Next component MsgBox \"Export completed successfully.\", vbInformation, \"Done\" End Sub Sub SaveConfigurations(ByRef swModel As SldWorks.ModelDoc2) Dim extensions(1 To 3) As String extensions(1) = \".step\" extensions(2) = \".igs\" extensions(3) = \".x_t\" swModel.Visible = True Dim configurationNames As Variant configurationNames = swModel.GetConfigurationNames Dim configName As Variant For Each configName In configurationNames swModel.ShowConfiguration2 configName Dim extension As Variant For Each extension In extensions Dim outputPath As String outputPath = \"C:\\BOM Export\\\" outputPath = outputPath & Left(swModel.GetTitle(), 6) & \"_\" & configName & extension Dim saveSuccess As Boolean Dim errors As Long Dim warnings As Long saveSuccess = swModel.Extension.SaveAs3(outputPath, _ swSaveAsVersion_e.swSaveAsCurrentVersion, _ swSaveAsOptions_e.swSaveAsOptions_Silent, _ Nothing, Nothing, errors, warnings) If Not saveSuccess Then MsgBox \"Failed to save: \" & outputPath, vbExclamation, \"Error\" End If Next extension Next configName swModel.Visible = False End Sub Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo ErrHandler ExistsInCollection = True Dim temp As Variant temp = col.Item(key) Exit Function ErrHandler: ExistsInCollection = False End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/exportbomtoexcelwiththumbnails.html": {
    "href": "src/exportbomtoexcelwiththumbnails.html",
    "title": "Export BOM with Thumbnail Preview in SOLIDWORKS | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Export BOM with Thumbnail Preview in SOLIDWORKS Macro Description This VBA macro automates the process of exporting a Bill of Materials (BOM) from a SOLIDWORKS drawing into an Excel sheet, while also adding a thumbnail image preview of the parts. The macro is designed to enhance the visualization of BOMs, allowing users to include part thumbnails directly in the Excel output. This can be extremely useful for teams needing a detailed and visual breakdown of the parts for purchasing, inventory, or assembly processes. VBA Macro Code ' All rights reserved to Blue Byte Systems Inc. ' Blue Byte Systems Inc. does not provide any warranties for macros. ' Pre-conditions: BOM pre-selected. ' Results: BOM created in Excel with thumbnail preview. ' Define the width and height of the thumbnail (in pixels) Dim Width As Long ' in pixels Dim Height As Long ' in pixels Dim swApp As Object Dim swModel As Object Dim swTableAnnotation As Object Dim exApp As Object Dim exWorkbook As Object Dim exWorkSheet As Object Dim swSelectionManager As Object ' Enums for SolidWorks document types, Excel alignment, and table header positions Public Enum swDocumentTypes_e swDocDRAWING = 3 End Enum Public Enum xlTextAlignment xlCenter = -4108 End Enum Public Enum swTableHeaderPosition_e swTableHeader_Top = 1 swTableHeader_Bottom = 2 swTableHeader_None = 0 End Enum Public Enum swSelectType_e swSelBOMS = 97 End Enum Sub Main() ' Set the thumbnail dimensions Width = 21 Height = 60 ' Get a pointer to the SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set swModel = swApp.ActiveDoc If swModel Is Nothing Then swApp.SendMsgToUser \"There is no active document\" End End If ' Get the selection manager Set swSelectionManager = swModel.SelectionManager ' Get the count of selected objects Dim Count As Long Count = swSelectionManager.GetSelectedObjectCount2(-1) ' If no BOM is selected, exit the macro If Count = 0 Then swApp.SendMsgToUser \"You have not selected any bill of materials!\" Exit Sub End If ' Traverse the selection and process all selected bill of materials For i = 1 To Count If swSelectionManager.GetSelectedObjectType3(i, -1) = SwConst.swSelectType_e.swSelANNOTATIONTABLES Then Set swTableAnnotation = swSelectionManager.GetSelectedObject6(i, -1) Dim Ret As String Ret = SaveBOMInExcelWithThumbNail(swTableAnnotation) If Ret = \"\" Then Debug.Print \"Success: \" & swTableAnnotation.GetAnnotation.GetName swApp.SendMsgToUser \"The selected BOM has been exported with thumbnail preview to Excel.\" Else swApp.SendMsgToUser \"Macro failed to export!\" End If End If Next i End Sub ' Function to save BOM to Excel with thumbnail preview Public Function SaveBOMInExcelWithThumbNail(ByRef swTableAnnotation As Object) As String ' Initialize Excel application Set exApp = CreateObject(\"Excel.Application\") If exApp Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to initialize the Excel application\" Exit Function End If exApp.Visible = True ' Create a new workbook and worksheet Set exWorkbook = exApp.Workbooks.Add Set exWorkSheet = exWorkbook.ActiveSheet If exWorkSheet Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to get the active sheet\" Exit Function End If ' If the BOM has no rows, return an error If swTableAnnotation.RowCount = 0 Then SaveBOMInExcelWithThumbNail = \"BOM has no rows!\" Exit Function End If Dim swBOMTableAnnotation As BomTableAnnotation Set swBOMTableAnnotation = swTableAnnotation ' Set the column width exWorkSheet.Columns(1).ColumnWidth = Width ' Set the header row index based on the BOM header position Dim HeaderRowIndex As Long Dim swHeaderIndex As Integer swHeaderTable = swTableAnnotation.GetHeaderStyle If swHeaderTable = swTableHeaderPosition_e.swTableHeader_Bottom Then swHeaderIndex = swTableAnnotation.RowCount Else swHeaderIndex = 1 End If ' Traverse through each row in the BOM table Skipper: For i = 0 To swTableAnnotation.RowCount - 1 ' Skip hidden rows If swTableAnnotation.RowHidden(i) Then GoTo Skipper ' Add preview image Dim swComponents As Variant swComponents = swBOMTableAnnotation.GetComponents(i) If Not IsEmpty(swComponents) Then Dim swComponent As Object Set swComponent2 = swComponents(0) Dim swComponentModel As Object Set swComponentModel = swComponent2.GetModelDoc2 If Not swComponentModel Is Nothing Then swComponentModel.Visible = True Dim imagePath As String imagePath = Environ(\"TEMP\") + \"\\tempBitmap.jpg\" swComponentModel.ViewZoomtofit2 Dim saveRet As Boolean Dim er As Long Dim wr As Long saveRet = swComponentModel.Extension.SaveAs(imagePath, 0, 0, Nothing, er, wr) If er + wr > 0 Then SaveBOMInExcelWithThumbNail = \"An error has occurred while trying to save the thumbnail of \" & swModel.GetTitle & \" to the local temp folder. The macro will exit now.\" Exit Function End If swComponentModel.Visible = False exWorkSheet.Rows(i + 1).RowHeight = Height InsertPictureInRange exWorkSheet, imagePath, exWorkSheet.Range(\"A\" & i + 1 & \":A\" & i + 1) End If End If ' Populate Excel sheet with BOM table data For j = 0 To swTableAnnotation.ColumnCount - 1 If swTableAnnotation.ColumnHidden(j) Then GoTo Skipper exWorkSheet.Cells(i + 1, j + 2).Value = swTableAnnotation.DisplayedText(i, j) Next j Next i ' Bold the header row For j = 2 To swTableAnnotation.ColumnCount + 1 exWorkSheet.Cells(swHeaderIndex, j).Font.Bold = True Next j ' Auto-fit the columns and center align the content Dim r As Object Set r = exWorkSheet.Range(exWorkSheet.Cells(1, 2), exWorkSheet.Cells(swTableAnnotation.RowCount + 1, swTableAnnotation.ColumnCount + 1)) r.Columns.AutoFit r.HorizontalAlignment = xlTextAlignment.xlCenter r.VerticalAlignment = xlTextAlignment.xlCenter End Function ' Subroutine to insert a picture in a specific range in Excel Sub InsertPictureInRange(ActiveSheet As Object, PictureFileName As String, TargetCells As Object) ' Inserts a picture and resizes it to fit the TargetCells range Dim p As Object, t As Double, l As Double, w As Double, h As Double If TypeName(ActiveSheet) > \"Worksheet\" Then Exit Sub If Dir(PictureFileName) = \"\" Then Exit Sub ' Import picture Set p = ActiveSheet.Pictures.Insert(PictureFileName) ' Determine positions With TargetCells t = .Top l = .Left w = .Offset(0, .Columns.Count).Left - .Left h = .Offset(.Rows.Count, 0).Top - .Top End With ' Position picture With p .Top = t .Left = l .Width = w .Height = h End With Set p = Nothing End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Microsoft Excel Note Pre-conditions A Bill of Materials (BOM) must be pre-selected in the SOLIDWORKS drawing. Excel must be installed on the machine. Note Post-conditions The BOM will be exported into an Excel file with a part thumbnail preview inserted for each row. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/fract_dec_toggle1.html": {
    "href": "src/fract_dec_toggle1.html",
    "title": "Toggle Dimension Style Between Fraction and Decimal | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Toggle Dimension Style Between Fraction and Decimal Description This macro automates the process of switching between decimal and fractional units in a SolidWorks document. It first checks whether the current unit system is set to decimal. If it is, the macro changes the unit system to fractional, sets the fractional denominator to 1/32, and enables rounding to the nearest fraction. If the current units are fractional, the macro changes the system back to decimal. The macro ensures that users can quickly toggle between these two unit types without manually adjusting the settings. Additionally, it includes error handling to terminate gracefully if any issues arise. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Drawing views with dimensions. Post-Conditions Note The macro will switch the dimension style between fractional and decimal, and vice versa. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swDraw As SldWorks.DrawingDoc ' Active drawing document Dim boolstatus As Boolean ' Status flag for checking if operations were successful Sub main() ' Error handling: jump to ErrorHandler if an error occurs On Error GoTo ErrorHandler ' Get the SolidWorks application instance Set swApp = Application.SldWorks ' Get the active document (drawing) in SolidWorks Set swDraw = swApp.ActiveDoc ' Check if the current unit system is set to Decimal If swDraw.GetUserPreferenceIntegerValue(swUnitsLinearDecimalDisplay) = swDECIMAL Then ' If Decimal, change the unit system to Fractional boolstatus = swDraw.Extension.SetUserPreferenceToggle(swUserPreferenceToggle_e.swUnitsLinearRoundToNearestFraction, 0, True) ' Set linear display to fractional units swDraw.SetUserPreferenceIntegerValue swUnitsLinearDecimalDisplay, swFRACTION ' Set the fractional denominator to 32 (1/32 increments) swDraw.SetUserPreferenceIntegerValue swUnitsLinearFractionDenominator, 32 ' Enable rounding to the nearest fraction swDraw.SetUserPreferenceToggle swUnitsLinearRoundToNearestFraction, True Else ' If the current unit system is not Decimal (i.e., it's Fractional), change it to Decimal boolstatus = swDraw.Extension.SetUserPreferenceInteger(swUserPreferenceIntegerValue_e.swUnitsLinearDecimalDisplay, 0, swFractionDisplay_e.swDECIMAL) ' Set linear display to decimal units swDraw.SetUserPreferenceIntegerValue swUnitsLinearDecimalDisplay, swDECIMAL End If ' End the macro execution End Exit Sub ErrorHandler: ' End the macro execution in case of an error End End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/getsuffaceareaforpainting.html": {
    "href": "src/getsuffaceareaforpainting.html",
    "title": "Surface Area Calculation for Painting in SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Surface Area Calculation for Painting in SolidWorks Description This macro calculates the total surface area of all components within a SolidWorks assembly or part. It's particularly useful for applications where painting or surface treatment is required. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks part or assembly must be open. The macro must be run within the SolidWorks environment. Results Calculates and displays the total surface area. Adds a custom property to the original document that lists the total surface area for painting. Steps to Setup the Macro Create the VBA Modules: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert the modules as shown in your project (aaaMainModule, xxxBodSelection, xxxFunctions). Run the Macro: Save the macro file (e.g., GetSurfaceAreaForPainting.swp). Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro automatically processes the active document, calculating the surface area for each body. Updates the document's properties to include this new data for reference or further processing. VBA Macro Code Main Module (aaaMainModule) ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Global variable for debug mode Global DebugMacro As Integer ' Main subroutine to execute the sequence of operations Sub Main() ' Initialize the debug flag (0 = Debugging off, 1 = Debugging on) DebugMacro = 0 ' Set debug flag off by default ' Step-by-step operations in the process ' Retrieve the original assembly file name and path Call GetOriginalAssemblyFileName ' Save a defeatured version of the file for further processing Call SaveDefeaturedFile ' Open the defeatured file for analysis Call OpenDefeaturedFile ' Retrieve the file name of the defeatured file Call GetDefeaturedFileName ' Select all bodies (solid and surface) in the defeatured part file Call SelectAllBodiesInPartFile ' Calculate the surface area of the selected bodies Call GetSurfaceArea ' Close and delete the defeatured file to clean up Call CloseDefeaturedFile ' Reactivate the original assembly file in SolidWorks Call MakeOriginalAssemblyFileActive ' Add the calculated surface area as a custom property to the original assembly file Call AddSurfaceAreaForPaintingPro ' Save the original assembly file to store the updated custom property Call SaveOriginalAssemblyFile End Sub Body Selection Module (xxxBodSelection) Option Explicit ' Function to select all solid and surface bodies in a part file Function SelectAllBodiesInPartFile() ' Declare variables for SolidWorks application, models, and bodies Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swPart As SldWorks.PartDoc ' Part document object Dim vBody As Variant ' Array of body objects Dim i As Long ' Loop counter for iterating through bodies Dim bRet As Boolean ' Boolean for operation status ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the active document Set swModel = swApp.ActiveDoc ' Clear any existing selections in the active document swModel.ClearSelection2 True ' Debugging: Print the file path of the active document to the Immediate window Debug.Print \"File = \" & swModel.GetPathName ' Check the document type of the active model Select Case swModel.GetType Case swDocPART ' If the document is a part file Set swPart = swModel ' Select all solid bodies in the part vBody = swPart.GetBodies2(swSolidBody, True) SelectBodies swApp, swModel, vBody, \"\" ' Select all surface bodies in the part vBody = swPart.GetBodies2(swSheetBody, True) SelectBodies swApp, swModel, vBody, \"\" Case swDocASSEMBLY ' If the document is an assembly, process it accordingly ProcessAssembly swApp, swModel Case Else ' If the document is neither a part nor an assembly, exit the function Exit Function End Select End Function Functions Module (xxxFunctions) Option Explicit ' Function to retrieve the original assembly file name Function GetOriginalAssemblyFileName() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the active document Set swModel = swApp.ActiveDoc ' Extract the file name of the active document FileName = swModel.GetTitle ' Remove the file extension from the file name FilenameLessExt = Left(FileName, Len(FileName) - 7) ' Extract the file path without the file name FilePath = Replace(swModel.GetPathName, FileName, \"\") ' Debugging: Display the file name without extension if debugging is enabled If DebugMacro = 1 Then MsgBox FilenameLessExt End Function ' Function to save a defeatured version of the file Function SaveDefeaturedFile() ' Save a defeatured version of the file for processing Call DateAndTime ' Generate the current timestamp for file naming ' Construct the path and name for the defeatured file DefeaturedPathName = FilePath & \"for-getting-surfacearea\" & \" \" & CurrentDateAndTime & \".sldprt\" ' Debugging: Display the defeatured file path if debugging is enabled If DebugMacro = 1 Then MsgBox DefeaturedPathName ' Save the defeatured file using SolidWorks API boolstatus = swModel.Extension.SaveDefeaturedFile(DefeaturedPathName) End Function ' Function to generate a timestamp for file naming Function DateAndTime() ' Format the current date sDay = Format(Day(Date), \"00\") sMonth = Format(Month(Date), \"00\") sYear = Format(Year(Date), \"0000\") CurrentDate = sYear & \"-\" & sMonth & \"-\" & sDay ' Format the current time sHour = Left(Time, 2) sMinute = Mid(Time, 4, 2) sSecond = Right(Time, 2) CurrentTime = sHour & sMinute & sSecond ' Combine date and time into a single timestamp CurrentDateAndTime = \"(\" & CurrentDate & \" \" & CurrentTime & \")\" ' Debugging: Display the timestamp if debugging is enabled If DebugMacro = 1 Then MsgBox CurrentDateAndTime End Function ' Function to open the defeatured file Function OpenDefeaturedFile() ' Open the defeatured file using SolidWorks API Set swModel = swApp.OpenDoc6(DefeaturedPathName, 1, 0, \"\", longstatus, longwarnings) ' Set the active document to the opened defeatured file Set swModel = swApp.ActiveDoc End Function ' Function to calculate the surface area of the defeatured model Function GetSurfaceArea() ' Create a mass property object for the defeatured model Set swMass = swModel.Extension.CreateMassProperty ' Use system units for the calculation swMass.UseSystemUnits = False ' Retrieve the total surface area of the defeatured model TotalSurfaceArea = swMass.SurfaceArea End Function ' Function to close and delete the defeatured file Function CloseDefeaturedFile() ' Close the defeatured file in SolidWorks swApp.QuitDoc DefeaturedFileName ' Delete the defeatured file from the file system Kill DefeaturedPathName End Function ' Function to add the calculated surface area to the original file's custom properties Function AddSurfaceAreaForPaintingPro() ' Remove any existing custom property for \"Total Painted Surface Area\" retval = swModel.DeleteCustomInfo2(\"\", \"Total Painted Surface Area\") ' Add the new surface area as a custom property to the original file retval = swModel.AddCustomInfo3(\"\", \"Total Painted Surface Area\", 30, TotalSurfaceArea) End Function ' Function to save the original assembly file Function SaveOriginalAssemblyFile() ' Save the active document in SolidWorks swModel.Save End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "| 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Introduction to VBA Macros in SOLIDWORKS What is a VBA Macro? A VBA (Visual Basic for Applications) macro is a small program written using the VBA programming language, designed to automate repetitive tasks within software applications. In the context of SOLIDWORKS, VBA macros allow users to streamline their workflows by automating design tasks, reducing manual input, and increasing overall productivity. Instead of performing the same actions manually, a macro can execute them in seconds, saving time and minimizing human error. Why Use VBA Macros in SOLIDWORKS? SOLIDWORKS is a powerful CAD software used by engineers and designers to create complex 3D models and assemblies. However, as with any software, there are tasks that are repetitive or prone to error when performed manually. This is where VBA macros come in handy—they enable users to automate tasks such as: Modifying properties or configurations across multiple files Generating drawings or BOMs (Bill of Materials) Editing or creating features in parts and assemblies Exporting data to various formats such as DXF, PDF, or Excel Using VBA macros can significantly improve your efficiency, especially when dealing with large assemblies, multi-part projects, or standardized workflows. Instead of spending time on repetitive actions, users can focus on innovation and improving their designs. Getting Started with SOLIDWORKS VBA Macros To use VBA macros in SOLIDWORKS, you can either write your own macros or use existing ones provided by various sources, such as Blue Byte Systems’ SOLIDWORKS VBA Macro Library. The library offers a collection of macros that automate common tasks, each categorized for easy access based on functionality (e.g., part creation, assembly management, drawing automation). How to Create or Run a VBA Macro in SOLIDWORKS Open the VBA Editor: Go to the Tools menu in SOLIDWORKS, then navigate to Macro and select New to create a new macro, or Run to execute an existing one. Write or Edit the Macro: If you’re creating a new macro, the VBA editor will open, allowing you to write your code. Macros consist of VBA code that interfaces with SOLIDWORKS' API (Application Programming Interface) to control different aspects of the application. Execute the Macro: Once the macro is written or selected, you can run it directly within SOLIDWORKS. The macro will perform the tasks it's programmed for, interacting with the current part, assembly, or drawing. Test and Debug: Always test macros on sample files to ensure they work as expected, and make necessary adjustments to the code if any issues arise. Free VBA Macro Library by Blue Byte Systems Blue Byte Systems provides a comprehensive VBA macro library tailored for SOLIDWORKS users. These macros are designed to help users automate tasks in various areas, including part modeling, assembly management, and sketching. The library is completely free, making it accessible to all SOLIDWORKS users, from beginners to advanced engineers. The macros are organized into categories for easy navigation: Part Automation: Macros related to modifying or creating parts. Assembly Automation: Macros to streamline assembly management. Drawing Automation: Macros focused on automating drawing creation and export. Sketch Automation: Macros for working with sketches more efficiently. Whether you're looking to automate repetitive tasks, modify part properties, or generate drawings quickly, the library offers solutions that save you time and enhance your productivity."
  },
  "src/madechangesbutforgottocheckout.html": {
    "href": "src/madechangesbutforgottocheckout.html",
    "title": "Made Changes To File But Forgot to Check It Out | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Made Changes To File But Forgot to Check It Out Make sure to add the PDMWorks Enterprise reference before you run this macro from References > Tools. Macro Description This VBA macro is useful to preserve changes made to a file that has not been checked out in SOLIDWORKS. It will check out the file from the vault and then all the changes made to the file when it was read only allowing you to save the changes you made to the file and check it back into the vault VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim edmvault As EdmVault5 Dim swmodeldoc As ModelDoc2 dim vaultName as string Sub main() ' change this to your vault name vaultName = \"bluebyte\" Set swApp = Application.SldWorks Dim frame As frame Set frame = swApp.frame Dim handle As Long handle = frame.GetHWnd Set edmvault = New EdmVault5 edmvault.LoginAuto vaultName, handle Set swmodeldoc = swApp.ActiveDoc Dim filePath As String filePath = swmodeldoc.GetPathName Dim file As IEdmFile5 Dim folder As IEdmFolder5 Set file = edmvault.GetFileFromPath(filePath, folder) Debug.Print file.Name swmodeldoc.ForceReleaseLocks file.LockFile folder.ID, handle swmodeldoc.ReloadOrReplace False, filePath, False End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS and PDM 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: PDMWorks Enterprise Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/masseditfilesdatacardfromexcel.html": {
    "href": "src/masseditfilesdatacardfromexcel.html",
    "title": "Mass Edit Files DataCard Variables From Excel | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Note ▶️🚨 Watch the video where we wrote this macro and subscribe to our YouTube stream where we make live programming on the SOLIDWORKS API! Watch Now! Hit the Subscribe button and stay updated with our live streams! Mass Edit Files DataCard Variables From Excel Make sure to add the PDMWorks Enterprise reference before you run this macro from References > Tools. Macro Description This VBA macro is useful to collect the values of data card variables for all files found in a folder. The macro will ask you for a folder in PDM and read fill the variables from PDM to Excel. Excel Macro File Download it from here VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Sub ReadFolderFilesVariables() Dim vault As EdmVault5 Set vault = New EdmVault5 Dim handle As Long handle = Application.Hwnd vault.LoginAuto \"bluebyte\", handle Dim folderPath As String Dim vaultrootFolderPath As String vaultrootFolderPath = vault.RootFolderPath folderPath = InputBox(\"Path:\", \"Folder Content Variables Updater\", vaultrootFolderPath) Dim colIndex As Integer colIndex = 2 Dim folder As IEdmFolder5 Set folder = vault.GetFolderFromPath(folderPath) Dim position As IEdmPos5 Dim file As IEdmFile5 Set position = folder.GetFirstFilePosition While position.IsNull = False Set file = folder.GetNextFile(position) ' fill the excel range with file metadata Dim variableEnumerator As IEdmEnumeratorVariable8 Set variableEnumerator = file.GetEnumeratorVariable Range(\"A\" & colIndex).Value = file.ID Range(\"B\" & colIndex).Value = file.Name Dim description variableEnumerator.GetVarFromDb \"Description\", \"@\", description Range(\"C\" & colIndex).Value = description Dim partNumber variableEnumerator.GetVarFromDb \"PartNumber\", \"@\", partNumber Range(\"D\" & colIndex).Value = partNumber colIndex = colIndex + 1 variableEnumerator.CloseFile True Wend End Sub Sub UpdateFolderFilesVariables() Dim vault As EdmVault5 Set vault = New EdmVault5 Dim handle As Long handle = Application.Hwnd vault.LoginAuto \"bluebyte\", handle Dim lastRow As Integer Dim folderID As Long folderID = -1 lastRow = Cells(Rows.Count, 1).End(xlUp).Row For i = 2 To lastRow Dim ID As Long Dim file As IEdmFile5 ID = Range(\"A\" & i).Value Set file = vault.GetObject(EdmObject_File, ID) If folderID = -1 Then folderID = GetFolderIDFromFromRowTwo(file) End If 'check out file On Error GoTo errorHandler: If file.IsLocked = False Then file.LockFile folderID, handle End If 'set my variables Dim variableEnumerator As IEdmEnumeratorVariable8 Set variableEnumerator = file.GetEnumeratorVariable Dim description description = Range(\"C\" & i).Value Dim partNumber partNumber = Range(\"D\" & i).Value variableEnumerator.SetVar \"Description\", \"@\", description variableEnumerator.SetVar \"PartNumber\", \"@\", partNumber variableEnumerator.CloseFile True file.UnlockFile handle, \"Updated datacard\" errorHandler: Debug.Print Err.description Next i Debug.Print \"Completed\" End Sub Public Function GetFolderIDFromFromRowTwo(ByRef file As IEdmFile5) As Long Dim position As IEdmPos5 Dim folder As IEdmFolder5 Dim folderID As Long Set position = file.GetFirstFolderPosition Set folder = file.GetNextFolder(position) folderID = folder.ID GetFolderIDFromFromRowTwo = folderID End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS and PDM 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: PDMWorks Enterprise Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/sketchbox.html": {
    "href": "src/sketchbox.html",
    "title": "SketchBox Macro for SolidWorks | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "SketchBox Macro for SolidWorks Description This macro creates a rectangle centered about the origin on a preselected plane in SolidWorks. It automates the process of sketching a rectangle and ensures that dimensions are appropriately assigned. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A plane or face must be preselected before running the macro. SolidWorks must have an active document. Results Note A centered rectangle will be drawn on the selected plane or face. A construction line connecting opposite corners of the rectangle will be added and constrained to the origin. Dimensions for the width and height of the rectangle will be created. Steps to Setup the Macro 1. Select a Plane or Face: In SolidWorks, preselect the plane or face where the rectangle will be sketched. 2. Run the Macro: Execute the macro. The rectangle and associated features will be created automatically. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim SelMgr As Object ' Selection manager for the active document Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Long status for warnings/errors Dim Feature As Object ' Feature object Dim CurSelCount As Long ' Count of selected items Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Ensure there is an active document If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"Error\" Exit Sub End If ' Initialize the selection manager Set SelMgr = Part.SelectionManager ' Disable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, False ' Check if a plane or face is preselected CurSelCount = SelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Please preselect a plane or face before running the macro.\", vbExclamation, \"No Selection\" Exit Sub End If ' Insert a new sketch on the selected plane or face boolstatus = Part.Extension.SelectByID2(\"\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.InsertSketch2 True Part.ClearSelection2 True ' Create a rectangle centered about the origin Part.SketchRectangle -0.037, 0.028, 0, 0.015, -0.019, 0, True ' Clear selection and add a diagonal construction line Part.ClearSelection2 True Dim Line As Object Set Line = Part.CreateLine2(-0.037, -0.019, 0, 0.015, 0.028, 0) Line.ConstructionGeometry = True ' Add midpoint constraints to ensure the rectangle is centered boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, 0) Part.SketchAddConstraints \"sgATMIDDLE\" Part.ClearSelection2 True ' Add dimensions to the rectangle boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", -0.001, 0.027, 0, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(-0.0004, 0.045, 0) ' Horizontal dimension Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.030, 0.001, 0, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.061, -0.001, 0) ' Vertical dimension Part.ClearSelection2 True ' Re-enable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, True ' Inform the user that the macro is complete MsgBox \"Rectangle sketch created successfully.\", vbInformation, \"Success\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html": {
    "href": "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html",
    "title": "Traverse Assembly Components in SOLIDWORKS Using VBA | 🧩 SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly Components in SOLIDWORKS Using VBA Macro Description This article explains how to write a VBA macro in SOLIDWORKS to traverse through an assembly's components and list their hierarchy. The macro explores the assembly structure, identifies components, and logs their names with proper indentation to reflect their parent-child relationship within the assembly. VBA Macro Code ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Dim swApp As SldWorks.SldWorks Dim swRootAssemblyModelDoc As ModelDoc2 Sub main() Set swApp = Application.SldWorks swApp.CommandInProgress = True Set swRootAssemblyModelDoc = swApp.ActiveDoc Dim swFeature As Feature Set swFeature = swRootAssemblyModelDoc.FirstFeature While Not swFeature Is Nothing TraverseFeatureForComponents swFeature Set swFeature = swFeature.GetNextFeature Wend swApp.CommandInProgress = False End Sub Private Sub TraverseFeatureForComponents(ByVal swFeature As Feature) Dim swSubFeature As Feature Dim swComponent As Component2 Dim typeName As String typeName = swFeature.GetTypeName2 If typeName = \"Reference\" Then Set swComponent = swFeature.GetSpecificFeature2 If Not swComponent Is Nothing Then LogComponentName swComponent Set swSubFeature = swComponent.FirstFeature() While Not swSubFeature Is Nothing TraverseFeatureForComponents swSubFeature Set swSubFeature = swSubFeature.GetNextFeature() Wend End If End If End Sub Private Sub LogComponentName(ByVal swComponent As Component2) Dim parentCount As Long Dim swParentComponent As Component2 Set swParentComponent = swComponent.GetParent() While Not swParentComponent Is Nothing parentCount = parentCount + 1 Set swParentComponent = swParentComponent.GetParent() Wend Dim indentation As String indentation = Replicate(\" \", parentCount) Debug.Print indentation & Split(swComponent.GetPathName(), \"\\\")(UBound(Split(swComponent.GetPathName(), \"\\\"))) End Sub Public Function Replicate(RepeatString As String, ByVal NumOfTimes As Long) If NumOfTimes = 0 Then Replicate = \"\" Exit Function End If Dim s As String Dim c As Long Dim l As Long Dim i As Long l = Len(RepeatString) c = l * NumOfTimes s = Space$(c) For i = 1 To c Step l Mid(s, i, l) = RepeatString Next Replicate = s End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  }
}