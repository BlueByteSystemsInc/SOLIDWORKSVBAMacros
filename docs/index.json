{
  "README.html": {
    "href": "README.html",
    "title": "| ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Liability Disclaimer Blue Byte Systems Inc. provides the SOLIDWORKS VBA Macro Library as a free resource intended to assist users in automating repetitive tasks within SOLIDWORKS. While we strive to ensure that the macros are efficient, accurate, and beneficial, they are provided as-is, without any guarantees or warranties, either expressed or implied, including but not limited to the accuracy, reliability, or fitness for a particular purpose. By using any of the macros from this library, you acknowledge and agree to the following: Use at Your Own Risk: The use of these macros is entirely at your own risk. Blue Byte Systems Inc. assumes no responsibility or liability for any direct, indirect, incidental, or consequential damages, including but not limited to loss of data, disruption of workflow, damage to hardware or software, or loss of business profits arising out of or in connection with the use of the macros provided. No Warranty: The macros are provided without any warranty, either expressed or implied, including but not limited to warranties of performance, merchantability, non-infringement, or fitness for a particular purpose. We do not guarantee that the macros will meet your specific requirements or that they will be error-free, bug-free, or free of unintended consequences. Modifications: Any modifications made to the macros are done at your own discretion and risk. Blue Byte Systems Inc. is not liable for any issues arising from user modifications to the original code. We recommend testing any macros thoroughly before implementing them into a production environment. Backup and Testing: It is strongly recommended that users create appropriate backups of all important files before using any macro from this library. Furthermore, users should conduct extensive testing of any macro in a non-production environment before applying it to live data or systems. No Support Obligations: Blue Byte Systems Inc. is not obligated to provide any form of technical support, bug fixes, or updates to the macros. Users may submit inquiries, but there is no guarantee of response or resolution. Legal Limitations: In jurisdictions that do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, the liability of Blue Byte Systems Inc. will be limited to the greatest extent permitted by law. By downloading, modifying, or using any VBA macro from this library, you agree that Blue Byte Systems Inc., its employees, affiliates, and partners will not be held liable for any damages or issues resulting from the use or misuse of these macros. In Summary: You use the VBA Macro Library at your own risk. Blue Byte Systems Inc. is not responsible for any adverse outcomes that may arise from using the provided macros, and it is solely your responsibility to ensure that the macros are suitable for your specific use case. If you do not agree to these terms, do not use the macros provided by Blue Byte Systems Inc."
  },
  "index.html": {
    "href": "index.html",
    "title": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library A macro is a small, self-contained program that automates repetitive tasks in SOLIDWORKS. Our VBA Macro Library is designed to streamline your workflow by providing a collection of pre-written macros that help automate common tasks in SOLIDWORKS such as part creation, assembly management, and sketching. Getting Started Explore the VBA Macro Library to find pre-built automation solutions for your SOLIDWORKS projects. Free and Organized by Category All of our VBA macros are free to use and are carefully organized into the following categories: Parts: Automate tasks related to part creation, modifications, and features. Assemblies: Manage assemblies, components, and mates efficiently. Sketching: Simplify sketch-related tasks, including constraints, dimensions, and geometry creation. Drawings: Generate or modify drawing views and annotations quickly. Bill Of Materials: Macros that manage Bill Of Materials. Each macro is designed to save you time and reduce repetitive tasks, helping you work more efficiently with SOLIDWORKS. Contact Us For more information or to contact us about our VBA Macro Library, please visit our Contact Us page."
  },
  "src/Align_All_Dimensions_Automatically.html": {
    "href": "src/Align_All_Dimensions_Automatically.html",
    "title": "Align All Dimensions Automatically | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Align All Dimensions Automatically Description This VBA macro automates selecting and arranging dimensions in SOLIDWORKS drawings. It loops through views, selects display dimensions, and auto-arranges them. System Requirements SOLIDWORKS 2014 or newer Active drawing document open in SOLIDWORKS VBA Code: ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Option Explicit Public swApp As SldWorks.SldWorks Public swModel As SldWorks.ModelDoc2 Public swDraw As SldWorks.DrawingDoc Public swView As SldWorks.View Public swDispDim As SldWorks.DisplayDimension Public swAnn As SldWorks.Annotation Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings!\", vbCritical, \"Error\" Exit Sub End If Set swDraw = swModel Set swView = swDraw.GetFirstView swModel.ClearSelection2 True ' Loop through all views and select display dimensions Do While Not swView Is Nothing Set swDispDim = swView.GetFirstDisplayDimension5 Do While Not swDispDim Is Nothing Set swAnn = swDispDim.GetAnnotation swAnn.Select True Set swDispDim = swDispDim.GetNext5 Loop Set swView = swView.GetNextView Loop ' Auto-arrange dimensions swModel.Extension.AlignDimensions swAlignDimensionType_AutoArrange, 0.06 swModel.ClearSelection2 True End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CGPoint.html": {
    "href": "src/CGPoint.html",
    "title": "Create Center of Gravity Point in SolidWorks | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Create Center of Gravity Point in SolidWorks Description This macro creates a 3D sketch point at the Center of Gravity (CoG) of the active part or assembly document in SolidWorks. It can be used to quickly identify the center of mass location within a part or assembly for analysis and design purposes. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly file. The part or assembly must contain valid geometry to calculate the center of gravity. Ensure the part or assembly is open and active before running the macro. Results Note A 3D sketch will be created with a point located at the Center of Gravity. The new sketch will be named \"CenterOfGravity\" in the feature tree. An error message will be displayed if there is no geometry to process or if the document type is not valid. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part or assembly) Dim boolstatus As Boolean ' Boolean status variable Dim longstatus As Long ' Long status variable for capturing operation results Dim Annotation As Object ' Annotation object for any annotations added (not used here) Dim Gtol As Object ' Geometric tolerance object (not used here) Dim DatumTag As Object ' Datum tag object (not used here) Dim FeatureData As Object ' Feature data object for manipulating feature details (not used here) Dim Feature As Object ' Feature object for creating/manipulating features (not used here) Dim Component As Object ' Component object for assemblies (not used here) ' Main subroutine to create the Center of Gravity point in a 3D sketch Sub main() Dim mp As Variant ' Array to hold the mass properties (center of gravity coordinates) Dim PlaneObj As Object ' Plane object (not used here) Dim PlaneName As String ' Name of the plane (not used here) Dim SketchObj As Object ' Sketch object for creating the 3D sketch (not used here) Dim Version As String ' SolidWorks version (not used here) ' Error handling block to capture unexpected issues On Error GoTo errhandlr ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Check if SolidWorks application is available If swApp Is Nothing Then MsgBox \"SolidWorks application not found. Please ensure SolidWorks is installed and running.\", vbCritical, \"SolidWorks Not Found\" Exit Sub End If ' Get the currently active document Set Part = swApp.ActiveDoc ' Check if there is an active document open in SolidWorks If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing (GetType = 3 corresponds to drawing) If Part.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Enable adding objects directly to the database without showing in the UI Part.SetAddToDB True ' Get the mass properties of the active part or assembly ' mp array holds center of mass coordinates (mp(0) = X, mp(1) = Y, mp(2) = Z) mp = Part.GetMassProperties ' Check if mass properties are valid (in case the part has no geometry) If Not IsArray(mp) Or UBound(mp) < 2 Then MsgBox \"No geometry found in the part or assembly. Cannot calculate center of gravity.\", vbCritical, \"Invalid Geometry\" Exit Sub End If ' Insert a new 3D sketch Part.Insert3DSketch ' Create a point at the center of gravity coordinates Part.CreatePoint2 mp(0), mp(1), mp(2) ' Exit the sketch mode Part.InsertSketch ' Rename the newly created feature to \"CenterOfGravity\" in the feature tree Part.FeatureByPositionReverse(0).Name = \"CenterOfGravity\" ' Successfully exit the subroutine Exit Sub ' Error handling block errhandlr: MsgBox \"An error occurred. No valid geometry found to process.\", vbCritical, \"Error\" Exit Sub End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Check For Missing Hole Callouts.html": {
    "href": "src/Check For Missing Hole Callouts.html",
    "title": "Check For Missing Hole Callouts | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Check For Missing Hole Callouts Description This macro checks a SOLIDWORKS drawing to ensure all Hole Wizard features in the referenced part have corresponding hole callouts. It iterates through each view, retrieves Hole Wizard features, and compares them with those in the drawing. If any callouts are missing, it notifies the user, ensuring proper documentation of all holes. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note Active SOLIDWORKS Drawing: A drawing document (.SLDDRW) must be open and active in SOLIDWORKS. Referenced Part Document: The drawing must contain at least one view that references a part document (.SLDPRT) with Hole Wizard features. Hole Wizard Features: The referenced part must have holes created using the Hole Wizard feature, not manual cut-extrudes or other methods. Proper Naming: Hole Wizard features and hole callouts should have consistent naming conventions if applicable. Results Note Hole Callout Verification: The macro will analyze the drawing and identify any Hole Wizard features in the > - > - referenced part that do not have corresponding hole callouts in the drawing views. User Notification: If missing hole callouts are found, the macro will display messages listing the specific Hole Wizard features that lack callouts. Design Checker Update: The macro will set custom check results in the SOLIDWORKS Design Checker, highlighting the failed items (missing hole callouts). VBA Macro Code ' All rights reserved to Blue Byte Systems Inc. ' Blue Byte Systems Inc. does not provide any warranties for macros. ' This macro compares the Hole Wizard features in a drawing with hole callouts in a view. Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swView As SldWorks.View Dim swDrawingDoc As SldWorks.DrawingDoc Dim swPart As SldWorks.ModelDoc2 Dim sModelName As String Dim swFeature As SldWorks.Feature Dim totalFeatures As Long Dim featureName As String Dim i As Long Dim featureType As String Dim totalHoleWzd As Long Dim holeWizardFeatures(50) As String Dim swDisplayDimension As SldWorks.DisplayDimension Dim attachedEntityArr As Variant Dim swEntity As SldWorks.Entity Dim swAnnotation As SldWorks.Annotation Dim swEdge As SldWorks.Edge Dim faceEntities As Variant Dim swFace1 As SldWorks.Face2 Dim swFace2 As SldWorks.Face2 Dim swHoleWzdFeature As SldWorks.Feature Dim holeCalloutFeatures(50) As String Dim missingHoleCallouts(50) As String Dim missingCount As Long Dim comparisonCount As Long Dim featureCheck As Boolean Dim errorCode As Long Dim failedItemsArr() As String ' Initialize SOLIDWORKS application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swDrawingDoc = swModel Set swView = swDrawingDoc.GetFirstView ' Get the first display dimension in the view Set swDisplayDimension = swView.GetFirstDisplayDimension() Set swPart = swView.ReferencedDocument ' Loop through views until a part is found Do While swPart Is Nothing Set swView = swView.GetNextView Set swPart = swView.ReferencedDocument Loop ' Start processing the hole callouts missingCount = 0 Do While Not swView Is Nothing Set swDisplayDimension = swView.GetFirstDisplayDimension() Do While Not swDisplayDimension Is Nothing ' Check if the dimension is a hole callout If swDisplayDimension.IsHoleCallout <> False Then Set swAnnotation = swDisplayDimension.GetAnnotation attachedEntityArr = swAnnotation.GetAttachedEntities3 Set swEntity = attachedEntityArr(0) Set swEdge = swEntity faceEntities = swEdge.GetTwoAdjacentFaces2() Set swFace1 = faceEntities(0) Set swFace2 = faceEntities(1) ' Get the feature associated with the face Set swHoleWzdFeature = swFace1.GetFeature If swHoleWzdFeature.GetTypeName = \"HoleWzd\" Then holeCalloutFeatures(missingCount) = swHoleWzdFeature.Name missingCount = missingCount + 1 Else Set swHoleWzdFeature = swFace2.GetFeature holeCalloutFeatures(missingCount) = swHoleWzdFeature.Name missingCount = missingCount + 1 End If End If Set swDisplayDimension = swDisplayDimension.GetNext Loop Set swView = swView.GetNextView Loop ' Count total Hole Wizard features in the referenced model totalFeatures = swPart.GetFeatureCount totalHoleWzd = 0 For i = totalFeatures To 1 Step -1 Set swFeature = swPart.FeatureByPositionReverse(totalFeatures - i) If Not swFeature Is Nothing Then featureName = swFeature.Name featureType = swFeature.GetTypeName If featureType = \"HoleWzd\" Then If swFeature.IsSuppressed = False Then holeWizardFeatures(totalHoleWzd) = featureName totalHoleWzd = totalHoleWzd + 1 End If End If End If Next ' Compare Hole Wizard features with hole callout features comparisonCount = 0 For i = 0 To totalHoleWzd featureCheck = False For comparisonCount = 0 To missingCount If holeWizardFeatures(i) = holeCalloutFeatures(comparisonCount) Then featureCheck = True End If Next comparisonCount ' Store missing features If featureCheck = False Then missingHoleCallouts(comparisonCount) = holeWizardFeatures(i) comparisonCount = comparisonCount + 1 End If Next ' If any features are missing, report them If comparisonCount > 0 Then ReDim Preserve failedItemsArr(1 To 2, 1 To comparisonCount) As String For i = 0 To comparisonCount - 1 failedItemsArr(1, i + 1) = missingHoleCallouts(i) MsgBox \"YOU HAVE MISSED THE FOLLOWING FEATURE: \" & missingHoleCallouts(i) Next Dim dcApp As Object Set dcApp = swApp.GetAddInObject(\"SWDesignChecker.SWDesignCheck\") errorCode = dcApp.SetCustomCheckResult(False, failedItemsArr) End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConvertInnerLoop.html": {
    "href": "src/ConvertInnerLoop.html",
    "title": "Convert Entities - Select Inner Loops Only | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Convert Entities - Select Inner Loops Only Description This macro provides a keyboard shortcut for the Convert Entities feature in SolidWorks, specifically targeting only the inner loops of a sketch. It automates the selection of inner loops, making it more convenient for users to quickly convert edges of inner contours in a sketch. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly containing a sketch. The user must be in an active sketch before running the macro. Results Note Only inner loops of the sketch will be selected for conversion. A confirmation message or error message will be displayed based on the operation's success. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSketchManager As SldWorks.SketchManager ' Sketch manager object to manage sketch-related functions Dim boolstatus As Boolean ' Status variable to check the success of the operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and activate a sketch.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is either a part or an assembly If swModel.GetType <> swDocPART And swModel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works with part or assembly documents. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the Sketch Manager object from the active document Set swSketchManager = swModel.SketchManager ' Use the SketchUseEdge3 method to select only inner loops ' Syntax: SketchUseEdge3(ConvertAllEntities As Boolean, SelectInnerLoops As Boolean) As Boolean ' ConvertAllEntities: Set to False to avoid converting all entities in the sketch. ' SelectInnerLoops: Set to True to select only inner loops for conversion. boolstatus = swSketchManager.SketchUseEdge3(False, True) ' Check if the operation was successful and notify the user If boolstatus Then MsgBox \"Inner loops have been successfully selected for conversion.\", vbInformation, \"Operation Successful\" Else MsgBox \"Failed to select inner loops for conversion. Please ensure you are in an active sketch.\", vbExclamation, \"Operation Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportFlatToDxfFromAssembly.html": {
    "href": "src/ExportFlatToDxfFromAssembly.html",
    "title": "Traverse Assembly and Save Parts as DXF | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly and Save Parts as DXF Description This macro traverses the active assembly and saves all its child components (parts) as DXF files in the specified folder. It recursively traverses through the assembly hierarchy, flattens any sheet metal parts, and exports the flat pattern as a DXF file. This macro is designed to streamline the export process for sheet metal parts. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. Sheet metal parts should be set up correctly for flattening and exporting. A folder path must be provided where the DXF files will be saved. Results Note All sheet metal parts within the active assembly are exported as DXF files. The DXF files will be saved in the specified folder. The macro will skip any parts that are not sheet metal. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to start the process and get user input for save path ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim savepath As String ' User input for the folder path to save DXF files ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the currently active document Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Prompt user for the folder path to save DXF files savepath = InputBox(\"Where do you want to save the DXF files?\") ' Call the traverse function to iterate through components and export DXF files traverse swModel, savepath End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly components and export parts ' -------------------------------------------------------------------------- Function traverse(Pathname As ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Model document object Dim swRootComp As SldWorks.Component2 ' Root component of the assembly Dim swConf As SldWorks.Configuration ' Configuration of the active assembly Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager of the active assembly Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Child component object Dim i As Long ' Loop counter for iterating through child components ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Set the active model to the passed Pathname parameter Set swModel = Pathname ' Get the configuration manager and active configuration of the model Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration ' Get the root component of the assembly Set swRootComp = swConf.GetRootComponent3(True) ' Get the children components of the root component vChildComp = swRootComp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Get the model document of the child component Set swModel = swChildComp.GetModelDoc2 ' If the child component is a part, traverse further or export as DXF If Not swModel Is Nothing Then ' Check if the component is an assembly (type 2 = swDocASSEMBLY) If swModel.GetType = 2 Then traverse swModel, savepath ' Recursively traverse through sub-assemblies ' If the component is a part, flatten and export as DXF Else flat swModel, savepath End If End If Next i End Function ' -------------------------------------------------------------------------- ' Function to flatten sheet metal parts and save as DXF ' -------------------------------------------------------------------------- Sub flat(swModel As SldWorks.ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swFeat As SldWorks.Feature ' Feature object to access flat pattern feature Dim swFlat As SldWorks.Feature ' Flat pattern feature object ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the first feature in the part Set swFeat = swModel.FirstFeature ' Loop through each feature to find the \"FlatPattern\" feature Do While Not swFeat Is Nothing ' Check if the feature is a \"FlatPattern\" feature If swFeat.GetTypeName = \"FlatPattern\" Then ' Un-suppress the flat pattern swFeat.Select (True) swModel.EditUnsuppress2 ' Export the part as a DXF file dxf swModel, savepath ' Re-suppress the flat pattern swFeat.Select (True) swModel.EditSuppress2 End If ' Move to the next feature in the model Set swFeat = swFeat.GetNextFeature Loop End Sub ' -------------------------------------------------------------------------- ' Function to export the flat pattern of the part as a DXF file ' -------------------------------------------------------------------------- Public Function dxf(swModel As SldWorks.ModelDoc2, savepath As String) ' Declare necessary variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swPart As SldWorks.PartDoc ' Part document object Dim sModelName As String ' Model name of the part Dim sPathName As String ' Path name of the DXF file Dim varAlignment As Variant ' Alignment data for exporting Dim dataAlignment(11) As Double ' Alignment data array Dim varViews As Variant ' Views data for exporting Dim dataViews(1) As String ' Views data array Dim options As Long ' Export options ' Initialize SolidWorks application Set swApp = Application.SldWorks swApp.ActivateDoc swModel.GetPathName ' Check if the part is in the bent state (flat pattern should be unsuppressed) If swModel.GetBendState <> 2 Then Exit Function End If ' Get the model name and set the path for DXF file sModelName = swModel.GetPathName sPathName = savepath & \"\\\" & swModel.GetTitle & \".dxf\" ' Set alignment and view data for DXF export dataAlignment(0) = 0#: dataAlignment(1) = 0#: dataAlignment(2) = 0# dataAlignment(3) = 1#: dataAlignment(4) = 0#: dataAlignment(5) = 0# dataAlignment(6) = 0#: dataAlignment(7) = 1#: dataAlignment(8) = 0# dataAlignment(9) = 0#: dataAlignment(10) = 0#: dataAlignment(11) = 1# varAlignment = dataAlignment dataViews(0) = \"*Current\" dataViews(1) = \"*Front\" varViews = dataViews ' Export the flat pattern of the sheet metal part to DXF file options = 13 ' Export options for flat pattern geometry, bend lines, and sketches swPart.ExportToDWG sPathName, sModelName, 1, True, varAlignment, False, False, options, Null ' Close the part document after exporting swApp.CloseDoc (swModel.GetPathName) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportToParasolid.html": {
    "href": "src/ExportToParasolid.html",
    "title": "Traverse Assembly and Save Parts as Parasolid (X_T) | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly and Save Parts as Parasolid (X_T) Description This macro traverses the active assembly and saves all child components (parts) as Parasolid files (X_T format) in the specified folder. It recursively traverses through the assembly hierarchy, ensuring that all parts are saved with their respective names. This macro simplifies the process of saving parts in an assembly by automatically exporting them to the desired location. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. A folder path must be provided where the Parasolid files will be saved. Results Note All parts within the active assembly are saved as Parasolid (X_T) files. The files will be saved in the specified folder with the same names as the parts. The macro will skip any parts that are already open or in a suppressed state. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and prompt the user for a save path ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim savepath As String ' User input for the folder path to save Parasolid files ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Prompt user for the folder path to save Parasolid files savepath = InputBox(\"Where do you want to save the Parasolid (X_T) files?\") ' Call the traverse function to iterate through components and save as Parasolid files traverse swApp.ActiveDoc, savepath End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly components and save parts ' -------------------------------------------------------------------------- Function traverse(Pathname As ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Model document object for components Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConf As SldWorks.Configuration ' Configuration object for the active configuration Dim swRootComp As SldWorks.Component2 ' Root component of the assembly Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Individual child component object Dim i As Long ' Loop counter for iterating through child components Dim longstatus As Long ' Status variable for capturing save operations ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = Pathname ' Set the model to the input pathname (active document) ' Get the configuration manager and active configuration of the model Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration ' Get the root component of the assembly Set swRootComp = swConf.GetRootComponent3(True) ' Get the child components of the root component vChildComp = swRootComp.GetChildren ' Loop through each child component in the assembly For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Set the child component ' Get the model document of the child component Set swModel = swChildComp.GetModelDoc2 ' If the child component is a part, traverse further or save as Parasolid (X_T) If Not swModel Is Nothing Then ' Check if the component is an assembly (type 2 = swDocASSEMBLY) If swModel.GetType = 2 Then ' Recursively traverse through sub-assemblies traverse swModel, savepath Else ' Save the part as a Parasolid (X_T) file in the specified folder longstatus = swModel.SaveAs3(savepath & \"\\\" & swModel.GetTitle & \".X_T\", 0, 0) End If End If Next i End Function ' -------------------------------------------------------------------------- ' Function to extract the title (filename without extension) from the path ' -------------------------------------------------------------------------- Public Function GetTitle(Path As String) As String ' Declare necessary variables Dim path1 As Variant ' Array to hold path segments Dim title As String ' Extracted title (filename without extension) ' Split the path into segments based on \"\\\" path1 = Split(Path, \"\\\") ' Get the last segment of the path as the filename title = path1(UBound(path1)) ' Return the title without the file extension GetTitle = Left(title, InStr(title, \".\") - 1) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FormatLine.html": {
    "href": "src/FormatLine.html",
    "title": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing Description This macro applies custom line properties (color and width) to selected edges in a SolidWorks drawing. It helps users visually differentiate specific edges or lines in a drawing by changing their appearance based on the specified properties. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must select at least one edge in the drawing before running the macro. Results Note The selected edge(s) will have their line width and color updated based on the specified properties. A confirmation message will be shown if the operation is successful, or an error message if there are any issues. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare SolidWorks application object and initialize it Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks ' Get the currently active document Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Check if there is an active document If Not swModel Is Nothing Then ' Check if the active document is a drawing If swModel.GetType = swDocDRAWING Then ' Declare drawing document object and selection manager object Dim swDraw As SldWorks.DrawingDoc Set swDraw = swModel Dim swSelMgr As SldWorks.SelectionMgr Set swSelMgr = swModel.SelectionManager ' Check if any edge is selected in the drawing If swSelMgr.GetSelectedObjectCount2(-1) > 0 Then ' Specify custom line properties Dim edgeWidth As Double Dim edgeColor As Integer edgeWidth = 0.0007 ' Line width in meters (e.g., 0.0007m = 0.7mm) edgeColor = 255 ' Color in RGB (e.g., 255 = Red) ' Apply custom line width and color to the selected edge(s) swDraw.SetLineWidthCustom (edgeWidth) swDraw.SetLineColor edgeColor ' Notify the user of successful application MsgBox \"Line width and color applied successfully to the selected edge(s).\", vbInformation, \"Success\" Else ' Error message if no edge is selected MsgBox \"Please select at least one edge in the drawing to apply the properties.\", vbExclamation, \"No Edge Selected\" End If Else ' Error message if the active document is not a drawing MsgBox \"The active document is not a drawing. Please open a drawing and select an edge.\", vbExclamation, \"Invalid Document Type\" End If Else ' Error message if no document is open MsgBox \"No active document found. Please open a drawing and select an edge.\", vbExclamation, \"No Active Document\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FullyDefineAllPartSketches.html": {
    "href": "src/FullyDefineAllPartSketches.html",
    "title": "Fully Define Under-Defined Sketches in Part Feature Tree | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Fully Define Under-Defined Sketches in Part Feature Tree Description This macro traverses the part feature tree and fully defines any sketch that is under-defined. It is particularly useful for automating the process of constraining sketches to ensure all dimensions and relations are applied correctly. The macro checks each sketch within the part and applies the FullyDefineSketch method if it is found to be under-defined. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. The part file must contain sketches or features with sketches (e.g., holes, extrudes). Ensure the part is open and active before running the macro. Results Note All under-defined sketches in the part will be fully defined with dimensions and relations. A confirmation message or error message will be displayed based on the operation's success. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part) Dim SelMgr As Object ' Selection manager object Dim boolstatus As Boolean ' Boolean status variable to capture operation results Dim longstatus As Long, longwarnings As Long ' Long status and warning variables for operations Dim Feature, swSketch As Object ' Feature and Sketch objects for iterating through features and accessing sketches Dim SubFeatSketch As Object ' Sub-feature sketch object for handling sketches inside features like Hole Wizard Dim SketchName, MsgStr, FeatType, SubFeatType As String ' Strings for storing feature names, types, and messages Dim EmptyStr, SubFeatName As String ' Empty strings for message formatting and sub-feature names Dim longSketchStatus As Long ' Status variable for checking if the sketch is fully defined ' -------------------------------------------------------------------------- ' Main subroutine to traverse the feature tree and fully define under-defined sketches ' -------------------------------------------------------------------------- Sub main() ' Initialize the SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc Set SelMgr = Part.SelectionManager ' Check if the active document is a part file longstatus = Part.GetType If longstatus <> 1 Then End ' Exit if the document type is not a part (1 = swDocPART) ' Get the first feature in the feature tree of the part Set Feature = Part.FirstFeature ' Loop through each feature in the feature tree until no more features are found Do While Not Feature Is Nothing ' Get the feature name and type FeatName = Feature.Name FeatType = Feature.GetTypeName ' Check if the feature is a sketch-based feature (e.g., \"ProfileFeature\" for extrudes, revolves, etc.) If FeatType = \"ProfileFeature\" Then ' Get the sketch associated with the feature Set swSketch = Feature.GetSpecificFeature2 ' Check the constraint status of the sketch (e.g., fully defined, under-defined) longSketchStatus = swSketch.GetConstrainedStatus() ' If the sketch is under-defined (2 = swUnderDefinedSketch), fully define it If longSketchStatus = 2 Then ' Clear any existing selections in the document Part.ClearSelection2 True ' Select the under-defined sketch by its name boolstatus = Part.Extension.SelectByID2(FeatName, \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) ' Enter the sketch edit mode Part.EditSketch Part.ClearSelection2 True ' Select the origin point of the sketch to help define constraints boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 6, Nothing, 0) ' Fully define the sketch using the `FullyDefineSketch` method longstatus = Part.SketchManager.FullyDefineSketch(1, 1, 1023, 1, 1, Nothing, -1, Nothing, 1, -1) ' Clear selection and exit sketch edit mode Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ClearSelection2 True End If End If ' Check if the feature is a Hole Wizard feature (contains a sub-feature sketch) If FeatType = \"HoleWzd\" Then ' Get the first sub-feature within the Hole Wizard feature (usually a sketch) Set SubFeatSketch = Feature.GetFirstSubFeature SubFeatName = SubFeatSketch.Name SubFeatType = SubFeatSketch.GetTypeName ' Get the sketch associated with the sub-feature Set swSketch = SubFeatSketch.GetSpecificFeature2 ' Check the constraint status of the sub-feature sketch longSketchStatus = swSketch.GetConstrainedStatus() ' If the sketch is under-defined (2 = swUnderDefinedSketch), fully define it If longSketchStatus = 2 Then ' Clear any existing selections in the document Part.ClearSelection2 True ' Select the under-defined sub-feature sketch by its name boolstatus = Part.Extension.SelectByID2(SubFeatName, \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) ' Enter the sub-feature sketch edit mode Part.EditSketch Part.ClearSelection2 True ' Select the origin point of the sketch to help define constraints boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 6, Nothing, 0) ' Fully define the sub-feature sketch using the `FullyDefineSketch` method longstatus = Part.SketchManager.FullyDefineSketch(1, 1, 1023, 1, 1, Nothing, -1, Nothing, 1, -1) ' Clear selection and exit sketch edit mode Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ClearSelection2 True End If End If ' Move to the next feature in the feature tree Set Feature = Feature.GetNextFeature Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/InsertBlock.html": {
    "href": "src/InsertBlock.html",
    "title": "Programmatically Insert a Block into SolidWorks Drawing | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Programmatically Insert a Block into SolidWorks Drawing Description A one-line function call to programmatically insert a block into the active SolidWorks drawing. This macro returns the SketchBlockInstance for the inserted block, enabling users to efficiently place and manage sketch blocks within a drawing. It is particularly useful for automating the placement of standardized blocks, reducing repetitive tasks. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The block file to be inserted must exist in the specified path. Results Note The block will be inserted at the specified X and Y coordinates. The macro returns a SketchBlockInstance object for the inserted block. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks ' Main subroutine to insert a block and print block attributes Sub main() Dim part As ModelDoc2 Dim swBlkInst As SketchBlockInstance Dim boolstatus As Boolean ' Initialize SolidWorks application Set swApp = Application.SldWorks Set part = swApp.ActiveDoc ' Insert the block at specified location with optional scale and rotation Set swBlkInst = Insert_Block(part, \"C:\\temp\\myblock.SLDBLK\", 0.254, 0.254) ' Display block attributes in the Immediate window Debug.Print \"Number of attributes: \" & swBlkInst.GetAttributeCount Debug.Print \"Scale: \" & swBlkInst.Scale Debug.Print \"Name: \" & swBlkInst.Name ' Set an attribute value for the inserted block boolstatus = swBlkInst.SetAttributeValue(\"ItemNo\", \"Value\") End Sub ' Function to insert a block into the active document Function Insert_Block(ByVal rModel As ModelDoc2, ByVal blkName As String, ByVal Xpt As Double, ByVal Ypt As Double, _ Optional ByVal sAngle As Double = 0, Optional ByVal sScale As Double = 1) As Object Dim swBlockDef As SketchBlockDefinition Dim swBlockInst As SketchBlockInstance Dim swMathPoint As MathPoint Dim vBlockInst As Variant Dim swMathUtil As MathUtility Set swMathUtil = swApp.GetMathUtility ' Prepare coordinates for block insertion Dim pt(2) As Double pt(0) = Xpt pt(1) = Ypt pt(2) = 0 ' Turn off grid and entity snapping to facilitate block insertion rModel.SetAddToDB True ' Check if the block definition already exists in the drawing Set swBlockDef = GetBlockDefination(Mid(blkName, InStrRev(blkName, \"\\\") + 1), rModel) Set swMathPoint = swMathUtil.CreatePoint(pt) ' Insert the block if definition is found, otherwise create a new one If Not swBlockDef Is Nothing Then Set swBlockInst = rModel.SketchManager.InsertSketchBlockInstance(swBlockDef, swMathPoint, sScale, sAngle) Else Set swBlockDef = rModel.SketchManager.MakeSketchBlockFromFile(swMathPoint, blkName, False, sScale, sAngle) vBlockInst = swBlockDef.GetInstances Set swBlockInst = vBlockInst(0) End If ' Restore grid and entity snapping rModel.SetAddToDB False ' Redraw graphics to reflect the changes rModel.GraphicsRedraw2 Set Insert_Block = swBlockInst End Function ' Function to get the block definition if it already exists in the drawing Function GetBlockDefination(ByVal blkName As String, ByVal rModel As ModelDoc2) As Object Dim swBlockDef As Object Dim vBlockDef As Variant Dim i As Integer ' Check if there are existing block definitions in the drawing If rModel.SketchManager.GetSketchBlockDefinitionCount > 0 Then vBlockDef = rModel.SketchManager.GetSketchBlockDefinitions If UBound(vBlockDef) >= 0 Then ' Loop through existing definitions to find the matching one For i = 0 To UBound(vBlockDef) Set swBlockDef = vBlockDef(i) If UCase(Mid(swBlockDef.FileName, InStrRev(swBlockDef.FileName, \"\\\") + 1)) = UCase(blkName) Then Set GetBlockDefination = swBlockDef Exit Function End If Next i End If End If ' Return nothing if no matching block definition is found Set GetBlockDefination = Nothing End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Isolate.html": {
    "href": "src/Isolate.html",
    "title": "Isolate Selected Components in an Assembly | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Isolate Selected Components in an Assembly Description Pre-select one or more components in an assembly and execute the macro. The selected components will become isolated in the assembly. This macro can be placed on the Graphics Area menu (which pops up when you right-click a component) for convenient access, making it ideal for users who frequently isolate components. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note One or more components must be pre-selected in an active assembly. The active document must be an assembly file. Results Note The selected components will be isolated in the assembly. A message box will be displayed if no components are selected or if the active document is not an assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to isolate selected components in an assembly Sub main() ' Declare SolidWorks application and active document objects Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (assembly) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim longstatus As Long, longwarnings As Long ' Long variables for capturing status and warnings ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Check if there is an active document open If Part Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If Part.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Isolate the pre-selected components in the assembly ' RunCommand with ID 2726 is used to isolate components in SolidWorks boolstatus = Part.Extension.RunCommand(2726, \"\") ' Note: The following command can be used to exit isolation mode if required: ' boolstatus = Part.Extension.RunCommand(2732, \"\") ' RunCommand ID 2732 exits isolate mode ' Clean up by releasing references to objects Set Part = Nothing Set swApp = Nothing End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MatchTextProperties.html": {
    "href": "src/MatchTextProperties.html",
    "title": "Match Text Properties in SolidWorks Drawing | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Match Text Properties in SolidWorks Drawing Description This macro matches text properties such as height and font of the selected text to a parent text object in a SolidWorks drawing. The macro enables users to ensure consistency in text properties across multiple notes and dimensions by using a single function call to apply the formatting of the selected parent text. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must first select the parent text object (either a note or dimension) whose properties will be matched. Subsequent selections must include the text objects to be modified. Results Note The selected text objects will have their properties (font, height) updated to match the parent text. A confirmation message will be shown in the Immediate window for each updated text object. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Global variables for the SolidWorks application, selected text objects, and text object counters Public swApp As SldWorks.SldWorks Public vNoteObjects() As Object ' Array to hold selected note objects Public vdisDimObjects() As Object ' Array to hold selected dimension objects Dim iDisDim As Integer ' Counter for dimension objects Dim iNote As Integer ' Counter for note objects Dim parentNote As Note ' Parent note object for text matching Dim parentDisDim As DisplayDimension ' Parent dimension object for text matching Dim isNote As Boolean ' Flag indicating if a note is selected Dim isDisDim As Boolean ' Flag indicating if a dimension is selected ' Constants for SolidWorks selection types Const vSelNote As Integer = SwConst.swSelectType_e.swSelNOTES ' Selection type for notes Const vSelDims As Integer = SwConst.swSelectType_e.swSelDIMENSIONS ' Selection type for dimensions ' Subroutine to get the selected text objects and populate arrays Public Sub GetTheTextObjects() Dim swSelMgr As SelectionMgr ' Selection manager object Dim swPart As ModelDoc2 ' Active document object Dim i As Integer ' Number of selected objects Dim t As Integer ' Loop counter ' Initialize objects Set swPart = swApp.ActiveDoc Set swSelMgr = swPart.SelectionManager i = swSelMgr.GetSelectedObjectCount2(-1) ' Check if no text objects are selected If i = 0 Then MsgBox \"No text objects selected.\" Exit Sub End If On Error GoTo Errhandler ' Load the arrays with the selected text objects For t = 0 To i ' Check if selected object is a note If swSelMgr.GetSelectedObjectType3(t, -1) = vSelNote Then isNote = True If iNote = 0 Then ReDim vNoteObjects(0) iNote = 1 Else ReDim Preserve vNoteObjects(UBound(vNoteObjects) + 1) End If Set vNoteObjects(UBound(vNoteObjects)) = swSelMgr.GetSelectedObject6(t, -1) End If ' Check if selected object is a dimension If swSelMgr.GetSelectedObjectType3(t, -1) = vSelDims Then isDisDim = True If iDisDim = 0 Then ReDim vdisDimObjects(0) iDisDim = 1 Else ReDim Preserve vdisDimObjects(UBound(vdisDimObjects) + 1) End If Set vdisDimObjects(UBound(vdisDimObjects)) = swSelMgr.GetSelectedObject6(t, -1) End If Next On Error GoTo 0 ' Call subroutine to apply text properties Call changeText Exit Sub Errhandler: MsgBox \"Error occurred while getting text objects: \" & Err.Description Resume Next End Sub ' Function to grab the parent text properties for matching Public Function GrabParentText() As Boolean Dim swSelMgr As SelectionMgr ' Selection manager object Dim swPart As ModelDoc2 ' Active document object Dim retVal As Boolean ' Return value indicating if a parent text is found Dim i As Integer ' Number of selected objects Dim t As Integer ' Loop counter retVal = False ' Initialize return value to False ' Initialize objects Set parentNote = Nothing Set parentDisDim = Nothing Set swPart = swApp.ActiveDoc Set swSelMgr = swPart.SelectionManager i = swSelMgr.GetSelectedObjectCount2(-1) ' Check if no objects are selected If i = 0 Then MsgBox \"No objects selected.\" GrabParentText = retVal Exit Function End If On Error GoTo Errhandler ' Loop through selected objects to find a parent text object For t = 0 To i ' Check if selected object is a note If swSelMgr.GetSelectedObjectType3(t, -1) = vSelNote Then Set parentNote = swSelMgr.GetSelectedObject6(t, -1) retVal = True Exit For End If ' Check if selected object is a dimension If swSelMgr.GetSelectedObjectType3(t, -1) = vSelDims Then Set parentDisDim = swSelMgr.GetSelectedObject6(t, -1) retVal = True Exit For End If Next Errhandler: ' Show message if no valid parent text object is found If parentNote Is Nothing And parentDisDim Is Nothing Then MsgBox \"No text objects selected.\" End If GrabParentText = retVal End Function ' Subroutine to apply parent text properties to the selected text objects Sub changeText() Dim sdModel As ModelDoc2 ' Active document object Dim swSelMgr As SelectionMgr ' Selection manager object Dim pFont As String ' Parent text font Dim pCharHt As Double ' Parent text character height Dim pAnn As Annotation ' Parent annotation object Dim pTextFor As TextFormat ' Parent text format object Dim pIsUseDocFormat As Boolean ' Flag for using document format Dim swAnn As Annotation ' Annotation object for selected text Dim swTxtFormat As TextFormat ' Text format object for selected text Dim swNote As Note ' Note object Dim swdisdim As DisplayDimension ' Display dimension object Dim nAngle As Double ' Angle for the note ' Retrieve parent text properties If Not parentNote Is Nothing Then Set pAnn = parentNote.GetAnnotation ElseIf Not parentDisDim Is Nothing Then Set pAnn = parentDisDim.GetAnnotation End If ' Get text format properties from parent annotation pIsUseDocFormat = pAnn.GetUseDocTextFormat(0) Set pTextFor = pAnn.GetTextFormat(0) pFont = pTextFor.TypeFaceName pCharHt = pTextFor.CharHeight Set sdModel = swApp.ActiveDoc Set swSelMgr = sdModel.SelectionManager ' Apply parent properties to selected note objects If isNote = True Then On Error GoTo Errhandler For i = 0 To UBound(vNoteObjects) Set swNote = vNoteObjects(i) nAngle = swNote.Angle Set swAnn = swNote.GetAnnotation Set swTxtFormat = swAnn.GetTextFormat(0) swTxtFormat.CharHeight = pCharHt swTxtFormat.TypeFaceName = pFont swAnn.SetTextFormat 0, pIsUseDocFormat, swTxtFormat swNote.Angle = nAngle Next End If ' Apply parent properties to selected dimension objects If isDisDim = True Then On Error GoTo Errhandler1 For i = 0 To UBound(vdisDimObjects) Set swdisdim = vdisDimObjects(i) Set swAnn = swdisdim.GetAnnotation Set swTxtFormat = swAnn.GetTextFormat(0) swTxtFormat.CharHeight = pCharHt swTxtFormat.TypeFaceName = pFont swAnn.SetTextFormat 0, pIsUseDocFormat, swTxtFormat Next End If ' Redraw graphics to apply changes sdModel.GraphicsRedraw2 Exit Sub Errhandler: MsgBox \"Error occurred while applying note properties: \" & Err.Description Resume Next Errhandler1: MsgBox \"Error occurred while applying dimension properties: \" & Err.Description Resume Next End Sub ' Main subroutine to initialize the macro Sub main() Dim swPart As ModelDoc2 ' Active document object Set swApp = Application.SldWorks Set swPart = swApp.ActiveDoc ' Check if the active document is a drawing If swPart Is Nothing Then MsgBox \"No Active File.\", vbCritical, \"Wrong File Type\" End End If ' Check if the active document type is a drawing If swPart.GetType <> 3 Then MsgBox \"Can only run in a drawing.\" & vbNewLine & \"Active document must be a drawing file.\" End End If ' Initialize counters iNote = 0 iDisDim = 0 ' Rebuild the drawing to ensure proper updates swPart.ForceRebuild3 True ' Show form for user interaction (assumes a form named frmSelect exists) frmSelect.Show vbModeless End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MeasureSketchAndAddLengthProperty.html": {
    "href": "src/MeasureSketchAndAddLengthProperty.html",
    "title": "Measure Sketch and Add Length Property | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Measure Sketch and Add Length Property Description This macro measures the length of all the segments in the selected sketch of the active model file and adds the total length as a custom property with a value in inches or millimeters (up to 2 decimal places). The macro checks the model units and accordingly converts the total length into inches or mm based on the current unit system of the document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The desired sketch must be selected from the feature manager before running the macro. The active document must be a part or assembly. The sketch should not contain any construction geometry or text, as these are ignored in the length calculation. Results Note The macro calculates the total length of all the sketch segments in the selected sketch. A custom property named \"Total Length\" is added to the part or assembly with the length value in inches or mm, depending on the document units. A message box will be displayed if no sketch is selected or the active document is not a part or assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Public Enum swSkchSegments_e swSketchLINE = 0 swSketchARC = 1 swSketchELLIPSE = 2 swSketchSPLINE = 3 swSketchTEXT = 4 swSketchPARABOLA = 5 End Enum Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (part or assembly) Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swFeat As SldWorks.Feature ' Feature object for the selected sketch Dim swSketch As SldWorks.sketch ' Sketch object to store the selected sketch Dim swCustProp As CustomPropertyManager ' Custom property manager for adding properties to the model Dim swSkchSeg As SldWorks.SketchSegment ' Sketch segment object for each segment in the sketch Dim UserUnit As UserUnit ' User unit object to determine the document's unit system Dim i As Long ' Loop counter for iterating through sketch segments Dim bRet As Boolean ' Return status of custom property addition Dim vSkchSeg As Variant ' Array to hold the sketch segments in the selected sketch Dim nLength As Double ' Total length of the sketch segments ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently active If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a part or assembly (skip if it's a drawing) If swModel.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the user unit system (e.g., metric or imperial) Set UserUnit = swModel.GetUserUnit(swUserUnitsType_e.swLengthUnit) ' Get the selection manager object Set swSelMgr = swModel.SelectionManager ' Check if a sketch is selected in the feature manager If swSelMgr.GetSelectedObjectCount2(-1) > 0 And swSelMgr.GetSelectedObjectType3(1, -1) = swSelSKETCHES Then ' Get the selected sketch feature Set swFeat = swSelMgr.GetSelectedObject5(1) Set swSketch = swFeat.GetSpecificFeature2 ' Get all the sketch segments in the selected sketch vSkchSeg = swSketch.GetSketchSegments ' Loop through each segment in the sketch For i = 0 To UBound(vSkchSeg) Set swSkchSeg = vSkchSeg(i) ' Ignore construction lines and text segments If swSkchSeg.ConstructionGeometry = False Then If swSketchTEXT <> swSkchSeg.GetType Then ' Accumulate the length of valid sketch segments nLength = nLength + swSkchSeg.GetLength End If End If Next i ' Clear any selections in the document swModel.ClearSelection2 True ' Get the custom property manager object for the active document Set swCustProp = swModel.Extension.CustomPropertyManager(\"\") ' Add the total length as a custom property in inches or mm based on the unit system If UserUnit.IsMetric = False Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 39.3701, 2) & \" in\", 1) ' Add total length in inches ElseIf UserUnit.IsMetric Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 1000, 2) & \" mm\", 1) ' Add total length in mm End If Else ' Show error message if no sketch is selected MsgBox \"Please select a sketch from the feature manager and try again.\", vbExclamation, \"No Sketch Selected\" Exit Sub End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Referenced_File.html": {
    "href": "src/Rebuild_Referenced_File.html",
    "title": "Rebuild Referenced Models in All Drawing Sheets | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild Referenced Models in All Drawing Sheets Description This macro rebuilds all referenced models for each sheet in an active SOLIDWORKS drawing document.It validates the active document, iterates through all sheets, and for each sheet, rebuilds the models referenced by the views. After rebuilding, it closes the models to free up memory. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SOLIDWORKS must be installed and running on the machine. An active drawing with multiple sheets and views is open. Post-Conditions Note The referenced files will be opened, rebuilt, and closed. The original drawing views will update. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDrawModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swView As SldWorks.View Dim swSheet As SldWorks.Sheet Dim vSheetNameArr As Variant Dim vSheetName As Variant Dim bRet As Boolean Dim sFileName As String Dim nErrors As Long Sub main() ' Initialize SOLIDWORKS application object Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a drawing document is active If swModel Is Nothing Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Verify the document is a drawing If swModel.GetType <> SwConst.swDocDRAWING Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Cast the active document as a drawing Set swDraw = swModel ' Get the current sheet and sheet names Set swSheet = swDraw.GetCurrentSheet vSheetNameArr = swDraw.GetSheetNames ' Loop through each sheet For Each vSheetName In vSheetNameArr ' Activate each sheet bRet = swDraw.ActivateSheet(vSheetName) Set swView = swDraw.GetFirstView Set swView = swView.GetNextView ' Skip the sheet's overall view ' Loop through all views in the sheet Do While Not swView Is Nothing ' Get the referenced model for the view Set swDrawModel = swView.ReferencedDocument sFileName = swDrawModel.GetPathName ' Open and rebuild the referenced model Set swDrawModel = swApp.ActivateDoc3(sFileName, True, swRebuildActiveDoc, nErrors) ' Rebuild the referenced model swDrawModel.EditRebuild3 ' Close the referenced model after rebuild swApp.CloseDoc swDrawModel.GetTitle ' Move to the next view Set swView = swView.GetNextView Loop Next vSheetName ' Notify the user that the rebuild is complete MsgBox \"Rebuild is done.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html": {
    "href": "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Post-Conditions Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Reload_All_Sheet_Formats.html": {
    "href": "src/Reload_All_Sheet_Formats.html",
    "title": "Reloading Sheet Formats in Drawing Documents | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Reloading Sheet Formats in Drawing Documents Description This macro automates the process of reloading sheet formats across all sheets in a SolidWorks drawing document. It iterates through each sheet, temporarily removes the current format, and then reloads the original template. The macro ensures that all drawing sheets are updated with their default formats and concludes by rebuilding and saving the document, improving efficiency in drawing maintenance and formatting updates. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Post-Conditions Note The macro will first remove the existing sheet format and then reload the previous format from the specified location for each sheet. Note: This may remove all content contained within the old/existing format. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swSheet As SldWorks.Sheet Dim vSheetProps As Variant Dim vSheetName As Variant Dim vTemplateName As Variant Dim longstatus As Long Dim longwarnings As Long Dim nErrors As Long Dim nWarnings As Long Dim i As Long ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if an active drawing is open If swModel Is Nothing Then MsgBox \"There is no active drawing document.\" Exit Sub End If ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"Open a drawing first and then try again!\" Exit Sub End If Set swDraw = swModel vSheetName = swDraw.GetSheetNames ' Traverse and update each sheet in the drawing For i = 0 To UBound(vSheetName) swDraw.ActivateSheet vSheetName(i) Set swSheet = swDraw.GetCurrentSheet ' Retrieve sheet properties and format template vTemplateName = swSheet.GetTemplateName vSheetProps = swSheet.GetProperties ' Remove the current sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateNone, _ vSheetProps(2), vSheetProps(3), False, \"\", _ vSheetProps(5), vSheetProps(6), \"Default\", True ' Reload the original sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateCustom, _ vSheetProps(2), vSheetProps(3), False, vTemplateName, _ vSheetProps(5), vSheetProps(6), \"Default\", True swDraw.ViewZoomtofit2 Next i ' Activate the first sheet and force rebuild swDraw.ActivateSheet vSheetName(0) swDraw.ForceRebuild3 False ' Save the drawing swDraw.Save3 1, nErrors, nWarnings ' Clean up Set swDraw = Nothing Set swModel = Nothing Set swApp = Nothing MsgBox \"Sheet format reloaded!\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveDrawingToPDF.html": {
    "href": "src/SaveDrawingToPDF.html",
    "title": "Save Drawing as PDF in SolidWorks | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Save Drawing as PDF in SolidWorks Description This macro instantly saves the active part or assembly drawing as a PDF file. The PDF document is saved in the same folder as the drawing with the same name. This macro works best when assigned to a keyboard shortcut, making it easy to quickly export drawings to PDF format without manually navigating through the menus. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a saved drawing file. The drawing should have at least one sheet. Ensure the drawing is open and active before running the macro. Results Note All sheets of the active drawing are exported as a single PDF file. The PDF is saved in the same location as the drawing file with the same name. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Model document extension object Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Status of export operation Dim filename As String ' Filename of the PDF to be saved Dim lErrors As Long ' Variable to capture errors during save Dim lWarnings As Long ' Variable to capture warnings during save ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently open in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a drawing and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works with drawing files. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the extension object of the active drawing document Set swModelDocExt = swModel.Extension ' Initialize the PDF export data object Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved If filename = \"\" Then MsgBox \"The drawing must be saved before exporting to PDF. Please save the drawing and try again.\", vbCritical, \"Save Required\" Exit Sub End If ' Modify the file path to save as PDF (replace extension with .PDF) filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the drawing boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF using the specified filename and export data boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the export was successful and display appropriate message If boolstatus Then MsgBox \"Drawing successfully saved as PDF:\" & vbNewLine & filename, vbInformation, \"Export Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Export Failed\" End If End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_Each_Sheet_As_PDF.html": {
    "href": "src/Save_Each_Sheet_As_PDF.html",
    "title": "Export Sheets to PDF Automatically | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheets to PDF Automatically Description This VBA macro automates the process of exporting all sheets in a SOLIDWORKS drawing to individual PDF files. The macro loops through all the sheets in the active drawing and exports each one as a PDFs into the folder that the drawing file is in. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Dim swApp As SldWorks.SldWorks Sub ExportSheetsToPDF() ' Set the SOLIDWORKS application object Set swApp = Application.SldWorks ' Check if SOLIDWORKS is running If swApp Is Nothing Then MsgBox \"Error Connecting to SOLIDWORKS. Please Try Again.\", vbCritical Exit Sub End If ' Set the active document object Dim swDoc As ModelDoc2 Set swDoc = swApp.ActiveDoc ' Check if the active document is valid If swDoc Is Nothing Then MsgBox \"Unable to Connect to a Valid SOLIDWORKS Drawing.\", vbCritical Exit Sub End If ' Ensure the active document is a drawing If swDoc.GetType <> SwConst.swDocumentTypes_e.swDocDRAWING Then MsgBox \"The active document is not a SOLIDWORKS drawing.\", vbCritical Exit Sub End If ' Set the drawing document object Dim swDwgDoc As DrawingDoc Set swDwgDoc = swDoc ' Set the PDF export data object Dim swExportPdfData As SldWorks.ExportPdfData Set swExportPdfData = swApp.GetExportFileData(SwConst.swExportDataFileType_e.swExportPdfData) ' Get the output directory from the drawing's path Dim outputPath As String outputPath = GetFolderFromPath(swDoc.GetPathName) ' Get the list of sheet names in the drawing Dim sheetNames As Variant sheetNames = swDwgDoc.GetSheetNames ' Set the current sheet object Dim swSheet As Sheet Set swSheet = swDwgDoc.GetCurrentSheet ' Generate the base output file name Dim outputFileName As String outputFileName = GetFileNameFromTitle(swDoc.GetTitle, swSheet.GetName) ' Initialize variables for error handling Dim lErrors As Long Dim lWarnings As Long Dim i As Integer Dim exportSuccess As Boolean ' Display the export status in the SOLIDWORKS status bar Dim statusBarPane As StatusBarPane Dim swFrame As SldWorks.Frame Set swFrame = swApp.Frame Set statusBarPane = swFrame.GetStatusBarPane statusBarPane.Visible = True ' Loop through each sheet and export to PDF For i = 0 To UBound(sheetNames) ' Update the status bar with the current sheet being exported statusBarPane.Text = \"Exporting sheet: \" & sheetNames(i) ' Set the current sheet for PDF export exportSuccess = swExportPdfData.SetSheets(SwConst.swExportDataSheetsToExport_e.swExportData_ExportSpecifiedSheets, sheetNames(i)) ' Check for errors in setting the sheet If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical Exit Sub End If ' Export the current sheet as PDF exportSuccess = swDoc.Extension.SaveAs(sheetNames(i) & \".pdf\", SwConst.swSaveAsVersion_e.swSaveAsCurrentVersion, _ SwConst.swSaveAsOptions_e.swSaveAsOptions_Silent, swExportPdfData, lErrors, lWarnings) ' Check for errors during the export If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical HandleErrors lErrors Exit Sub End If Next i End Sub ' Function to get the folder path from the full file path Private Function GetFolderFromPath(fullPath As String) As String GetFolderFromPath = Left(fullPath, InStrRev(fullPath, \"\\\")) End Function ' Function to get the file name without the sheet name Private Function GetFileNameFromTitle(fullTitle As String, sheetName As String) As String GetFileNameFromTitle = Left(fullTitle, InStrRev(fullTitle, sheetName) - 1) End Function ' Sub to handle errors based on error codes Private Sub HandleErrors(errorCode As Long) Select Case errorCode Case SwConst.swFileSaveError_e.swGenericSaveError MsgBox \"File Saving Error\", vbExclamation Case SwConst.swFileSaveError_e.swReadOnlySaveError MsgBox \"File Saving Error: Read-Only Rights\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameEmpty MsgBox \"File Saving Error: Empty Filename\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameContainsAtSign MsgBox \"File Saving Error: Invalid FileName Character\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveFormatNotAvailable MsgBox \"File Saving Error: Invalid File Format\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveAsNameExceedsMaxPathLength MsgBox \"File Saving Error: Filename Exceeds Maximum Path Length\", vbExclamation End Select End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SetLayersAndDrawLine.html": {
    "href": "src/SetLayersAndDrawLine.html",
    "title": "Set Layer & Draw Line in SolidWorks Drawing | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Set Layer & Draw Line in SolidWorks Drawing Description This macro sets the specified layer as the current layer in the active SolidWorks drawing document and adds a sketched line on that layer. It automates the process of layer management and drawing creation, ensuring that all subsequent sketched entities are added to the specified layer. This is particularly useful for organizing different sketch entities in separate layers. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing document. The specified layer (Grain) must already exist in the active drawing. Results Note The specified layer (Grain) will be set as the active layer. A new sketch line will be created on the specified layer at the given coordinates. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define necessary variables for SolidWorks application, drawing, and layer manager Dim swApp As Object ' Application object (SldWorks) Dim pDrawing As Object ' Active drawing document object Dim pLayerMgr As Object ' Layer manager object Dim pSketchSegment1 As Object ' Sketch segment object (line) Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active drawing document Set pDrawing = swApp.ActiveDoc ' Check if the active document is a drawing If pDrawing Is Nothing Then swApp.SendMsgToUser \"No active drawing document found. Please open a drawing and try again.\" Exit Sub End If ' Get LayerMgr object from the active drawing document Set pLayerMgr = pDrawing.GetLayerManager ' Check if LayerMgr was obtained successfully If pLayerMgr Is Nothing Then swApp.SendMsgToUser \"Failed to get Layer Manager. Make sure you are in a drawing document.\" Exit Sub End If ' Set \"Grain\" as the current layer Dim res As Boolean res = pLayerMgr.SetCurrentLayer(\"Grain\") ' Check if the layer activation was successful If res = False Then swApp.SendMsgToUser \"Error activating the layer 'Grain'. Please ensure the layer exists in the drawing.\" Exit Sub End If ' Enable adding objects to the database without displaying them pDrawing.SetAddToDB True ' Create a line sketch on the active layer Set pSketchSegment1 = pDrawing.CreateLine2(0.15, 0.25, 0, 0.45, 0.25, 0) ' Check if the line was created successfully If pSketchSegment1 Is Nothing Then swApp.SendMsgToUser \"Failed to create the sketch line. Please check the sketch coordinates.\" pDrawing.SetAddToDB False Exit Sub End If ' Disable adding objects to the database pDrawing.SetAddToDB False ' Clear all selections in the drawing pDrawing.ClearSelection ' Notify user of successful operation swApp.SendMsgToUser \"Layer set and line created successfully on the active layer.\" End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Traverse and Export SOLIDWORKS Components to DXF.html": {
    "href": "src/Traverse and Export SOLIDWORKS Components to DXF.html",
    "title": "Traverse and Export SOLIDWORKS Components to DXF | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse and Export SOLIDWORKS Components to DXF Description This VBA macro automates traversing through all components of an active SOLIDWORKS assembly and exporting each part as a DXF file. It handles traversing, exporting flat patterns for sheet metal parts, and saving to a specified location. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Sub Main() ' Initialize SOLIDWORKS application and set active document Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Set swApp = CreateObject(\"SldWorks.Application\") Set swModel = swApp.ActiveDoc ' Prompt user for save path Dim savePath As String savePath = InputBox(\"Where do you want to save the files?\") ' Traverse the active document to process components TraverseComponents swApp.ActiveDoc, savePath End Sub ' Traverse through components and process each one Sub TraverseComponents(swModel As ModelDoc2, savePath As String) Dim swApp As SldWorks.SldWorks Dim swRootComp As SldWorks.Component2 Dim swConf As SldWorks.Configuration Dim swConfMgr As SldWorks.ConfigurationManager Dim vChildComp As Variant Dim i As Long Dim swChildComp As SldWorks.Component2 ' Set the application object Set swApp = CreateObject(\"SldWorks.Application\") Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration Set swRootComp = swConf.GetRootComponent3(True) ' Get child components vChildComp = swRootComp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) Set swModel = swChildComp.GetModelDoc2 ' Check if the model exists If Not swModel Is Nothing Then If swModel.GetType = swDocASSEMBLY Then ' Recursively traverse sub-assemblies TraverseComponents swModel, savePath Else ' Process part (e.g., save as STL or DXF) ProcessPartToDXF swModel, savePath End If End If Next i End Sub ' Process and export flat pattern of the part as DXF Sub ProcessPartToDXF(swModel As SldWorks.ModelDoc2, savePath As String) Dim swFeat As SldWorks.Feature Dim swFlatFeat As SldWorks.Feature ' Iterate through features to find flat pattern Set swFeat = swModel.FirstFeature Do While Not swFeat Is Nothing If swFeat.GetTypeName = \"FlatPattern\" Then Set swFlatFeat = swFeat swFeat.Select (True) swModel.EditUnsuppress2 ' Export the flat pattern as DXF ExportToDXF swModel, savePath ' Suppress the flat pattern after exporting swFlatFeat.Select (True) swModel.EditSuppress2 End If Set swFeat = swFeat.GetNextFeature Loop End Sub ' Export the flat pattern to DXF Sub ExportToDXF(swModel As SldWorks.ModelDoc2, savePath As String) Dim swPart As SldWorks.PartDoc Dim sModelName As String Dim sPathName As String Dim options As Long Dim dataAlignment(11) As Double ' Setup default alignment for export dataAlignment(0) = 0#: dataAlignment(1) = 0#: dataAlignment(2) = 0# dataAlignment(3) = 1#: dataAlignment(4) = 0#: dataAlignment(5) = 0# dataAlignment(6) = 0#: dataAlignment(7) = 1#: dataAlignment(8) = 0# dataAlignment(9) = 0#: dataAlignment(10) = 0#: dataAlignment(11) = 1# ' Get model and path names sModelName = swModel.GetPathName sPathName = savePath & \"\\\" & swModel.GetTitle & \".dxf\" ' Set export options options = 13 ' Export flat pattern geometry, bend lines, and sketches ' Perform DXF export Set swPart = swModel swPart.ExportToDWG sPathName, sModelName, 1, True, dataAlignment, False, False, options, Null End Sub ' Function to extract the title from a file path Public Function GetTitle(filePath As String) As String Dim pathParts As Variant pathParts = Split(filePath, \"\\\") GetTitle = Left(pathParts(UBound(pathParts)), InStr(pathParts(UBound(pathParts)), \".\") - 1) End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/addmasscenter.html": {
    "href": "src/addmasscenter.html",
    "title": "Add Center of Mass to a Part in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Add Center of Mass to a Part in SOLIDWORKS Macro Description This VBA macro is designed to automatically add a center of mass (COM) point to a part in SOLIDWORKS. The macro calculates the center of mass of the part and inserts a point at that location, making it easier to analyze the balance and mass distribution of the part. This functionality is especially useful for engineers and designers who frequently work with parts requiring balance and stability assessments. VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim swModelDoc As SldWorks.ModelDoc2 Dim swCenterMass As SldWorks.Feature Dim swCenterMassReferencePoint As SldWorks.Feature Option Explicit Sub main() Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swCenterMass = swModelDoc.FeatureManager.InsertCenterOfMass Set swCenterMassReferencePoint = swModelDoc.FeatureManager.InsertCenterOfMassReferencePoint End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: None required (uses standard SOLIDWORKS API references) Note Pre-conditions The active document must be a part (.sldprt) in SOLIDWORKS. The part should have a valid material assigned to ensure the correct center of mass is calculated. The part must not be empty (should contain geometry). Note Post-conditions A center of mass point will be inserted into the part. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/assembly_export_dxf.html": {
    "href": "src/assembly_export_dxf.html",
    "title": "Export Sheet Metal to DXF in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheet Metal to DXF in SOLIDWORKS Macro Description This VBA macro automates the process of exporting all sheet metal parts from a SOLIDWORKS assembly to DXF files. The macro loops through each component in the assembly, checks if it's a sheet metal part, and exports the flat pattern of the part to a DXF file. The macro ensures that duplicate parts are not processed more than once, preventing redundant exports. VBA Macro Code ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** ' Enum for Sheet Metal export options Enum SheetMetalOptions_e ExportFlatPatternGeometry = 1 IncludeHiddenEdges = 2 ExportBendLines = 4 IncludeSketches = 8 MergeCoplanarFaces = 16 ExportLibraryFeatures = 32 ExportFormingTools = 64 ExportBoundingBox = 2048 End Enum ' Declare SolidWorks and component variables Dim swApp As SldWorks.SldWorks Dim swAssemblyDoc As AssemblyDoc Dim swcomponent As Component2 Dim vcomponents As Variant Dim processedFiles As New Collection Dim component Sub main() ' Get the active SolidWorks application Set swApp = Application.SldWorks ' Get the active document (assembly) Set swAssemblyDoc = swApp.ActiveDoc ' Ensure that the active document is an assembly If swAssemblyDoc Is Nothing Then MsgBox \"Please open an assembly document.\", vbExclamation Exit Sub End If ' Get all components of the assembly vcomponents = swAssemblyDoc.GetComponents(False) ' Loop through each component in the assembly For Each component In vcomponents ' Set the component Set swcomponent = component ' Get the ModelDoc2 (part or assembly) for the component Dim swmodel As ModelDoc2 Set swmodel = swcomponent.GetModelDoc2 ' Check if the model is valid If Not swmodel Is Nothing Then ' Check if the model has already been processed If ExistsInCollection(processedFiles, swmodel.GetTitle()) = False Then ' Export the sheet metal part to DXF PrintDXF swmodel ' Add the processed file to the collection to avoid duplicates processedFiles.Add swmodel.GetTitle(), swmodel.GetTitle() End If End If Next End Sub ' Function to export a sheet metal part to DXF Function PrintDXF(ByRef swmodel As ModelDoc2) As String ' Check if the document is a part file If swmodel.GetType() = SwConst.swDocumentTypes_e.swDocPART Then Dim swPart As PartDoc Set swPart = swmodel ' Get the model path Dim modelPath As String modelPath = swPart.GetPathName ' Define the output DXF path Dim OUT_PATH As String OUT_PATH = Left(modelPath, Len(modelPath) - 6) ' Remove \".SLDPRT\" extension OUT_PATH = OUT_PATH + \"dxf\" ' Make the model visible before exporting swmodel.Visible = True ' Export the sheet metal part to DXF using specified options If False = swPart.ExportToDWG2(OUT_PATH, modelPath, swExportToDWG_e.swExportToDWG_ExportSheetMetal, _ True, Empty, False, False, _ SheetMetalOptions_e.ExportFlatPatternGeometry + _ SheetMetalOptions_e.ExportBendLines, Empty) Then ' Raise error if export fails err.Raise vbError, \"\", \"Failed to export flat pattern\" End If ' Hide the model after exporting swmodel.Visible = False End If ' Print the model path to the debug console Debug.Print swmodel.GetPathName() End Function ' Function to check if an item exists in a collection Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) ' Check if the item exists in the collection Exit Function err: ExistsInCollection = False ' Return false if the item does not exist End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Note Pre-conditions The active document must be an assembly (.sldasm) in SOLIDWORKS. Ensure that the components contain valid sheet metal parts for export. Note Post-conditions The flat pattern of each sheet metal part will be exported as a DXF file. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/create_boundingbox_feature_for_all_components.html": {
    "href": "src/create_boundingbox_feature_for_all_components.html",
    "title": "Create Bounding Box for Assembly and Components | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Create Bounding Box for Assembly and Components Warning This macro creates the SOLIDWORKS bounding box feature and a not custom one. It requires SOLIDWORKS 2018 or newer. We have an alternative macro that uses sketch entities that create a tightest-fit bounding box. Macro Description This macro creates a bounding box for the main assembly and its components within the active document in SOLIDWORKS. It traverses each component in the assembly, checking if a bounding box has already been created for the component. If not, the bounding box is created, and the component is processed. VBA Macro Code Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swAssembly As AssemblyDoc Dim vComponents As Variant Dim ProcessedFiles As New Collection Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly Set swAssembly = swModel ' Create bounding box for the main assembly CreateBoundingBox swModel ' Get all components of the assembly vComponents = swAssembly.GetComponents(False) Dim component For Each component In vComponents Dim swComponent As Component2 Set swComponent = component Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then ' Check if component already processed If ExistsInCollection(ProcessedFiles, swComponentModelDoc.GetTitle()) = False Then ' Create bounding box for the component CreateBoundingBox swComponentModelDoc ' Add component to processed list ProcessedFiles.Add swComponentModelDoc.GetTitle(), swComponentModelDoc.GetTitle() ' Output component path for debugging Debug.Print swComponentModelDoc.GetPathName() End If End If Next component End Sub Sub CreateBoundingBox(ByRef swComponentModelDoc As ModelDoc2) ' Make the document visible swComponentModelDoc.Visible = True Dim swFeatureManager As featureManager Dim swBoundingBoxFeatureDefinition As BoundingBoxFeatureData Dim swBoundingBoxFeature As Feature ' Access the FeatureManager Set swFeatureManager = swComponentModelDoc.featureManager ' Define the bounding box feature Set swBoundingBoxFeatureDefinition = swFeatureManager.CreateDefinition(swConst.swFmBoundingBox) ' Set options for bounding box creation swBoundingBoxFeatureDefinition.ReferenceFaceOrPlane = swConst.swGlobalBoundingBoxFitOptions_e.swBoundingBoxType_BestFit swBoundingBoxFeatureDefinition.IncludeHiddenBodies = False swBoundingBoxFeatureDefinition.IncludeSurfaces = False ' Create the bounding box feature Set swBoundingBoxFeature = swFeatureManager.CreateFeature(swBoundingBoxFeatureDefinition) ' Make the document invisible again swComponentModelDoc.Visible = False End Sub Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) Exit Function err: ExistsInCollection = False End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/export_all_assembly_components_to_multiple_formats.html": {
    "href": "src/export_all_assembly_components_to_multiple_formats.html",
    "title": "Export Configurations of Assembly Components to Multiple Formats | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export Configurations of Assembly Components to Multiple Formats Description This macro automates the process of exporting all configurations of components within an active SOLIDWORKS assembly to multiple file formats. It iterates through each component in the assembly, checks if it has already been processed to avoid duplicates, and then exports each configuration of the component to .step, .igs, and .x_t formats. The exported files are saved in a specified directory with filenames that include the component name and configuration name. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 7 or later VBA Code '********************************************************* ' Blue Byte Systems Inc. ' Disclaimer: Blue Byte Systems Inc. provides this macro \"as-is\" without any warranties. ' Use at your own risk. The company is not liable for any damages resulting from its use. '********************************************************* Option Explicit Dim swApp As SldWorks.SldWorks Dim swAssembly As SldWorks.AssemblyDoc Dim swComponent As SldWorks.Component2 Dim vComponents As Variant Dim processedFiles As Collection Dim component As Variant Sub Main() Dim errors As Long Dim warnings As Long ' Initialize the collection to keep track of processed files Set processedFiles = New Collection ' Get the SOLIDWORKS application object Set swApp = Application.SldWorks ' Get the active document and ensure it is an assembly Set swAssembly = swApp.ActiveDoc If swAssembly Is Nothing Then MsgBox \"No active document found.\", vbExclamation, \"Error\" Exit Sub End If If swAssembly.GetType <> swDocumentTypes_e.swDocASSEMBLY Then MsgBox \"The active document is not an assembly.\", vbExclamation, \"Error\" Exit Sub End If ' Get all components in the assembly vComponents = swAssembly.GetComponents(False) ' Iterate through each component For Each component In vComponents Set swComponent = component Dim swModel As SldWorks.ModelDoc2 Set swModel = swComponent.GetModelDoc2 If Not swModel Is Nothing Then ' Check if the model has already been processed If Not ExistsInCollection(processedFiles, swModel.GetTitle()) Then ' Save configurations of the model SaveConfigurations swModel ' Add the model to the processed files collection processedFiles.Add swModel.GetTitle(), swModel.GetTitle() End If End If Next component MsgBox \"Export completed successfully.\", vbInformation, \"Done\" End Sub Sub SaveConfigurations(ByRef swModel As SldWorks.ModelDoc2) Dim extensions(1 To 3) As String extensions(1) = \".step\" extensions(2) = \".igs\" extensions(3) = \".x_t\" swModel.Visible = True Dim configurationNames As Variant configurationNames = swModel.GetConfigurationNames Dim configName As Variant For Each configName In configurationNames swModel.ShowConfiguration2 configName Dim extension As Variant For Each extension In extensions Dim outputPath As String outputPath = \"C:\\BOM Export\\\" outputPath = outputPath & Left(swModel.GetTitle(), 6) & \"_\" & configName & extension Dim saveSuccess As Boolean Dim errors As Long Dim warnings As Long saveSuccess = swModel.Extension.SaveAs3(outputPath, _ swSaveAsVersion_e.swSaveAsCurrentVersion, _ swSaveAsOptions_e.swSaveAsOptions_Silent, _ Nothing, Nothing, errors, warnings) If Not saveSuccess Then MsgBox \"Failed to save: \" & outputPath, vbExclamation, \"Error\" End If Next extension Next configName swModel.Visible = False End Sub Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo ErrHandler ExistsInCollection = True Dim temp As Variant temp = col.Item(key) Exit Function ErrHandler: ExistsInCollection = False End Function Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/exportbomtoexcelwiththumbnails.html": {
    "href": "src/exportbomtoexcelwiththumbnails.html",
    "title": "Export BOM with Thumbnail Preview in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export BOM with Thumbnail Preview in SOLIDWORKS Macro Description This VBA macro automates the process of exporting a Bill of Materials (BOM) from a SOLIDWORKS drawing into an Excel sheet, while also adding a thumbnail image preview of the parts. The macro is designed to enhance the visualization of BOMs, allowing users to include part thumbnails directly in the Excel output. This can be extremely useful for teams needing a detailed and visual breakdown of the parts for purchasing, inventory, or assembly processes. VBA Macro Code ' All rights reserved to Blue Byte Systems Inc. ' Blue Byte Systems Inc. does not provide any warranties for macros. ' Pre-conditions: BOM pre-selected. ' Results: BOM created in Excel with thumbnail preview. ' Define the width and height of the thumbnail (in pixels) Dim Width As Long ' in pixels Dim Height As Long ' in pixels Dim swApp As Object Dim swModel As Object Dim swTableAnnotation As Object Dim exApp As Object Dim exWorkbook As Object Dim exWorkSheet As Object Dim swSelectionManager As Object ' Enums for SolidWorks document types, Excel alignment, and table header positions Public Enum swDocumentTypes_e swDocDRAWING = 3 End Enum Public Enum xlTextAlignment xlCenter = -4108 End Enum Public Enum swTableHeaderPosition_e swTableHeader_Top = 1 swTableHeader_Bottom = 2 swTableHeader_None = 0 End Enum Public Enum swSelectType_e swSelBOMS = 97 End Enum Sub Main() ' Set the thumbnail dimensions Width = 21 Height = 60 ' Get a pointer to the SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set swModel = swApp.ActiveDoc If swModel Is Nothing Then swApp.SendMsgToUser \"There is no active document\" End End If ' Get the selection manager Set swSelectionManager = swModel.SelectionManager ' Get the count of selected objects Dim Count As Long Count = swSelectionManager.GetSelectedObjectCount2(-1) ' If no BOM is selected, exit the macro If Count = 0 Then swApp.SendMsgToUser \"You have not selected any bill of materials!\" Exit Sub End If ' Traverse the selection and process all selected bill of materials For i = 1 To Count If swSelectionManager.GetSelectedObjectType3(i, -1) = SwConst.swSelectType_e.swSelANNOTATIONTABLES Then Set swTableAnnotation = swSelectionManager.GetSelectedObject6(i, -1) Dim Ret As String Ret = SaveBOMInExcelWithThumbNail(swTableAnnotation) If Ret = \"\" Then Debug.Print \"Success: \" & swTableAnnotation.GetAnnotation.GetName swApp.SendMsgToUser \"The selected BOM has been exported with thumbnail preview to Excel.\" Else swApp.SendMsgToUser \"Macro failed to export!\" End If End If Next i End Sub ' Function to save BOM to Excel with thumbnail preview Public Function SaveBOMInExcelWithThumbNail(ByRef swTableAnnotation As Object) As String ' Initialize Excel application Set exApp = CreateObject(\"Excel.Application\") If exApp Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to initialize the Excel application\" Exit Function End If exApp.Visible = True ' Create a new workbook and worksheet Set exWorkbook = exApp.Workbooks.Add Set exWorkSheet = exWorkbook.ActiveSheet If exWorkSheet Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to get the active sheet\" Exit Function End If ' If the BOM has no rows, return an error If swTableAnnotation.RowCount = 0 Then SaveBOMInExcelWithThumbNail = \"BOM has no rows!\" Exit Function End If Dim swBOMTableAnnotation As BomTableAnnotation Set swBOMTableAnnotation = swTableAnnotation ' Set the column width exWorkSheet.Columns(1).ColumnWidth = Width ' Set the header row index based on the BOM header position Dim HeaderRowIndex As Long Dim swHeaderIndex As Integer swHeaderTable = swTableAnnotation.GetHeaderStyle If swHeaderTable = swTableHeaderPosition_e.swTableHeader_Bottom Then swHeaderIndex = swTableAnnotation.RowCount Else swHeaderIndex = 1 End If ' Traverse through each row in the BOM table Skipper: For i = 0 To swTableAnnotation.RowCount - 1 ' Skip hidden rows If swTableAnnotation.RowHidden(i) Then GoTo Skipper ' Add preview image Dim swComponents As Variant swComponents = swBOMTableAnnotation.GetComponents(i) If Not IsEmpty(swComponents) Then Dim swComponent As Object Set swComponent2 = swComponents(0) Dim swComponentModel As Object Set swComponentModel = swComponent2.GetModelDoc2 If Not swComponentModel Is Nothing Then swComponentModel.Visible = True Dim imagePath As String imagePath = Environ(\"TEMP\") + \"\\tempBitmap.jpg\" swComponentModel.ViewZoomtofit2 Dim saveRet As Boolean Dim er As Long Dim wr As Long saveRet = swComponentModel.Extension.SaveAs(imagePath, 0, 0, Nothing, er, wr) If er + wr > 0 Then SaveBOMInExcelWithThumbNail = \"An error has occurred while trying to save the thumbnail of \" & swModel.GetTitle & \" to the local temp folder. The macro will exit now.\" Exit Function End If swComponentModel.Visible = False exWorkSheet.Rows(i + 1).RowHeight = Height InsertPictureInRange exWorkSheet, imagePath, exWorkSheet.Range(\"A\" & i + 1 & \":A\" & i + 1) End If End If ' Populate Excel sheet with BOM table data For j = 0 To swTableAnnotation.ColumnCount - 1 If swTableAnnotation.ColumnHidden(j) Then GoTo Skipper exWorkSheet.Cells(i + 1, j + 2).Value = swTableAnnotation.DisplayedText(i, j) Next j Next i ' Bold the header row For j = 2 To swTableAnnotation.ColumnCount + 1 exWorkSheet.Cells(swHeaderIndex, j).Font.Bold = True Next j ' Auto-fit the columns and center align the content Dim r As Object Set r = exWorkSheet.Range(exWorkSheet.Cells(1, 2), exWorkSheet.Cells(swTableAnnotation.RowCount + 1, swTableAnnotation.ColumnCount + 1)) r.Columns.AutoFit r.HorizontalAlignment = xlTextAlignment.xlCenter r.VerticalAlignment = xlTextAlignment.xlCenter End Function ' Subroutine to insert a picture in a specific range in Excel Sub InsertPictureInRange(ActiveSheet As Object, PictureFileName As String, TargetCells As Object) ' Inserts a picture and resizes it to fit the TargetCells range Dim p As Object, t As Double, l As Double, w As Double, h As Double If TypeName(ActiveSheet) > \"Worksheet\" Then Exit Sub If Dir(PictureFileName) = \"\" Then Exit Sub ' Import picture Set p = ActiveSheet.Pictures.Insert(PictureFileName) ' Determine positions With TargetCells t = .Top l = .Left w = .Offset(0, .Columns.Count).Left - .Left h = .Offset(.Rows.Count, 0).Top - .Top End With ' Position picture With p .Top = t .Left = l .Width = w .Height = h End With Set p = Nothing End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Microsoft Excel Note Pre-conditions A Bill of Materials (BOM) must be pre-selected in the SOLIDWORKS drawing. Excel must be installed on the machine. Note Post-conditions The BOM will be exported into an Excel file with a part thumbnail preview inserted for each row. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "| ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Introduction to VBA Macros in SOLIDWORKS What is a VBA Macro? A VBA (Visual Basic for Applications) macro is a small program written using the VBA programming language, designed to automate repetitive tasks within software applications. In the context of SOLIDWORKS, VBA macros allow users to streamline their workflows by automating design tasks, reducing manual input, and increasing overall productivity. Instead of performing the same actions manually, a macro can execute them in seconds, saving time and minimizing human error. Why Use VBA Macros in SOLIDWORKS? SOLIDWORKS is a powerful CAD software used by engineers and designers to create complex 3D models and assemblies. However, as with any software, there are tasks that are repetitive or prone to error when performed manually. This is where VBA macros come in handyâ€”they enable users to automate tasks such as: Modifying properties or configurations across multiple files Generating drawings or BOMs (Bill of Materials) Editing or creating features in parts and assemblies Exporting data to various formats such as DXF, PDF, or Excel Using VBA macros can significantly improve your efficiency, especially when dealing with large assemblies, multi-part projects, or standardized workflows. Instead of spending time on repetitive actions, users can focus on innovation and improving their designs. Getting Started with SOLIDWORKS VBA Macros To use VBA macros in SOLIDWORKS, you can either write your own macros or use existing ones provided by various sources, such as Blue Byte Systemsâ€™ SOLIDWORKS VBA Macro Library. The library offers a collection of macros that automate common tasks, each categorized for easy access based on functionality (e.g., part creation, assembly management, drawing automation). How to Create or Run a VBA Macro in SOLIDWORKS Open the VBA Editor: Go to the Tools menu in SOLIDWORKS, then navigate to Macro and select New to create a new macro, or Run to execute an existing one. Write or Edit the Macro: If youâ€™re creating a new macro, the VBA editor will open, allowing you to write your code. Macros consist of VBA code that interfaces with SOLIDWORKS' API (Application Programming Interface) to control different aspects of the application. Execute the Macro: Once the macro is written or selected, you can run it directly within SOLIDWORKS. The macro will perform the tasks it's programmed for, interacting with the current part, assembly, or drawing. Test and Debug: Always test macros on sample files to ensure they work as expected, and make necessary adjustments to the code if any issues arise. Free VBA Macro Library by Blue Byte Systems Blue Byte Systems provides a comprehensive VBA macro library tailored for SOLIDWORKS users. These macros are designed to help users automate tasks in various areas, including part modeling, assembly management, and sketching. The library is completely free, making it accessible to all SOLIDWORKS users, from beginners to advanced engineers. The macros are organized into categories for easy navigation: Part Automation: Macros related to modifying or creating parts. Assembly Automation: Macros to streamline assembly management. Drawing Automation: Macros focused on automating drawing creation and export. Sketch Automation: Macros for working with sketches more efficiently. Whether you're looking to automate repetitive tasks, modify part properties, or generate drawings quickly, the library offers solutions that save you time and enhance your productivity."
  },
  "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html": {
    "href": "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html",
    "title": "Traverse Assembly Components in SOLIDWORKS Using VBA | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly Components in SOLIDWORKS Using VBA Macro Description This article explains how to write a VBA macro in SOLIDWORKS to traverse through an assembly's components and list their hierarchy. The macro explores the assembly structure, identifies components, and logs their names with proper indentation to reflect their parent-child relationship within the assembly. VBA Macro Code ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Dim swApp As SldWorks.SldWorks Dim swRootAssemblyModelDoc As ModelDoc2 Sub main() Set swApp = Application.SldWorks swApp.CommandInProgress = True Set swRootAssemblyModelDoc = swApp.ActiveDoc Dim swFeature As Feature Set swFeature = swRootAssemblyModelDoc.FirstFeature While Not swFeature Is Nothing TraverseFeatureForComponents swFeature Set swFeature = swFeature.GetNextFeature Wend swApp.CommandInProgress = False End Sub Private Sub TraverseFeatureForComponents(ByVal swFeature As Feature) Dim swSubFeature As Feature Dim swComponent As Component2 Dim typeName As String typeName = swFeature.GetTypeName2 If typeName = \"Reference\" Then Set swComponent = swFeature.GetSpecificFeature2 If Not swComponent Is Nothing Then LogComponentName swComponent Set swSubFeature = swComponent.FirstFeature() While Not swSubFeature Is Nothing TraverseFeatureForComponents swSubFeature Set swSubFeature = swSubFeature.GetNextFeature() Wend End If End If End Sub Private Sub LogComponentName(ByVal swComponent As Component2) Dim parentCount As Long Dim swParentComponent As Component2 Set swParentComponent = swComponent.GetParent() While Not swParentComponent Is Nothing parentCount = parentCount + 1 Set swParentComponent = swParentComponent.GetParent() Wend Dim indentation As String indentation = Replicate(\" \", parentCount) Debug.Print indentation & Split(swComponent.GetPathName(), \"\\\")(UBound(Split(swComponent.GetPathName(), \"\\\"))) End Sub Public Function Replicate(RepeatString As String, ByVal NumOfTimes As Long) If NumOfTimes = 0 Then Replicate = \"\" Exit Function End If Dim s As String Dim c As Long Dim l As Long Dim i As Long l = Len(RepeatString) c = l * NumOfTimes s = Space$(c) For i = 1 To c Step l Mid(s, i, l) = RepeatString Next Replicate = s End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  }
}