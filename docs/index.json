{
  "README.html": {
    "href": "README.html",
    "title": "| SOLIDWORKS Macros Lib",
    "keywords": "Liability Disclaimer Blue Byte Systems Inc. provides the SOLIDWORKS VBA Macro Library as a free resource intended to assist users in automating repetitive tasks within SOLIDWORKS. While we strive to ensure that the macros are efficient, accurate, and beneficial, they are provided as-is, without any guarantees or warranties, either expressed or implied, including but not limited to the accuracy, reliability, or fitness for a particular purpose. By using any of the macros from this library, you acknowledge and agree to the following: Use at Your Own Risk: The use of these macros is entirely at your own risk. Blue Byte Systems Inc. assumes no responsibility or liability for any direct, indirect, incidental, or consequential damages, including but not limited to loss of data, disruption of workflow, damage to hardware or software, or loss of business profits arising out of or in connection with the use of the macros provided. No Warranty: The macros are provided without any warranty, either expressed or implied, including but not limited to warranties of performance, merchantability, non-infringement, or fitness for a particular purpose. We do not guarantee that the macros will meet your specific requirements or that they will be error-free, bug-free, or free of unintended consequences. Modifications: Any modifications made to the macros are done at your own discretion and risk. Blue Byte Systems Inc. is not liable for any issues arising from user modifications to the original code. We recommend testing any macros thoroughly before implementing them into a production environment. Backup and Testing: It is strongly recommended that users create appropriate backups of all important files before using any macro from this library. Furthermore, users should conduct extensive testing of any macro in a non-production environment before applying it to live data or systems. No Support Obligations: Blue Byte Systems Inc. is not obligated to provide any form of technical support, bug fixes, or updates to the macros. Users may submit inquiries, but there is no guarantee of response or resolution. Legal Limitations: In jurisdictions that do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, the liability of Blue Byte Systems Inc. will be limited to the greatest extent permitted by law. By downloading, modifying, or using any VBA macro from this library, you agree that Blue Byte Systems Inc., its employees, affiliates, and partners will not be held liable for any damages or issues resulting from the use or misuse of these macros. In Summary: You use the VBA Macro Library at your own risk. Blue Byte Systems Inc. is not responsible for any adverse outcomes that may arise from using the provided macros, and it is solely your responsibility to ensure that the macros are suitable for your specific use case. If you do not agree to these terms, do not use the macros provided by Blue Byte Systems Inc."
  },
  "index.html": {
    "href": "index.html",
    "title": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library | SOLIDWORKS Macros Lib",
    "keywords": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library A macro is a small, self-contained program that automates repetitive tasks in SOLIDWORKS. Our VBA Macro Library is designed to streamline your workflow by providing a collection of pre-written macros that help automate common tasks in SOLIDWORKS such as part creation, assembly management, and sketching. Getting Started Explore the VBA Macro Library to find pre-built automation solutions for your SOLIDWORKS projects. Free and Organized by Category All of our VBA macros are free to use and are carefully organized into the following categories: Parts: Automate tasks related to part creation, modifications, and features. Assemblies: Manage assemblies, components, and mates efficiently. Sketching: Simplify sketch-related tasks, including constraints, dimensions, and geometry creation. Drawings: Generate or modify drawing views and annotations quickly. Bill Of Materials: Macros that manage Bill Of Materials. Each macro is designed to save you time and reduce repetitive tasks, helping you work more efficiently with SOLIDWORKS. Contact Us For more information or to contact us about our VBA Macro Library, please visit our Contact Us page."
  },
  "src/Align_All_Dimensions_Automatically.html": {
    "href": "src/Align_All_Dimensions_Automatically.html",
    "title": "Align All Dimensions Automatically | SOLIDWORKS Macros Lib",
    "keywords": "Align All Dimensions Automatically Description This VBA macro automates selecting and arranging dimensions in SOLIDWORKS drawings. It loops through views, selects display dimensions, and auto-arranges them. System Requirements SOLIDWORKS 2014 or newer Active drawing document open in SOLIDWORKS VBA Code: ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Option Explicit Public swApp As SldWorks.SldWorks Public swModel As SldWorks.ModelDoc2 Public swDraw As SldWorks.DrawingDoc Public swView As SldWorks.View Public swDispDim As SldWorks.DisplayDimension Public swAnn As SldWorks.Annotation Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings!\", vbCritical, \"Error\" Exit Sub End If Set swDraw = swModel Set swView = swDraw.GetFirstView swModel.ClearSelection2 True ' Loop through all views and select display dimensions Do While Not swView Is Nothing Set swDispDim = swView.GetFirstDisplayDimension5 Do While Not swDispDim Is Nothing Set swAnn = swDispDim.GetAnnotation swAnn.Select True Set swDispDim = swDispDim.GetNext5 Loop Set swView = swView.GetNextView Loop ' Auto-arrange dimensions swModel.Extension.AlignDimensions swAlignDimensionType_AutoArrange, 0.06 swModel.ClearSelection2 True End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CGPoint.html": {
    "href": "src/CGPoint.html",
    "title": "Create Center of Gravity Point in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Create Center of Gravity Point in SolidWorks ## Description This macro creates a 3D sketch point at the Center of Gravity (CoG) of the active part or assembly document in SolidWorks. It can be used to quickly identify the center of mass location within a part or assembly for analysis and design purposes. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly file. The part or assembly must contain valid geometry to calculate the center of gravity. Ensure the part or assembly is open and active before running the macro. Results Note A 3D sketch will be created with a point located at the Center of Gravity. The new sketch will be named \"CenterOfGravity\" in the feature tree. An error message will be displayed if there is no geometry to process or if the document type is not valid. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part or assembly) Dim boolstatus As Boolean ' Boolean status variable Dim longstatus As Long ' Long status variable for capturing operation results Dim Annotation As Object ' Annotation object for any annotations added (not used here) Dim Gtol As Object ' Geometric tolerance object (not used here) Dim DatumTag As Object ' Datum tag object (not used here) Dim FeatureData As Object ' Feature data object for manipulating feature details (not used here) Dim Feature As Object ' Feature object for creating/manipulating features (not used here) Dim Component As Object ' Component object for assemblies (not used here) ' Main subroutine to create the Center of Gravity point in a 3D sketch Sub main() Dim mp As Variant ' Array to hold the mass properties (center of gravity coordinates) Dim PlaneObj As Object ' Plane object (not used here) Dim PlaneName As String ' Name of the plane (not used here) Dim SketchObj As Object ' Sketch object for creating the 3D sketch (not used here) Dim Version As String ' SolidWorks version (not used here) ' Error handling block to capture unexpected issues On Error GoTo errhandlr ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Check if SolidWorks application is available If swApp Is Nothing Then MsgBox \"SolidWorks application not found. Please ensure SolidWorks is installed and running.\", vbCritical, \"SolidWorks Not Found\" Exit Sub End If ' Get the currently active document Set Part = swApp.ActiveDoc ' Check if there is an active document open in SolidWorks If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing (GetType = 3 corresponds to drawing) If Part.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Enable adding objects directly to the database without showing in the UI Part.SetAddToDB True ' Get the mass properties of the active part or assembly ' mp array holds center of mass coordinates (mp(0) = X, mp(1) = Y, mp(2) = Z) mp = Part.GetMassProperties ' Check if mass properties are valid (in case the part has no geometry) If Not IsArray(mp) Or UBound(mp) < 2 Then MsgBox \"No geometry found in the part or assembly. Cannot calculate center of gravity.\", vbCritical, \"Invalid Geometry\" Exit Sub End If ' Insert a new 3D sketch Part.Insert3DSketch ' Create a point at the center of gravity coordinates Part.CreatePoint2 mp(0), mp(1), mp(2) ' Exit the sketch mode Part.InsertSketch ' Rename the newly created feature to \"CenterOfGravity\" in the feature tree Part.FeatureByPositionReverse(0).Name = \"CenterOfGravity\" ' Successfully exit the subroutine Exit Sub ' Error handling block errhandlr: MsgBox \"An error occurred. No valid geometry found to process.\", vbCritical, \"Error\" Exit Sub End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ChangePartUnitAsPerAssembly.html": {
    "href": "src/ChangePartUnitAsPerAssembly.html",
    "title": "Match Unit System of All Sub-Parts and Sub-Assemblies with Main Assembly | SOLIDWORKS Macros Lib",
    "keywords": "Match Unit System of All Sub-Parts and Sub-Assemblies with Main Assembly Description This macro changes the unit system of all sub-parts and sub-assemblies in the active assembly to match the unit system of the main assembly. The macro ensures that all components in the assembly have a consistent unit system, which is crucial for accurate measurement and interoperability. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. The macro should be run with all necessary permissions to modify and save the components. Results Note All sub-parts and sub-assemblies in the assembly will have their unit systems changed to match the main assembly's unit system. The changes will be saved, and a message box will display the updated unit system. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swmodel As SldWorks.ModelDoc2 ' Active model document (assembly) Dim swasm As SldWorks.AssemblyDoc ' Assembly document object Dim swconf As SldWorks.Configuration ' Configuration object Dim swrootcomp As SldWorks.Component2 ' Root component of the assembly Dim usys As Long ' Main assembly unit system Dim usys1 As Long ' Main assembly linear units Dim dunit As Long ' Dual linear unit system value Dim bret As Boolean ' Boolean return status variable Dim err As Long, war As Long ' Error and warning variables ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and update unit systems ' -------------------------------------------------------------------------- Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swmodel = swApp.ActiveDoc ' Check if there is an active document open If swmodel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If swmodel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the active configuration and root component of the assembly Set swconf = swmodel.GetActiveConfiguration Set swrootcomp = swconf.GetRootComponent3(True) ' Get the main assembly's unit system and dual units usys = swmodel.GetUserPreferenceIntegerValue(swUnitSystem) ' Unit system (CGS, MKS, IPS, etc.) dunit = swmodel.GetUserPreferenceIntegerValue(swUnitsDualLinear) ' Dual linear unit system If usys = 4 Then usys1 = swmodel.GetUserPreferenceIntegerValue(swUnitsLinear) ' Custom linear units End If ' Traverse through all sub-components and update their unit systems Traverse swrootcomp, 1 ' Notify the user about the updated unit system Select Case usys Case 1 swApp.SendMsgToUser2 \"Unit system changed to CGS\", swMbInformation, swMbOk Case 2 swApp.SendMsgToUser2 \"Unit system changed to MKS\", swMbInformation, swMbOk Case 3 swApp.SendMsgToUser2 \"Unit system changed to IPS\", swMbInformation, swMbOk Case 4 swApp.SendMsgToUser2 \"Unit system changed to Custom Unit\", swMbInformation, swMbOk Case 5 swApp.SendMsgToUser2 \"Unit system changed to MMGS\", swMbInformation, swMbOk End Select End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly and update unit systems ' -------------------------------------------------------------------------- Sub Traverse(swcomp As SldWorks.Component2, nlevel As Long) ' Declare necessary variables Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Individual child component object Dim swCompConfig As SldWorks.Configuration ' Component configuration object Dim swpmodel As SldWorks.ModelDoc2 ' Model document object of the component Dim path As String ' Path of the component file Dim sPadStr As String ' String for formatting debug output Dim i As Long ' Loop counter for iterating through child components ' Format padding for debug output based on level For i = 0 To nlevel - 1 sPadStr = sPadStr + \" \" Next i ' Get child components of the current component vChildComp = swcomp.GetChildren ' Loop through each child component For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Set the child component ' Recursively traverse through sub-components Traverse swChildComp, nlevel + 1 ' Check if the child component is valid If Not swChildComp Is Nothing Then path = swChildComp.GetPathName ' Get the path of the component ' Open the part or assembly based on file extension If (LCase(Right(path, 3)) = \"prt\") Then Set swpmodel = swApp.OpenDoc6(path, swDocPART, 0, swChildComp.ReferencedConfiguration, err, war) ElseIf (LCase(Right(path, 3)) = \"asm\") Then Set swpmodel = swApp.OpenDoc6(path, swDocASSEMBLY, 0, swChildComp.ReferencedConfiguration, err, war) End If ' If the component is successfully opened, update its unit system If Not swpmodel Is Nothing Then bret = swpmodel.SetUserPreferenceIntegerValue(swUnitSystem, usys) bret = swpmodel.SetUserPreferenceIntegerValue(swUnitsDualLinear, dunit) If usys = 4 Then bret = swpmodel.SetUserPreferenceIntegerValue(swUnitsLinear, usys1) End If ' Save the component after updating the unit system swpmodel.Save3 0, err, war Set swpmodel = Nothing ' Release the object End If End If Next i End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CompPattern.html": {
    "href": "src/CompPattern.html",
    "title": "Feature Driven Component Pattern Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Feature Driven Component Pattern Macro for SolidWorks Description This macro creates a feature-driven pattern for all selected components in an assembly. The last selection in the list is used as the driving pattern, such as a hole feature. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. Multiple components and a feature to drive the pattern must be selected in the order required. Results Note A derived component pattern will be created in the assembly based on the selected driving feature. Steps to Setup the Macro 1. Select Components and Feature: In the assembly, select the components to pattern. Select the driving pattern feature (e.g., a hole feature) as the last selection. 2. Run the Macro: Execute the macro to create a component pattern based on the selected driving feature. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim SelMgr As Object ' Selection manager for the active document Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Long status for warnings/errors Dim Feature As Object ' Feature object Dim CurSelCount As Long ' Count of selected items Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Ensure there is an active document If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"Error\" Exit Sub End If ' Initialize the selection manager Set SelMgr = Part.SelectionManager ' Disable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, False ' Check if a plane or face is preselected CurSelCount = SelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Please preselect a plane or face before running the macro.\", vbExclamation, \"No Selection\" Exit Sub End If ' Insert a new sketch on the selected plane or face boolstatus = Part.Extension.SelectByID2(\"\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.InsertSketch2 True Part.ClearSelection2 True ' Create a rectangle centered about the origin Part.SketchRectangle -0.037, 0.028, 0, 0.015, -0.019, 0, True ' Clear selection and add a diagonal construction line Part.ClearSelection2 True Dim Line As Object Set Line = Part.CreateLine2(-0.037, -0.019, 0, 0.015, 0.028, 0) Line.ConstructionGeometry = True ' Add midpoint constraints to ensure the rectangle is centered boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, 0) Part.SketchAddConstraints \"sgATMIDDLE\" Part.ClearSelection2 True ' Add dimensions to the rectangle boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", -0.001, 0.027, 0, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(-0.0004, 0.045, 0) ' Horizontal dimension Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.030, 0.001, 0, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.061, -0.001, 0) ' Vertical dimension Part.ClearSelection2 True ' Re-enable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, True ' Inform the user that the macro is complete MsgBox \"Rectangle sketch created successfully.\", vbInformation, \"Success\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConcentricMate.html": {
    "href": "src/ConcentricMate.html",
    "title": "Auto-Mate Addition Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Auto-Mate Addition Macro for SolidWorks Description This SolidWorks macro automatically adds a mate relationship to the active document, specifically targeting a precise alignment with defined parameters. It's ideal for automating assembly setup processes where specific mating conditions are frequently required. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A document (part or assembly) must be actively open in SolidWorks. The entities to be mated should be pre-selected in the correct order for the mate to apply correctly. Results Note A mate is added to the entities selected in the active document based on the specified parameters. All selections are cleared after the mate is added to prevent clutter and accidental modifications. Steps to Setup the Macro Open SolidWorks: Start SolidWorks and open the document (part or assembly) you wish to modify. Pre-select the entities that need to be mated. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code into this module. Run the macro directly from the VBA editor or save the macro and run it from Tools > Macro > Run. Using the Macro: The macro executes automatically to add a mate based on the predefined parameters. The selection is cleared post-execution to tidy up the workspace. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for SolidWorks application and document Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim Gtol As Object ' Placeholder for potential future use (e.g., geometric tolerances) ' Main subroutine Sub main() ' Initialize SolidWorks application Set swApp = CreateObject(\"SldWorks.Application\") ' Get the active document from SolidWorks Set Part = swApp.ActiveDoc ' Ensure an active document exists If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly.\" Exit Sub End If ' Add a mate with specified parameters ' Parameters: ' - Type: 1 (Concentric) ' - Alignment: 2 (Aligned) ' - Distance/Angle: 0 (No offset) ' - Minimum distance: 0.01 meters ' - Angle: 0.5235987755983 radians (~30 degrees) Part.AddMate 1, 2, 0, 0.01, 0.5235987755983 ' Example parameters for a concentric mate ' Clear any active selections to tidy up Part.ClearSelection ' Notify the user about the operation MsgBox \"Mate added successfully.\" End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ConvertInnerLoop.html": {
    "href": "src/ConvertInnerLoop.html",
    "title": "Convert Entities - Select Inner Loops Only | SOLIDWORKS Macros Lib",
    "keywords": "Convert Entities - Select Inner Loops Only Description This macro provides a keyboard shortcut for the Convert Entities feature in SolidWorks, specifically targeting only the inner loops of a sketch. It automates the selection of inner loops, making it more convenient for users to quickly convert edges of inner contours in a sketch. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly containing a sketch. The user must be in an active sketch before running the macro. Results Note Only inner loops of the sketch will be selected for conversion. A confirmation message or error message will be displayed based on the operation's success. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSketchManager As SldWorks.SketchManager ' Sketch manager object to manage sketch-related functions Dim boolstatus As Boolean ' Status variable to check the success of the operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and activate a sketch.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is either a part or an assembly If swModel.GetType <> swDocPART And swModel.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works with part or assembly documents. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the Sketch Manager object from the active document Set swSketchManager = swModel.SketchManager ' Use the SketchUseEdge3 method to select only inner loops ' Syntax: SketchUseEdge3(ConvertAllEntities As Boolean, SelectInnerLoops As Boolean) As Boolean ' ConvertAllEntities: Set to False to avoid converting all entities in the sketch. ' SelectInnerLoops: Set to True to select only inner loops for conversion. boolstatus = swSketchManager.SketchUseEdge3(False, True) ' Check if the operation was successful and notify the user If boolstatus Then MsgBox \"Inner loops have been successfully selected for conversion.\", vbInformation, \"Operation Successful\" Else MsgBox \"Failed to select inner loops for conversion. Please ensure you are in an active sketch.\", vbExclamation, \"Operation Failed\" End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/CreateCylinder.html": {
    "href": "src/CreateCylinder.html",
    "title": "Cylinder Creation Macro in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Cylinder Creation Macro in SolidWorks Description This macro allows users to create an array of cylinders in SolidWorks based on user-defined parameters such as the number of cylinders, radius, height, and extrusion depth. The macro displays a graphical user interface (GUI) where users can enter these values, and then generates the cylinders in a new part document. This tool is useful for quickly generating a set of uniform cylinders in a structured layout. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note SolidWorks must be open with an active part document. The macro requires user input for cylinder parameters such as quantity, radius, height, and depth. Results Note Creates a specified number of cylinders with the given dimensions. Cylinders are arranged in a linear array with spacing calculated based on radius and quantity. STEPS to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks (Alt + F11). In the Project Explorer, right-click on the project (e.g., Macro1), select Insert > UserForm. Rename the form as UserForm1. Design the form to match the UI provided: Add labels for Tube O.D., Wall Thickness, Length. Add text boxes below each label for user input (e.g., Txt1 for Tube O.D., Txt2 for Wall Thickness, Txt3 for Length, and Txt4 for Depth). Add a button labeled Create Tube and set its name to Pcmd. Optionally, add an image to visually represent the tube dimensions. Add VBA Code: Copy the Macro Code provided below into the module. Copy the UserForm Code into the UserForm1 code-behind. Save and Run the Macro: Save the macro file (e.g., CreateCylinders.swp). Run the macro by going to Tools > Macro > Run in SolidWorks, then select your saved macro. Input Cylinder Parameters: The macro will open the UserForm. Enter the desired parameters for your cylinders and click Create Tube. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object Dim Part As Object Dim SelMgr As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Dim Feature As Object Dim ad As String Sub main() UserForm1.Show End Sub VBA UserForm Code Option Explicit Dim swApp As SldWorks.SldWorks Dim Part As SldWorks.ModelDoc2 Dim SelMgr As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Dim Feature As Object Dim ad As String Dim L As Double Dim W As Double Dim R As Double Dim H As Double Dim No As Integer Dim i As Integer Dim D As Double Dim flag As Boolean Private Sub Pcmd_Click() Set swApp = Application.SldWorks ad = swApp.GetUserPreferenceStringValue(swDefaultTemplatePart) swApp.SetUserPreferenceToggle swInputDimValOnCreate, False Set Part = swApp.NewDocument(ad, 0, 0#, 0#) Set Part = swApp.ActiveDoc No = Txt1.Value R = Txt2.Value / 1000 H = Txt3.Value / 1000 L = (10 * (No + 1) + (No / 2) * (4 * 1000 * R + 10 * (No - 1))) / 1000 W = (20 + 2 * 1000 * R + (No - 1) * 10) / 1000 D = Txt4.Value / 1000 ' Create base sketch and extrusion boolstatus = Part.Extension.SelectByID2(\"Top Plane\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.SketchManager.InsertSketch True Part.ClearSelection2 True Part.SketchRectangle 0, 0, 0, L, W, 0, 1 Part.ClearSelection2 True ' Set sketch dimensions boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", 0.04195712890625, 0, 0.0004216796875, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(0.0411138, 0, 0.0156021) Part.ClearSelection2 True Part.Parameter(\"D1@Sketch1\").SystemValue = L boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.00021083984375, 0, -0.0303609375, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.0132829, 0, -0.0303609) Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"D1@Sketch1@Part1.SLDPRT\", \"DIMENSION\", 0, 0, 0, False, 0, Nothing, 0) Part.Parameter(\"D2@Sketch1\").SystemValue = W Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.ShowNamedView2 \"*Trimetric\", 8 Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Sketch1\", \"SKETCH\", 0, 0, 0, False, 0, Nothing, 0) Part.FeatureManager.FeatureExtrusion2 True, False, False, 0, 0, D, 0.01, False, False, False, False, 0.01745329251994, 0.01745329251994, False, False, False, False, 1, 1, 1, 0, 0, False Part.SelectionManager.EnableContourSelection = 0 ' Create cylinders based on input parameters For i = 1 To No boolstatus = Part.Extension.SelectByID2(\"\", \"FACE\", L, D, -W / 2, False, 0, Nothing, 0) Part.SketchManager.InsertSketch True Part.ClearSelection2 True Part.CreateCircleByRadius2 (10 * i + (i / 2) * (4 * 1000 * R + 10 * (i - 1)) - R * 1000 - (i - 1) * 5) / 1000, W / 2, 0, (1000 * R + (i - 1) * 5) / 1000 Part.ClearSelection2 True Part.SketchManager.InsertSketch True Part.FeatureManager.FeatureExtrusion True, False, False, 0, 0, (1000 * H + 10 * (i - 1)) / 1000, 0.01, False, False, False, False, 0.01745329251994, 0.01745329251994, False, False, False, False, 1, 1, 1 Part.SelectionManager.EnableContourSelection = 0 Next Part.ViewZoomtofit2 End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Create_Bounding_Box_for_Assembly_and_Components.html": {
    "href": "src/Create_Bounding_Box_for_Assembly_and_Components.html",
    "title": "Create Bounding Box for Assembly and Components | SOLIDWORKS Macros Lib",
    "keywords": "Create Bounding Box for Assembly and Components Warning This macro creates the SOLIDWORKS bounding box feature and a not custom one. It requires SOLIDWORKS 2018 or newer. We have an alternative macro that uses sketch entities that create a tightest-fit bounding box. Macro Description This macro creates a bounding box for the main assembly and its components within the active document in SOLIDWORKS. It traverses each component in the assembly, checking if a bounding box has already been created for the component. If not, the bounding box is created, and the component is processed. VBA Macro Code Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swAssembly As AssemblyDoc Dim vComponents As Variant Dim ProcessedFiles As New Collection Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly Set swAssembly = swModel ' Create bounding box for the main assembly CreateBoundingBox swModel ' Get all components of the assembly vComponents = swAssembly.GetComponents(False) Dim component For Each component In vComponents Dim swComponent As Component2 Set swComponent = component Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then ' Check if component already processed If ExistsInCollection(ProcessedFiles, swComponentModelDoc.GetTitle()) = False Then ' Create bounding box for the component CreateBoundingBox swComponentModelDoc ' Add component to processed list ProcessedFiles.Add swComponentModelDoc.GetTitle(), swComponentModelDoc.GetTitle() ' Output component path for debugging Debug.Print swComponentModelDoc.GetPathName() End If End If Next component End Sub Sub CreateBoundingBox(ByRef swComponentModelDoc As ModelDoc2) ' Make the document visible swComponentModelDoc.Visible = True Dim swFeatureManager As featureManager Dim swBoundingBoxFeatureDefinition As BoundingBoxFeatureData Dim swBoundingBoxFeature As Feature ' Access the FeatureManager Set swFeatureManager = swComponentModelDoc.featureManager ' Define the bounding box feature Set swBoundingBoxFeatureDefinition = swFeatureManager.CreateDefinition(swConst.swFmBoundingBox) ' Set options for bounding box creation swBoundingBoxFeatureDefinition.ReferenceFaceOrPlane = swConst.swGlobalBoundingBoxFitOptions_e.swBoundingBoxType_BestFit swBoundingBoxFeatureDefinition.IncludeHiddenBodies = False swBoundingBoxFeatureDefinition.IncludeSurfaces = False ' Create the bounding box feature Set swBoundingBoxFeature = swFeatureManager.CreateFeature(swBoundingBoxFeatureDefinition) ' Make the document invisible again swComponentModelDoc.Visible = False End Sub Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) Exit Function err: ExistsInCollection = False End Function You can download the macro from here System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DeleteConfigurations.html": {
    "href": "src/DeleteConfigurations.html",
    "title": "DeleteAllConfigs: Configuration Management Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "DeleteAllConfigs: Configuration Management Macro for SolidWorks Description This macro allows for the deletion of configurations from a SolidWorks model while optionally retaining a selected configuration. It provides an interface for users to select configurations for deletion and ensures that at least one configuration remains active in the model. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions A SolidWorks part or assembly must be open with multiple configurations. The macro should be executed within the SolidWorks environment with access rights to modify document properties. Results Users can selectively delete configurations from a model. Provides feedback on the number of configurations deleted. Ensures that at least one configuration, typically the \"Default\" configuration, remains undisturbed. Steps to Setup the Macro Create the UserForm: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the Project Explorer, locate the DeleteAllConfigs project. Right-click on Forms and select Insert > UserForm. Rename the newly created form to FormDeleteConfigs. Design the form with the following components: Checkboxes: CheckDeleteConfigs and CheckKeepConfig to select deletion options. Buttons: Delete and Cancel to execute or abort the deletion process. Label: LabelConfigsDeleted to display the status of operations. Implement the Module: Right-click on Modules within the DeleteAllConfigs project. Select Insert > Module. Add the VBA code to this module (DeleteConfigs) to handle the logic for deleting configurations based on the user's selections. Configure Event Handlers: In the FormDeleteConfigs, implement event handlers for the Delete and Cancel buttons. Use ProcessCheck to enable or disable the Delete button based on checkbox states. Save and Run the Macro: Save the macro file (e.g., DeleteAllConfigs.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro. Using the Macro: The macro will open the FormDeleteConfigs. Select the appropriate checkboxes to configure the deletion process. Use the Delete button to remove configurations, or Cancel to close the form without making changes. VBA Macro Code '------------------------------------------------------------------------------ ' DeleteAllConfigs.swp '------------------------------------------------------------------------------ Global swApp As Object Global ModelDoc2 As Object Global Configuration As Object Global FileTyp As String Global numConfigs As Integer Global ConfigNames As Variant Global Retval As Integer Global DelCount As Integer ' SolidWorks constants Global Const swDocPART = 1 Global Const swDocASSEMBLY = 2 Global Const swMbWarning = 1 Global Const swMbInformation = 2 Global Const swMbQuestion = 3 Global Const swMbStop = 4 Global Const swMbAbortRetryIgnore = 1 Global Const swMbOk = 2 Global Const swMbOkCancel = 3 Global Const swMbRetryCancel = 4 Global Const swMbYesNo = 5 Global Const swMbYesNoCancel = 6 Global Const swMbHitAbort = 1 Global Const swMbHitIgnore = 2 Global Const swMbHitNo = 3 Global Const swMbHitOk = 4 Global Const swMbHitRetry = 5 Global Const swMbHitYes = 6 Global Const swMbHitCancel = 7 '------------------------------------------------------------------------------ ' Delete extra configurations from model and set current config to Default '------------------------------------------------------------------------------ Sub Main() Set swApp = CreateObject(\"SldWorks.Application\") ' Attach to SWX Set ModelDoc2 = swApp.ActiveDoc ' Grab active doc If ModelDoc2 Is Nothing Then ' Is doc loaded MsgBox \"No model loaded.\" ' Nothing - Warn Else ' Doc loaded? FileTyp = ModelDoc2.GetType ' Get doc type If FileTyp = swDocASSEMBLY Or FileTyp = swDocPART Then ' Doc model? numConfigs = ModelDoc2.GetConfigurationCount() ' Get # configs If numConfigs > 1 Then ' Check # configs FormDeleteConfigs.Show Else ' Else # config MsgBox \"Only one configuration exists in this model.\" End If ' End # config Else ' Else doc type MsgBox \"Active file is not a SolidWorks model.\" End If ' End doc type End If ' End doc load End Sub VBA UserForm Code '------------------------------------------------------------------------------ ' DeleteAllConfigs.swp '------------------------------------------------------------------------------ Private Sub CheckDeleteConfigs_Click() ProcessCheck End Sub Private Sub CheckKeepConfig_Click() ProcessCheck End Sub Private Sub ProcessCheck() If CheckDeleteConfigs = True And CheckKeepConfig = True Then CommandDelete.Enabled = True Else CommandDelete.Enabled = False End If End Sub Private Sub CommandCancel_Click() End End Sub Private Sub CommandDelete_Click() ConfigNames = ModelDoc2.GetConfigurationNames() For i = 0 To (numConfigs - 1) ' For each config If ConfigNames(i) <> CurrentConfigName Then ' Not active conf ModelDoc2.DeleteConfiguration2 ConfigNames(i) ' delete config DelCount = DelCount + 1 ' Inc del counter LabelConfigsDeleted = \"Processing: \" + Str(DelCount) + \" configurations.\" FormDeleteConfigs.Repaint End If ' active config Next ' Get next config Configuration.Name = \"Default\" ' Set config to Configuration.AlternateName = \"Default\" ' \"Default\" & Configuration.UseAlternateNameInBOM = 0 ' AlternateName DelCount = (DelCount + 1) - ModelDoc2.GetConfigurationCount() LabelConfigsDeleted = \"Done: \" + Str(DelCount) + \" configurations deleted.\" CheckDeleteConfigs.Enabled = False CheckKeepConfig.Enabled = False CommandDelete.Enabled = False CommandCancel.Caption = \"Close\" End Sub Private Sub UserForm_Initialize() ProcessCheck CheckDeleteConfigs.Caption = \"Delete up to \" + Str(ModelDoc2.GetConfigurationCount()) _ + \" configurations from this model.\" Set Configuration = ModelDoc2.GetActiveConfiguration CheckKeepConfig.Caption = \"Keep configuration: '\" + Configuration.Name + \"'\" LabelConfigsDeleted = \"\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/DeleteRedundantFeatures.html": {
    "href": "src/DeleteRedundantFeatures.html",
    "title": "Delete Features with No Children Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Delete Features with No Children Macro for SolidWorks Description This macro identifies and allows users to delete features with no children (redundant features) in a SolidWorks model. The macro supports features like planes, coordinate systems, axes, sketches, and more. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part document must be open in SolidWorks. The macro works only on features that have no dependencies. Results Note A user interface lists redundant features. Users can select features to delete directly from the interface. Steps to Setup the Macro 1. Create the Form in the VBA Editor: Open the VBA editor in SolidWorks by pressing (Alt + F11). In the VBA editor, go to Insert > UserForm to create a new form. Add the following elements to the form: ListBox: Name: ListBox1 Positioned to display feature names. Command Buttons: Delete Button: Name: CommandButton1 Caption: Delete Cancel Button: Name: CommandButton2 Caption: Cancel Adjust the form’s caption to Delete features with no children. Save the macro project. 2: Run the Macro Open a part document in SolidWorks. Run the macro. The form will display all redundant features. Select the features you want to delete and click Delete. VBA Macro Code DeleteRedundantFeatures Module ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare global variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swFeat As SldWorks.Feature ' Feature object Dim swPart As SldWorks.PartDoc ' Part document object Dim sFeatName() As String ' Array to store feature names ' Populate the dialog box with features Sub populate() ReDim sFeatName(0) ' Initialize the feature name array Dialog.ListBox1.Clear ' Clear existing items in the ListBox ' Get the first feature in the model Set swFeat = swModel.FirstFeature ' Traverse through all features in the model Do While Not swFeat Is Nothing FeatureHasChildren swFeat ' Check if the feature has children and process it Set swFeat = swFeat.GetNextFeature ' Move to the next feature Loop End Sub ' Check if a feature has children and add it to the ListBox if applicable Sub FeatureHasChildren(feature As SldWorks.Feature) Dim childArray As Variant Dim featType As String childArray = feature.GetChildren ' Get child features ' Skip features with children If Not IsEmpty(childArray) Then Exit Sub featType = \"\" ' Initialize feature type ' Map feature type names to human-readable labels If feature.GetTypeName = \"RefPlane\" Then featType = \"Plane\" If feature.GetTypeName = \"CoordSys\" Then featType = \"CSYS\" If feature.GetTypeName = \"RefAxis\" Then featType = \"Axis\" If feature.GetTypeName = \"ProfileFeature\" Then featType = \"Sketch\" If feature.GetTypeName = \"3DProfileFeature\" Then featType = \"3D Sketch\" If feature.GetTypeName = \"RefPoint\" Then featType = \"Point\" ' Add feature to the ListBox and array if it matches one of the predefined types If Not featType = \"\" Then sFeatName(UBound(sFeatName)) = feature.Name ReDim Preserve sFeatName(UBound(sFeatName) + 1) ' Resize array to accommodate the next feature Dialog.ListBox1.AddItem feature.Name & \" (\" & featType & \")\" ' Add to ListBox Dialog.ListBox1.Selected(Dialog.ListBox1.ListCount - 1) = True ' Preselect in ListBox End If End Sub ' Delete selected features from the ListBox Sub DeleteFeatures() Set swPart = swModel ' Set the active document as the part object swModel.ClearSelection ' Clear any existing selection in the model Dim i As Integer Dim bRet As Boolean ' Iterate through the ListBox to find selected items For i = 0 To Dialog.ListBox1.ListCount - 1 If Dialog.ListBox1.Selected(i) = True Then ' Get the feature by name and delete it Set swFeat = swPart.FeatureByName(sFeatName(i)) If Not swFeat Is Nothing Then bRet = swFeat.Select2(True, 0) ' Select the feature bRet = swModel.DeleteSelection(False) ' Delete the selected feature End If End If Next populate ' Refresh the ListBox End Sub ' Main entry point of the macro Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure a document is open If swModel Is Nothing Then MsgBox \"Model Player requires an active part\", vbCritical Exit Sub End If populate ' Populate the ListBox with features Dialog.Show ' Display the dialog box End Sub VBA UserForm Code Option Explicit Private Sub CommandButton1_Click() ' Execute the DeleteFeatures subroutine DeleteRedundantFeatures.DeleteFeatures End Sub Private Sub CommandButton2_Click() ' Exit the macro Unload Me End End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/EditSketch.html": {
    "href": "src/EditSketch.html",
    "title": "Edit Sketch Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Edit Sketch Macro for SolidWorks Description This macro automates sketch editing within SolidWorks based on the active document and the selected entities. It adjusts the view to normal for an active sketch or exits the sketch if the view is already normal. The macro supports resolving selected subcomponents and digging into the sketch hierarchy for more complex features. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An active part or assembly document must be open in SolidWorks. A feature, face, edge, or sketch should be selected for proper operation. Results Note Edits the driving sketch of the selected feature or geometry and makes the view normal. Exits the active sketch if already in a normal view. Automatically resolves selected subcomponents if suppressed. Steps to Setup the Macro 1. Run the Macro: Execute the macro while a SolidWorks document is active. Ensure that the document type is supported (part or assembly) and appropriate entities are selected. 2. Behavior Based on Selection: If a feature or geometry is selected, the macro opens the driving sketch and adjusts the view. If no entities are selected, and the sketch is active, the macro adjusts the view to normal. If the view is already normal, the macro exits the sketch. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define a structure for storing view data Type ViewData ViewScale As Double ' Scale of the view Orientation As SldWorks.MathTransform ' Orientation transformation matrix Translation As SldWorks.MathVector ' Translation vector End Type ' Enum for comparison results between two views Enum CompareViewResult_e Same = 0 ' Views are identical DiffOrientation = 2 ^ 0 ' Different orientations difftranslation = 2 ^ 1 ' Different translations diffscale = 2 ^ 2 ' Different scales End Enum ' Debugging constants and tolerance Const Bug As Boolean = False ' Debug output flag Const Tol As Integer = 2 ' Tolerance for comparisons Sub main() On Error Resume Next Dim swApp As SldWorks.SldWorks Dim swDoc As SldWorks.ModelDoc2 Dim SelMgr As SldWorks.SelectionMgr Dim swFeat As SldWorks.Feature Dim swSelType As Long Dim StartView As ViewData Dim CurView As ViewData Dim compRes As CompareViewResult_e ' Initialize SolidWorks objects Set swApp = Application.SldWorks Set swDoc = swApp.ActiveDoc Set SelMgr = swDoc.SelectionManager StartView = GetViewData(swDoc.ActiveView) ' Check if a sketch is active If Not swDoc.GetActiveSketch2 Is Nothing Then ' No selection: Align view \"normal to\" the sketch If SelMgr.GetSelectedObjectCount2(-1) < 1 Then swDoc.ShowNamedView2 \"*Normal To\", -1 CurView = GetViewData(swDoc.ActiveView) compRes = CompareViewData(StartView, CurView, Tol) If compRes = Same Then swDoc.SketchManager.InsertSketch True Exit Sub End If Else swDoc.SketchManager.InsertSketch True End If End If ' Resolve selected feature or entity swSelType = SelMgr.GetSelectedObjectType3(1, -1) Select Case swSelType Case swSelFACES, swSelEDGES Set swFeat = SelMgr.GetSelectedObject6(1, -1).GetFeature If swFeat Is Nothing Then Exit Sub Case swSelBODYFEATURES, swSelSKETCHES Set swFeat = SelMgr.GetSelectedObject6(1, -1) Case Else Exit Sub End Select ' Edit sketch or feature If swFeat.GetTypeName = \"ProfileFeature\" Then swDoc.EditSketchOrSingleSketchFeature Else swDoc.FeatEdit End If ' Align view to \"normal to\" if a sketch is active If Not swDoc.GetActiveSketch2 Is Nothing Then swDoc.ShowNamedView2 \"*Normal To\", -1 End If ' Clear selections swDoc.ClearSelection2 True End Sub ' Function to get view data (scale, orientation, translation) Private Function GetViewData(view As SldWorks.ModelView) As ViewData Dim data As ViewData Set data.Orientation = view.Orientation3 ' Get orientation matrix Set data.Translation = view.Translation3 ' Get translation vector data.ViewScale = view.Scale2 ' Get view scale GetViewData = data End Function ' Function to compare two sets of view data Private Function CompareViewData(firstViewData As ViewData, secondViewData As ViewData, Tol As Integer) As CompareViewResult_e Dim res As CompareViewResult_e res = Same ' Compare orientation If Not CompareArrays(firstViewData.Orientation.ArrayData, secondViewData.Orientation.ArrayData, Tol) Then res = res + DiffOrientation End If ' Compare translation If Not CompareArrays(firstViewData.Translation.ArrayData, secondViewData.Translation.ArrayData, Tol) Then res = res + difftranslation End If ' Compare scale If Not TolerantEqual(firstViewData.ViewScale, secondViewData.ViewScale, Tol) Then res = res + diffscale End If CompareViewData = res End Function ' Function to compare arrays with tolerance Private Function CompareArrays(firstArr As Variant, secondArr As Variant, Tol As Integer) As Boolean If UBound(firstArr) = UBound(secondArr) Then Dim i As Integer For i = 0 To UBound(firstArr) If Not TolerantEqual(firstArr(i), secondArr(i), Tol) Then CompareArrays = False Exit Function End If Next CompareArrays = True Else CompareArrays = False End If End Function ' Function to compare two numbers with tolerance Private Function TolerantEqual(a As Variant, b As Variant, Tol As Integer) As Boolean TolerantEqual = Abs(a - b) <= Abs(a / 10 ^ Tol) ' Compare within tolerance End Function Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Explode_Collapse.html": {
    "href": "src/Explode_Collapse.html",
    "title": "Exploded View Toggle Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Exploded View Toggle Macro for SolidWorks Description This macro automates the process of toggling the exploded view state of an active assembly in SolidWorks. It checks if an exploded view exists and then either explodes or collapses it based on its current state. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly should have at least one exploded view configured. Results Note Toggles the state of the first exploded view found in the active configuration of the assembly. Either explodes or collapses the assembly view depending on its initial state. Steps to Setup the Macro Create the VBA Module: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project. Run the Macro: Ensure that an assembly with an exploded view is open. Execute the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your macro file. Using the Macro: The macro checks for the presence of an exploded view and changes its state. No user interaction is required apart from initiating the macro. VBA Macro Code Main Subroutine ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' Declare variables for SolidWorks objects and operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' ModelDocExtension object Dim swAssembly As SldWorks.AssemblyDoc ' Assembly document object Dim swConfigMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConfig As SldWorks.Configuration ' Active configuration object Dim activeConfigName As String ' Name of the active configuration Dim viewNames As Variant ' Array of exploded view names Dim viewName As String ' Individual exploded view name Dim i As Long ' Loop counter Dim xViewCount As Long ' Number of exploded views in the configuration Dim boolstatus As Boolean ' Boolean for operation success ' Main subroutine Sub main() ' Initialize the SolidWorks application and active document objects Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly If (swModel.GetType <> swDocASSEMBLY) Then Exit Sub ' Cast the active document as an assembly Set swAssembly = swModel ' Get the active configuration name Set swConfigMgr = swModel.ConfigurationManager Set swConfig = swConfigMgr.ActiveConfiguration activeConfigName = swConfig.Name ' Get the number of exploded views in the active configuration xViewCount = swAssembly.GetExplodedViewCount2(activeConfigName) If xViewCount < 1 Then End ' Exit if no exploded views exist ' Retrieve the names of the exploded views in the active configuration viewNames = swAssembly.GetExplodedViewNames2(activeConfigName) ' Select the first exploded view in the list boolstatus = swAssembly.Extension.SelectByID2(viewNames(0), \"EXPLODEDVIEWS\", 0, 0, 0, False, 0, Nothing, 0) If boolstatus = False Then End ' Exit if the selection fails ' Check if the assembly is currently exploded or collapsed boolstatus = swAssembly.IsExploded ' Toggle the explode/collapse state based on the current state If boolstatus = False Then swAssembly.ViewExplodeAssembly ' Explode the assembly Else swAssembly.ViewCollapseAssembly ' Collapse the assembly End If ' Clear the selection to finish the operation swAssembly.ClearSelection2 True ' Clean up references and end the macro Set swModel = Nothing Set swAssembly = Nothing End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportSketchToDxf2.html": {
    "href": "src/ExportSketchToDxf2.html",
    "title": "Export Custom-Named Sketches to DXF | SOLIDWORKS Macros Lib",
    "keywords": "Export Custom-Named Sketches to DXF Description This macro hides all the bodies and sketches in the active part, then looks at all features to identify custom-named sketches. For each custom-named sketch, the macro will unhide the sketch, view normal to its plane, insert the view into a new drawing, set the scale to 1:1, save the drawing as a DXF file, and then close the drawing. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. Sketches should be custom-named for the macro to process them individually. The macro assumes that a drawing template is available and accessible to create the new drawings. Results Note All bodies and sketches in the part are hidden. Custom-named sketches are displayed and exported as DXF files. Each sketch view is set to a 1:1 scale in the drawing before saving. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to process custom-named sketches and export as DXF ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim PART As SldWorks.PartDoc ' Part document object Dim swModel As SldWorks.ModelDoc2 ' Model document object for the part Dim featmgr As SldWorks.FeatureManager ' Feature manager object to access features Dim feat As Variant ' Individual feature object Dim feats As Variant ' Array of features in the part Dim selmgr As SldWorks.SelectionMgr ' Selection manager object Dim swbody As Variant ' Individual body object Dim bodies As Variant ' Array of bodies in the part Dim body As SldWorks.Body2 ' Body object in the part Dim LONGSTATUS As Long ' Long variable for capturing status Dim DRAW As SldWorks.DrawingDoc ' Drawing document object for new drawings Dim currentSheet As SldWorks.Sheet ' Current sheet object in the drawing Dim BOOLSTATUS As Boolean ' Boolean variable for operation results Dim myView As Object ' View object for creating drawing views Dim closedoc As ModelDoc2 ' Object to handle and close documents ' Initialize SolidWorks application and get the active part document Set swApp = Application.SldWorks Set PART = swApp.ActiveDoc Set swModel = swApp.ActiveDoc Set selmgr = swModel.SelectionManager Set featmgr = swModel.FeatureManager ' Hide all bodies in the active part bodies = PART.GetBodies2(swAllBodies, False) For Each swbody In bodies swbody.HideBody (True) Next ' Hide all sketches in the active part feats = featmgr.GetFeatures(False) For Each feat In feats If feat.GetTypeName = \"ProfileFeature\" Then feat.Select (False) ' Select the feature without adding to the current selection swModel.BlankSketch ' Hide the selected sketch End If Next ' Process each feature to identify and export custom-named sketches For Each feat In feats ' Check if the feature is a sketch and if it is custom-named (not containing \"Sketch\" in its name) If feat.GetTypeName = \"ProfileFeature\" And InStr(feat.Name, \"Sketch\") < 1 Then ' Unhide the custom-named sketch feat.Select (False) swModel.UnblankSketch ' Orient the view to be normal to the sketch plane feat.Select (False) swModel.Extension.RunCommand swCommands_NormalTo, \"\" ' Create a new drawing document for the sketch view Set DRAW = swApp.NewDocument(swApp.GetUserPreferenceStringValue(swUserPreferenceStringValue_e.swDefaultTemplateDrawing), 2, 0.2794, 0.4318) ' Insert the current sketch view into the drawing Set myView = DRAW.CreateDrawViewFromModelView3(swModel.GetPathName, \"Current Model View\", 0, 0, 0) ' Set the scale of the drawing view to 1:1 Set currentSheet = DRAW.GetCurrentSheet BOOLSTATUS = currentSheet.SetScale(1, 1, True, False) ' Save the drawing as a DXF file in the same folder as the part Set closedoc = DRAW LONGSTATUS = closedoc.SaveAs3(Left(swModel.GetPathName, Len(swModel.GetPathName) - 7 - Len(GetTitle(swModel.GetPathName))) & GetTitle(swModel.GetPathName) & \" \" & feat.Name & \".DXF\", 0, 0) ' Close the drawing document after saving swApp.CloseDoc (closedoc.GetTitle) ' Hide the sketch again after exporting feat.Select (False) swModel.BlankSketch End If Next End Sub ' -------------------------------------------------------------------------- ' Function to extract the title (filename without extension) from the path ' -------------------------------------------------------------------------- Public Function GetTitle(Path As String) As String ' Declare necessary variables Dim path1 As Variant ' Array to hold path segments Dim title As String ' Extracted title (filename without extension) ' Split the path into segments based on \"\\\" path1 = Split(Path, \"\\\") ' Get the last segment of the path as the filename title = path1(UBound(path1)) ' Return the title without the file extension GetTitle = Left(title, InStr(title, \".\") - 1) End Function Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportToParasolid.html": {
    "href": "src/ExportToParasolid.html",
    "title": "Traverse Assembly and Save Parts as Parasolid (X_T) | SOLIDWORKS Macros Lib",
    "keywords": "Traverse Assembly and Save Parts as Parasolid (X_T) Description This macro traverses the active assembly and saves all child components (parts) as Parasolid files (X_T format) in the specified folder. It recursively traverses through the assembly hierarchy, ensuring that all parts are saved with their respective names. This macro simplifies the process of saving parts in an assembly by automatically exporting them to the desired location. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. A folder path must be provided where the Parasolid files will be saved. Results Note All parts within the active assembly are saved as Parasolid (X_T) files. The files will be saved in the specified folder with the same names as the parts. The macro will skip any parts that are already open or in a suppressed state. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and prompt the user for a save path ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (assembly) Dim savepath As String ' User input for the folder path to save Parasolid files ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Prompt user for the folder path to save Parasolid files savepath = InputBox(\"Where do you want to save the Parasolid (X_T) files?\") ' Call the traverse function to iterate through components and save as Parasolid files traverse swApp.ActiveDoc, savepath End Sub ' -------------------------------------------------------------------------- ' Recursive function to traverse through the assembly components and save parts ' -------------------------------------------------------------------------- Function traverse(Pathname As ModelDoc2, savepath As String) ' Declare necessary variables and objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Model document object for components Dim swConfMgr As SldWorks.ConfigurationManager ' Configuration manager object Dim swConf As SldWorks.Configuration ' Configuration object for the active configuration Dim swRootComp As SldWorks.Component2 ' Root component of the assembly Dim vChildComp As Variant ' Array of child components in the assembly Dim swChildComp As SldWorks.Component2 ' Individual child component object Dim i As Long ' Loop counter for iterating through child components Dim longstatus As Long ' Status variable for capturing save operations ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = Pathname ' Set the model to the input pathname (active document) ' Get the configuration manager and active configuration of the model Set swConfMgr = swModel.ConfigurationManager Set swConf = swConfMgr.ActiveConfiguration ' Get the root component of the assembly Set swRootComp = swConf.GetRootComponent3(True) ' Get the child components of the root component vChildComp = swRootComp.GetChildren ' Loop through each child component in the assembly For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) ' Set the child component ' Get the model document of the child component Set swModel = swChildComp.GetModelDoc2 ' If the child component is a part, traverse further or save as Parasolid (X_T) If Not swModel Is Nothing Then ' Check if the component is an assembly (type 2 = swDocASSEMBLY) If swModel.GetType = 2 Then ' Recursively traverse through sub-assemblies traverse swModel, savepath Else ' Save the part as a Parasolid (X_T) file in the specified folder longstatus = swModel.SaveAs3(savepath & \"\\\" & swModel.GetTitle & \".X_T\", 0, 0) End If End If Next i End Function ' -------------------------------------------------------------------------- ' Function to extract the title (filename without extension) from the path ' -------------------------------------------------------------------------- Public Function GetTitle(Path As String) As String ' Declare necessary variables Dim path1 As Variant ' Array to hold path segments Dim title As String ' Extracted title (filename without extension) ' Split the path into segments based on \"\\\" path1 = Split(Path, \"\\\") ' Get the last segment of the path as the filename title = path1(UBound(path1)) ' Return the title without the file extension GetTitle = Left(title, InStr(title, \".\") - 1) End Function Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ExportToParasolid2.html": {
    "href": "src/ExportToParasolid2.html",
    "title": "Save All Parts of an Assembly as Parasolid Files | SOLIDWORKS Macros Lib",
    "keywords": "Save All Parts of an Assembly as Parasolid Files Description This macro opens all parts of the currently active assembly and saves each part as a Parasolid file. It simplifies the process of exporting parts from an assembly by automatically saving them in the desired format. The macro should be used when the active document is an assembly, and it will save the parts in the specified location. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly. All parts must be resolved (not in a suppressed or hidden state) to ensure successful export. The destination folder path must be valid and writable. Results Note All parts within the active assembly will be saved as Parasolid files in the specified folder. The files will be named according to the original part names and saved in the Parasolid (.X_T) format. A message box will be displayed if the document is not an assembly or if there is any issue during saving. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to initialize the process and save parts as Parasolid files ' -------------------------------------------------------------------------- Sub main() ' Declare necessary SolidWorks objects Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (assembly) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim longstatus As Long, longwarnings As Long ' Long variables for capturing status and warnings ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the currently active document (assembly) Set Part = swApp.ActiveDoc ' Check if there is an active document open If Part Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If Part.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Save the assembly as a Parasolid file (change the path as needed) ' Note: Replace the path with a dynamic path or prompt for user input if required longstatus = Part.SaveAs3(\"C:\\Users\\pnovorolsky\\Music\\Para TEst\\1014016.X_T\", 0, 0) ' Check if the save operation was successful If longstatus = 0 Then MsgBox \"Parasolid file saved successfully.\", vbInformation, \"Save Successful\" Else MsgBox \"Failed to save the Parasolid file. Please check the file path or permissions.\", vbExclamation, \"Save Failed\" End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/File Copy (with blank property values).html": {
    "href": "src/File Copy (with blank property values).html",
    "title": "Custom Properties and Save As Macro | SOLIDWORKS Macros Lib",
    "keywords": "Custom Properties and Save As Macro Description This macro automates the process of managing custom properties and saving a SolidWorks model with a new file name in a user-specified folder. It is particularly useful for standardizing and organizing files with consistent metadata and locations. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A SolidWorks model document must be open. The macro requires the user to input a new file name and select a target folder for saving the file. Results Note Existing custom properties (drawing number, old drawing number, search description, and material) are removed and replaced with new ones. The document is saved with the specified file name in the chosen folder. Steps to Setup the Macro 1. Run the Macro: The macro will prompt you to input a new file name. After entering the name, you will be asked to select a target folder using a folder browser dialog. The macro will then save the document with the specified name and add predefined custom properties. 2. Custom Property Management: You can edit the custom properties added by modifying the relevant lines in the macro code. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare SolidWorks application and model variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim retval As String Dim FileName As String Dim Path As String Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure a document is active If swModel Is Nothing Then MsgBox \"No active document found. Please open a SolidWorks file and try again.\", vbCritical, \"Error\" Exit Sub End If ' Remove existing custom properties retval = swModel.DeleteCustomInfo2(\"\", \"drawing number\") retval = swModel.DeleteCustomInfo2(\"\", \"old drawing number\") retval = swModel.DeleteCustomInfo2(\"\", \"search description\") retval = swModel.DeleteCustomInfo2(\"\", \"material\") ' Add new custom properties with default values retval = swModel.AddCustomInfo3(\"\", \"drawing number\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"old drawing number\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"search description\", swCustomInfoText, \"\") retval = swModel.AddCustomInfo3(\"\", \"material\", swCustomInfoText, \"\"\"SW-Material\"\"\") ' Prompt user for a new file name FileName = InputBox(\"Enter the new file name\", \"Add New File Name\", FileName) If FileName = \"\" Then MsgBox \"File name cannot be empty. Please try again.\", vbExclamation, \"Error\" Exit Sub End If ' Prompt user for folder selection Path = BrowseFolder(\"Select a Folder/Path\") If Path = \"\" Then MsgBox \"You must select a valid folder to save the file.\", vbExclamation, \"Error\" Exit Sub End If ' Ensure the folder path ends with a backslash If Right(Path, 1) <> \"\\\" Then Path = Path & \"\\\" ' Save the file with the new name in the selected folder swModel.Extension.SaveAs Path & FileName & \".prt\", swSaveAsVersion_e.swSaveAsCurrentVersion, swSaveAsOptions_e.swSaveAsOptions_Copy, Nothing, 0, 0 ' Notify the user of successful save MsgBox \"File saved successfully at: \" & Path & FileName & \".prt\", vbInformation, \"Save Successful\" End Sub ' Function to open a folder browser dialog Function BrowseFolder(Optional Title As String) As String Dim SH As Object Dim F As Object ' Create Shell Application object Set SH = CreateObject(\"Shell.Application\") ' Open the folder browser dialog Set F = SH.BrowseForFolder(0, Title, 0) If Not F Is Nothing Then BrowseFolder = F.Items.Item.Path ' Get selected folder path Else BrowseFolder = \"\" ' Return empty if no folder selected End If End Function Folder Browser Module Code Option Explicit Private Const BIF_RETURNONLYFSDIRS As Long = &H1 Private Const MAX_PATH As Long = 260 ' Windows API declarations Declare Function SHGetPathFromIDListA Lib \"shell32.dll\" ( _ ByVal pidl As Long, _ ByVal pszBuffer As String) As Long Declare Function SHBrowseForFolderA Lib \"shell32.dll\" ( _ lpBrowseInfo As BrowseInfo) As Long ' Structure for folder browsing dialog Type BrowseInfo hOwner As Long pidlRoot As Long pszDisplayName As String lpszINSTRUCTIONS As String ulFlags As Long lpfn As Long lParam As Long iImage As Long End Type ' Function to display a folder selection dialog Function BrowseFolder(Optional Caption As String = \"Select a Folder\") As String Dim BrowseInfo As BrowseInfo Dim FolderName As String Dim ID As Long Dim Res As Long ' Initialize the BrowseInfo structure With BrowseInfo .hOwner = 0 .pidlRoot = 0 .pszDisplayName = String$(MAX_PATH, vbNullChar) .lpszINSTRUCTIONS = Caption .ulFlags = BIF_RETURNONLYFSDIRS End With ' Prepare a buffer for the folder path FolderName = String$(MAX_PATH, vbNullChar) ' Display the folder selection dialog ID = SHBrowseForFolderA(BrowseInfo) If ID Then ' Convert the PIDL to a file system path Res = SHGetPathFromIDListA(ID, FolderName) If Res Then BrowseFolder = Left$(FolderName, InStr(FolderName, vbNullChar) - 1) Else BrowseFolder = \"\" End If Else BrowseFolder = \"\" End If End Function Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FormatLine.html": {
    "href": "src/FormatLine.html",
    "title": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing | SOLIDWORKS Macros Lib",
    "keywords": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing Description This macro applies custom line properties (color and width) to selected edges in a SolidWorks drawing. It helps users visually differentiate specific edges or lines in a drawing by changing their appearance based on the specified properties. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must select at least one edge in the drawing before running the macro. Results Note The selected edge(s) will have their line width and color updated based on the specified properties. A confirmation message will be shown if the operation is successful, or an error message if there are any issues. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare SolidWorks application object and initialize it Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks ' Get the currently active document Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Check if there is an active document If Not swModel Is Nothing Then ' Check if the active document is a drawing If swModel.GetType = swDocDRAWING Then ' Declare drawing document object and selection manager object Dim swDraw As SldWorks.DrawingDoc Set swDraw = swModel Dim swSelMgr As SldWorks.SelectionMgr Set swSelMgr = swModel.SelectionManager ' Check if any edge is selected in the drawing If swSelMgr.GetSelectedObjectCount2(-1) > 0 Then ' Specify custom line properties Dim edgeWidth As Double Dim edgeColor As Integer edgeWidth = 0.0007 ' Line width in meters (e.g., 0.0007m = 0.7mm) edgeColor = 255 ' Color in RGB (e.g., 255 = Red) ' Apply custom line width and color to the selected edge(s) swDraw.SetLineWidthCustom (edgeWidth) swDraw.SetLineColor edgeColor ' Notify the user of successful application MsgBox \"Line width and color applied successfully to the selected edge(s).\", vbInformation, \"Success\" Else ' Error message if no edge is selected MsgBox \"Please select at least one edge in the drawing to apply the properties.\", vbExclamation, \"No Edge Selected\" End If Else ' Error message if the active document is not a drawing MsgBox \"The active document is not a drawing. Please open a drawing and select an edge.\", vbExclamation, \"Invalid Document Type\" End If Else ' Error message if no document is open MsgBox \"No active document found. Please open a drawing and select an edge.\", vbExclamation, \"No Active Document\" End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/FormatLineAutomatically.html": {
    "href": "src/FormatLineAutomatically.html",
    "title": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing | SOLIDWORKS Macros Lib",
    "keywords": "Apply Custom Line Width and Color to Selected Edge in SolidWorks Drawing Description This macro applies custom line properties (color and width) to selected edges in a SolidWorks drawing. It helps users visually differentiate specific edges or lines in a drawing by changing their appearance based on the specified properties. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The user must select at least one edge in the drawing before running the macro. Results Note The selected edge(s) will have their line width and color updated based on the specified properties. A confirmation message will be shown if the operation is successful, or an error message if there are any issues. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare SolidWorks application object and initialize it Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks ' Get the currently active document Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Check if there is an active document If Not swModel Is Nothing Then ' Check if the active document is a drawing If swModel.GetType = swDocDRAWING Then ' Declare drawing document object and selection manager object Dim swDraw As SldWorks.DrawingDoc Set swDraw = swModel Dim swSelMgr As SldWorks.SelectionMgr Set swSelMgr = swModel.SelectionManager ' Check if any edge is selected in the drawing If swSelMgr.GetSelectedObjectCount2(-1) > 0 Then ' Specify custom line properties Dim edgeWidth As Double Dim edgeColor As Integer edgeWidth = 0.0007 ' Line width in meters (e.g., 0.0007m = 0.7mm) edgeColor = 255 ' Color in RGB (e.g., 255 = Red) ' Apply custom line width and color to the selected edge(s) swDraw.SetLineWidthCustom (edgeWidth) swDraw.SetLineColor edgeColor ' Notify the user of successful application MsgBox \"Line width and color applied successfully to the selected edge(s).\", vbInformation, \"Success\" Else ' Error message if no edge is selected MsgBox \"Please select at least one edge in the drawing to apply the properties.\", vbExclamation, \"No Edge Selected\" End If Else ' Error message if the active document is not a drawing MsgBox \"The active document is not a drawing. Please open a drawing and select an edge.\", vbExclamation, \"Invalid Document Type\" End If Else ' Error message if no document is open MsgBox \"No active document found. Please open a drawing and select an edge.\", vbExclamation, \"No Active Document\" End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/HideAllSketchesInAssy.html": {
    "href": "src/HideAllSketchesInAssy.html",
    "title": "Hide All Sketches Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Hide All Sketches Macro for SolidWorks Description This macro hides all visible sketches in the active assembly. This is useful for cleaning up the view in complex assemblies where multiple sketches may clutter the workspace. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. At least one part within the assembly should have a sketch that is set to show. Results Note All visible sketches in the assembly will be hidden. Steps to Setup the Macro 1. Open the Assembly: Ensure that the assembly document you wish to clean up is open in SolidWorks. 2. Load and Execute the Macro: Load the macro into SolidWorks using the VBA editor (Alt + F11). Execute the macro from within SolidWorks by navigating to Tools > Macro > Run. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ********************************************************* ' Hide All Sketches.swp ' Description: Macro to hide all sketches in the active assembly. ' ********************************************************* Option Explicit ' Subroutine to hide a sketch feature Sub BlankSketchFeature(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swFeat As SldWorks.Feature) Dim bRet As Boolean ' Check if the feature is a sketch If \"ProfileFeature\" = swFeat.GetTypeName Then ' Select the sketch and hide it bRet = swFeat.Select2(False, 0): Debug.Assert bRet swModel.BlankSketch End If End Sub ' Subroutine to traverse features and their subfeatures Sub TraverseFeatureFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swFeat As SldWorks.Feature, nLevel As Long) Dim swSubFeat As SldWorks.Feature Dim swSubSubFeat As SldWorks.Feature Dim swSubSubSubFeat As SldWorks.Feature Dim sPadStr As String Dim i As Long Dim bRet As Boolean ' Create padding for debug output based on the level of recursion For i = 0 To nLevel sPadStr = sPadStr + \" \" Next i ' Traverse through all features While Not swFeat Is Nothing Debug.Print sPadStr + swFeat.Name + \" [\" + swFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swFeat ' Traverse subfeatures Set swSubFeat = swFeat.GetFirstSubFeature While Not swSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubFeat.Name + \" [\" + swSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubFeat ' Traverse sub-subfeatures Set swSubSubFeat = swSubFeat.GetFirstSubFeature While Not swSubSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubSubFeat.Name + \" [\" + swSubSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubSubFeat ' Traverse sub-sub-subfeatures Set swSubSubSubFeat = swSubSubFeat.GetFirstSubFeature While Not swSubSubSubFeat Is Nothing Debug.Print sPadStr + \" \" + swSubSubSubFeat.Name + \" [\" + swSubSubSubFeat.GetTypeName + \"]\" BlankSketchFeature swApp, swModel, swSubSubSubFeat Set swSubSubSubFeat = swSubSubSubFeat.GetNextSubFeature Wend Set swSubSubFeat = swSubSubFeat.GetNextSubFeature Wend Set swSubFeat = swSubFeat.GetNextSubFeature Wend Set swFeat = swFeat.GetNextFeature Wend End Sub ' Subroutine to traverse features of a component Sub TraverseComponentFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swComp As SldWorks.Component2, nLevel As Long) Dim swFeat As SldWorks.Feature Set swFeat = swComp.FirstFeature TraverseFeatureFeatures swApp, swModel, swFeat, nLevel End Sub ' Subroutine to traverse components and their features Sub TraverseComponent(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, swComp As SldWorks.Component2, nLevel As Long) Dim vChildComp As Variant Dim swChildComp As SldWorks.Component2 Dim sPadStr As String Dim i As Long ' Create padding for debug output based on the level of recursion For i = 0 To nLevel - 1 sPadStr = sPadStr + \" \" Next i ' Get child components and traverse them vChildComp = swComp.GetChildren For i = 0 To UBound(vChildComp) Set swChildComp = vChildComp(i) Debug.Print sPadStr & \"+\" & swChildComp.Name2 & \" <\" & swChildComp.ReferencedConfiguration & \">\" TraverseComponentFeatures swApp, swModel, swChildComp, nLevel TraverseComponent swApp, swModel, swChildComp, nLevel + 1 Next i End Sub ' Subroutine to traverse features in the main model Sub TraverseModelFeatures(swApp As SldWorks.SldWorks, swModel As SldWorks.ModelDoc2, nLevel As Long) Dim swFeat As SldWorks.Feature Set swFeat = swModel.FirstFeature TraverseFeatureFeatures swApp, swModel, swFeat, nLevel End Sub ' Main subroutine to execute the macro Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swConf As SldWorks.Configuration Dim swRootComp As SldWorks.Component2 Dim nStart As Single ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc If swModel Is Nothing Then MsgBox \"No active document found. Please open an assembly.\", vbExclamation, \"Error\" Exit Sub End If Set swConf = swModel.GetActiveConfiguration Set swRootComp = swConf.GetRootComponent ' Start timing the process nStart = Timer Debug.Print \"File = \" & swModel.GetPathName ' Traverse and hide all sketches in the model TraverseModelFeatures swApp, swModel, 1 TraverseComponent swApp, swModel, swRootComp, 1 ' Output elapsed time Debug.Print \"Time = \" & Timer - nStart & \" s\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/IGES.html": {
    "href": "src/IGES.html",
    "title": "Export Active Document as IGES File | SOLIDWORKS Macros Lib",
    "keywords": "Export Active Document as IGES File Description This macro exports the active SolidWorks document (part or assembly) as an IGES file (.igs) to the same directory where the original file is saved. The exported IGES file will have the same name as the active document but with the .igs extension. This macro is useful for quickly saving parts and assemblies in IGES format for compatibility with other CAD software. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro does not work for drawing files. Ensure the document is saved before running the macro, as the file will be exported in the same directory. Results Note The macro will save the active document as an .igs file in the same directory. A message box will appear confirming the location of the saved file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim Part As ModelDoc2 Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Exit if no document is active If Part Is Nothing Then Exit Sub ' Get the path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing (since IGES export is not supported for drawings) If Part.GetType = swDocDRAWING Then Exit Sub End If ' Prepare the path for the IGES file by replacing the extension Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) Path = Replace(Path, Extension, \".igs\") Extension = \".igs\" ' Export the file as IGES longstatus = Part.SaveAs3(Path, 0, 0) ' Notify the user about the saved file location MsgBox \"Saved \" & Path, vbInformation End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ISOViews.html": {
    "href": "src/ISOViews.html",
    "title": "Create ISO Views Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Create ISO Views Macro for SolidWorks Description This macro generates eight custom named ISO views in an active SolidWorks document, providing various orientations based on the front, right, back, and left perspectives from both top and bottom angles. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An active SolidWorks document must be open. The document should preferably be a 3D model where ISO views will provide meaningful perspectives. Results Note Eight custom ISO views are created: Top-front-right (TRF-ISO), Top-right-rear (TRR-ISO), Top-left-rear (TLR-ISO), Top-left-front (TLF-ISO), Bottom-right-front (BRF-ISO), Bottom-right-rear (BRR-ISO), Bottom-left-rear (BLR-ISO), and Bottom-left-front (BLF-ISO). Previous ISO views with these names are deleted before new views are created to ensure there are no duplicates. Steps to Setup the Macro Open the Document: Ensure that a 3D model document is open in SolidWorks where ISO views can be meaningfully generated. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code. Run the macro directly from the VBA editor or within SolidWorks under Tools > Macro > Run. Using the Macro: The macro will automatically delete any existing named views that match the intended output to prevent duplicates. New ISO views will be created and saved under custom names for quick access. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ********************************************************* ' Description: ' This macro creates a series of isometric views and saves them as named views in the active SolidWorks document. ' ********************************************************* Sub main() ' Declare SolidWorks application and document variables Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim boolstatus As Boolean ' Boolean to capture status (not used in this macro) Dim longstatus As Long ' Long status for operations (not used in this macro) Dim Annotation As Object ' Annotation object placeholder (not used here) Dim Gtol As Object ' Geometric tolerance object placeholder (not used here) Dim DatumTag As Object ' Datum tag object placeholder (not used here) Dim FeatureData As Object ' Feature data placeholder (not used here) Dim Feature As Object ' Feature object placeholder (not used here) Dim Component As Object ' Component object placeholder (not used here) ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Check if a document is open If Part Is Nothing Then MsgBox \"No active document found. Please open a model.\", vbExclamation, \"Error\" Exit Sub End If ' Define mathematical constants and view transformations pi = 4 * Atn(1) ' Value of π (pi) Z = Tan(30 * pi / 180) ' Tangent of 30 degrees X = Atn(Z / Sqr(-Z * Z + 1)) ' Rotation angle in radians for X-axis Y = -45 * pi / 180 ' Rotation angle in radians for Y-axis ' Delete previously saved ISO views to ensure clean state Part.DeleteNamedView (\"TRF-ISO\") Part.DeleteNamedView (\"TRR-ISO\") Part.DeleteNamedView (\"TLF-ISO\") Part.DeleteNamedView (\"TLR-ISO\") Part.DeleteNamedView (\"BRF-ISO\") Part.DeleteNamedView (\"BRR-ISO\") Part.DeleteNamedView (\"BLF-ISO\") Part.DeleteNamedView (\"BLR-ISO\") ' Create and save named views for different ISO perspectives ' Top Right Front ISO View Part.ShowNamedView2 \"*Front\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TRF-ISO\") ' Top Right Rear ISO View Part.ShowNamedView2 \"*Right\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TRR-ISO\") ' Top Left Rear ISO View Part.ShowNamedView2 \"*Back\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TLR-ISO\") ' Top Left Front ISO View Part.ShowNamedView2 \"*Left\", -1 Part.ActiveView().RotateAboutCenter X, Y Part.ViewZoomtofit Part.NameView (\"TLF-ISO\") ' Bottom Right Front ISO View Part.ShowNamedView2 \"*Front\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BRF-ISO\") ' Bottom Right Rear ISO View Part.ShowNamedView2 \"*Right\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BRR-ISO\") ' Bottom Left Rear ISO View Part.ShowNamedView2 \"*Back\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BLR-ISO\") ' Bottom Left Front ISO View Part.ShowNamedView2 \"*Left\", -1 Part.ActiveView().RotateAboutCenter -X, Y Part.ViewZoomtofit Part.NameView (\"BLF-ISO\") ' Clean up objects Set Part = Nothing Set swApp = Nothing End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/InsertBlock.html": {
    "href": "src/InsertBlock.html",
    "title": "Programmatically Insert a Block into SolidWorks Drawing | SOLIDWORKS Macros Lib",
    "keywords": "Programmatically Insert a Block into SolidWorks Drawing Description A one-line function call to programmatically insert a block into the active SolidWorks drawing. This macro returns the SketchBlockInstance for the inserted block, enabling users to efficiently place and manage sketch blocks within a drawing. It is particularly useful for automating the placement of standardized blocks, reducing repetitive tasks. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing file. The block file to be inserted must exist in the specified path. Results Note The block will be inserted at the specified X and Y coordinates. The macro returns a SketchBlockInstance object for the inserted block. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks ' Main subroutine to insert a block and print block attributes Sub main() Dim part As ModelDoc2 Dim swBlkInst As SketchBlockInstance Dim boolstatus As Boolean ' Initialize SolidWorks application Set swApp = Application.SldWorks Set part = swApp.ActiveDoc ' Insert the block at specified location with optional scale and rotation Set swBlkInst = Insert_Block(part, \"C:\\temp\\myblock.SLDBLK\", 0.254, 0.254) ' Display block attributes in the Immediate window Debug.Print \"Number of attributes: \" & swBlkInst.GetAttributeCount Debug.Print \"Scale: \" & swBlkInst.Scale Debug.Print \"Name: \" & swBlkInst.Name ' Set an attribute value for the inserted block boolstatus = swBlkInst.SetAttributeValue(\"ItemNo\", \"Value\") End Sub ' Function to insert a block into the active document Function Insert_Block(ByVal rModel As ModelDoc2, ByVal blkName As String, ByVal Xpt As Double, ByVal Ypt As Double, _ Optional ByVal sAngle As Double = 0, Optional ByVal sScale As Double = 1) As Object Dim swBlockDef As SketchBlockDefinition Dim swBlockInst As SketchBlockInstance Dim swMathPoint As MathPoint Dim vBlockInst As Variant Dim swMathUtil As MathUtility Set swMathUtil = swApp.GetMathUtility ' Prepare coordinates for block insertion Dim pt(2) As Double pt(0) = Xpt pt(1) = Ypt pt(2) = 0 ' Turn off grid and entity snapping to facilitate block insertion rModel.SetAddToDB True ' Check if the block definition already exists in the drawing Set swBlockDef = GetBlockDefination(Mid(blkName, InStrRev(blkName, \"\\\") + 1), rModel) Set swMathPoint = swMathUtil.CreatePoint(pt) ' Insert the block if definition is found, otherwise create a new one If Not swBlockDef Is Nothing Then Set swBlockInst = rModel.SketchManager.InsertSketchBlockInstance(swBlockDef, swMathPoint, sScale, sAngle) Else Set swBlockDef = rModel.SketchManager.MakeSketchBlockFromFile(swMathPoint, blkName, False, sScale, sAngle) vBlockInst = swBlockDef.GetInstances Set swBlockInst = vBlockInst(0) End If ' Restore grid and entity snapping rModel.SetAddToDB False ' Redraw graphics to reflect the changes rModel.GraphicsRedraw2 Set Insert_Block = swBlockInst End Function ' Function to get the block definition if it already exists in the drawing Function GetBlockDefination(ByVal blkName As String, ByVal rModel As ModelDoc2) As Object Dim swBlockDef As Object Dim vBlockDef As Variant Dim i As Integer ' Check if there are existing block definitions in the drawing If rModel.SketchManager.GetSketchBlockDefinitionCount > 0 Then vBlockDef = rModel.SketchManager.GetSketchBlockDefinitions If UBound(vBlockDef) >= 0 Then ' Loop through existing definitions to find the matching one For i = 0 To UBound(vBlockDef) Set swBlockDef = vBlockDef(i) If UCase(Mid(swBlockDef.FileName, InStrRev(swBlockDef.FileName, \"\\\") + 1)) = UCase(blkName) Then Set GetBlockDefination = swBlockDef Exit Function End If Next i End If End If ' Return nothing if no matching block definition is found Set GetBlockDefination = Nothing End Function Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/InsertPartIntoNewPart.html": {
    "href": "src/InsertPartIntoNewPart.html",
    "title": "Insert Part into a New Part Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Insert Part into a New Part Macro for SolidWorks Description This macro creates a new part document in SolidWorks and inserts the currently active part into it. It also copies the material properties from the original part to the new part. This is particularly useful for creating derived parts with similar material properties but potentially different geometries or features. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A part document must be currently active in SolidWorks. Results Note A new part document is created. The active part is inserted into the new part document. Material properties are copied from the original part to the new part. Steps to Setup the Macro 1. Open the Part Document: Ensure that the part document you want to replicate into a new part is currently active in SolidWorks. 2. Load and Execute the Macro: Load the macro into SolidWorks using the VBA editor (Alt + F11). Execute the macro from within SolidWorks by navigating to Tools > Macro > Run. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' ****************************************************************************** ' Insert Part into a New Part ' Description: This macro inserts the currently active SolidWorks part into a new part, ' copies the material properties, and adjusts the view. ' ****************************************************************************** Option Explicit ' Global variables for SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim Part, Parent As Object ' Objects for new part and parent part Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Status and warnings for operations Dim Parent_FullPathName As String ' Full path of the parent part Dim EmptyStr As String ' Placeholder for empty strings Dim myFeature As Object ' Feature object for inserting the part Dim sMatName As String ' Material name of the parent part Dim sMatDB As String ' Material database path Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks Set Parent = swApp.ActiveDoc ' Get the currently active document ' Precondition: Exit quietly if the active document is not a part If (Parent.GetType <> swDocPART) Then Exit Sub ' Get the full path name of the parent part Parent_FullPathName = Parent.GetPathName ' Get the short name (title) of the parent part and remove the file extension if present Dim ParentName As String ParentName = Parent.GetTitle If InStr(1, ParentName, \".\") Then ParentName = Left$(ParentName, InStr(1, ParentName, \".\") - 1) End If ' Get the material name and database path of the parent part sMatName = Parent.GetMaterialPropertyName2(\"\", sMatDB) ' Create a new part Set Part = swApp.NewPart ' Insert the parent part into the new part Set myFeature = Part.InsertPart2(Parent_FullPathName, 1) Part.ClearSelection2 True ' Clear any selections in the new part ' Set the view to isometric and fit the window Part.ShowNamedView2 \"*Isometric\", 7 Part.ViewZoomtofit2 ' Copy material from the parent part to the new part Part.SetMaterialPropertyName \"SOLIDWORKS Materials.sldmat\", sMatName ' Clean up references to objects Set Parent = Nothing Set Part = Nothing End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Isolate.html": {
    "href": "src/Isolate.html",
    "title": "Isolate Selected Components in an Assembly | SOLIDWORKS Macros Lib",
    "keywords": "Isolate Selected Components in an Assembly Description Pre-select one or more components in an assembly and execute the macro. The selected components will become isolated in the assembly. This macro can be placed on the Graphics Area menu (which pops up when you right-click a component) for convenient access, making it ideal for users who frequently isolate components. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note One or more components must be pre-selected in an active assembly. The active document must be an assembly file. Results Note The selected components will be isolated in the assembly. A message box will be displayed if no components are selected or if the active document is not an assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to isolate selected components in an assembly Sub main() ' Declare SolidWorks application and active document objects Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (assembly) Dim boolstatus As Boolean ' Boolean status to capture operation results Dim longstatus As Long, longwarnings As Long ' Long variables for capturing status and warnings ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Check if there is an active document open If Part Is Nothing Then MsgBox \"No active document found. Please open an assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is an assembly If Part.GetType <> swDocASSEMBLY Then MsgBox \"This macro only works on assemblies. Please open an assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Isolate the pre-selected components in the assembly ' RunCommand with ID 2726 is used to isolate components in SolidWorks boolstatus = Part.Extension.RunCommand(2726, \"\") ' Note: The following command can be used to exit isolation mode if required: ' boolstatus = Part.Extension.RunCommand(2732, \"\") ' RunCommand ID 2732 exits isolate mode ' Clean up by releasing references to objects Set Part = Nothing Set swApp = Nothing End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/MeasureSketchAndAddLengthProperty.html": {
    "href": "src/MeasureSketchAndAddLengthProperty.html",
    "title": "Measure Sketch and Add Length Property | SOLIDWORKS Macros Lib",
    "keywords": "Measure Sketch and Add Length Property Description This macro measures the length of all the segments in the selected sketch of the active model file and adds the total length as a custom property with a value in inches or millimeters (up to 2 decimal places). The macro checks the model units and accordingly converts the total length into inches or mm based on the current unit system of the document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The desired sketch must be selected from the feature manager before running the macro. The active document must be a part or assembly. The sketch should not contain any construction geometry or text, as these are ignored in the length calculation. Results Note The macro calculates the total length of all the sketch segments in the selected sketch. A custom property named \"Total Length\" is added to the part or assembly with the length value in inches or mm, depending on the document units. A message box will be displayed if no sketch is selected or the active document is not a part or assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Public Enum swSkchSegments_e swSketchLINE = 0 swSketchARC = 1 swSketchELLIPSE = 2 swSketchSPLINE = 3 swSketchTEXT = 4 swSketchPARABOLA = 5 End Enum Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (part or assembly) Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swFeat As SldWorks.Feature ' Feature object for the selected sketch Dim swSketch As SldWorks.sketch ' Sketch object to store the selected sketch Dim swCustProp As CustomPropertyManager ' Custom property manager for adding properties to the model Dim swSkchSeg As SldWorks.SketchSegment ' Sketch segment object for each segment in the sketch Dim UserUnit As UserUnit ' User unit object to determine the document's unit system Dim i As Long ' Loop counter for iterating through sketch segments Dim bRet As Boolean ' Return status of custom property addition Dim vSkchSeg As Variant ' Array to hold the sketch segments in the selected sketch Dim nLength As Double ' Total length of the sketch segments ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently active If swModel Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a part or assembly (skip if it's a drawing) If swModel.GetType = 3 Then MsgBox \"This macro only works on parts or assemblies. Please open a part or assembly and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the user unit system (e.g., metric or imperial) Set UserUnit = swModel.GetUserUnit(swUserUnitsType_e.swLengthUnit) ' Get the selection manager object Set swSelMgr = swModel.SelectionManager ' Check if a sketch is selected in the feature manager If swSelMgr.GetSelectedObjectCount2(-1) > 0 And swSelMgr.GetSelectedObjectType3(1, -1) = swSelSKETCHES Then ' Get the selected sketch feature Set swFeat = swSelMgr.GetSelectedObject5(1) Set swSketch = swFeat.GetSpecificFeature2 ' Get all the sketch segments in the selected sketch vSkchSeg = swSketch.GetSketchSegments ' Loop through each segment in the sketch For i = 0 To UBound(vSkchSeg) Set swSkchSeg = vSkchSeg(i) ' Ignore construction lines and text segments If swSkchSeg.ConstructionGeometry = False Then If swSketchTEXT <> swSkchSeg.GetType Then ' Accumulate the length of valid sketch segments nLength = nLength + swSkchSeg.GetLength End If End If Next i ' Clear any selections in the document swModel.ClearSelection2 True ' Get the custom property manager object for the active document Set swCustProp = swModel.Extension.CustomPropertyManager(\"\") ' Add the total length as a custom property in inches or mm based on the unit system If UserUnit.IsMetric = False Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 39.3701, 2) & \" in\", 1) ' Add total length in inches ElseIf UserUnit.IsMetric Then bRet = swCustProp.Add3(\"Total Length\", 30, Round(nLength * 1000, 2) & \" mm\", 1) ' Add total length in mm End If Else ' Show error message if no sketch is selected MsgBox \"Please select a sketch from the feature manager and try again.\", vbExclamation, \"No Sketch Selected\" Exit Sub End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/OpenSelectedPart.html": {
    "href": "src/OpenSelectedPart.html",
    "title": "Open Selected Part Separately from Assembly in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Open Selected Part Separately from Assembly in SolidWorks Description This macro enables users to select a part in an assembly and open it in a separate window with a single command. The macro can be conveniently assigned to a keyboard shortcut (e.g., the 'O' key) for quick access, making it faster to edit parts without manually navigating through the assembly. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be an assembly with at least one part. A part in the assembly must be selected before running this macro. Results Note Opens the selected part in a new SolidWorks window. The main assembly remains open, allowing quick switching between the assembly and the part. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object Dim Part As Object Sub main() Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Attempt to open the selected component part Part.OpenCompFile End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/OpenTopLevelAssembly.html": {
    "href": "src/OpenTopLevelAssembly.html",
    "title": "Open and Activate Assembly Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Open and Activate Assembly Macro for SolidWorks Description This macro is designed to navigate through the assembly structure in SolidWorks to find the top-level assembly for a selected component and open it if it's not already active. If the selected component is a part, the macro will open its file directly. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The macro should be run within an open document in SolidWorks. A component must be selected within an assembly or part document before running the macro. Results The macro opens and activates the top-level assembly of the selected component. If the selected component is a part, that part document is opened directly. Steps to Setup the Macro Create the Module: Open the VBA editor in SolidWorks by pressing (Alt + F11). Navigate to the VBA project where you want to include the macro. Right-click on Modules and select Insert > Module. Paste the provided VBA code into the module. Run the Macro: Ensure a component within a sub-assembly is selected in the open document. Save the macro file (e.g., OpenSubAssembly.swp). Run the macro by navigating to Tools > Macro > Run in SolidWorks, then select your saved macro file. Using the Macro: The macro will automatically determine the sub-assembly that directly contains the selected component and open it. If the selected component is nested within multiple sub-assemblies, the macro opens the immediate parent assembly. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' SolidWorks application and document objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swmodel As SldWorks.ModelDoc2 ' Active document object Dim assemdoc As SldWorks.ModelDoc2 ' Assembly document object Dim swselmgr As SldWorks.SelectionMgr ' Selection manager object Dim selcomp As SldWorks.Component2 ' Selected component object Dim swent As SldWorks.Entity ' Entity object representing selected geometry Dim parcomp As SldWorks.Component2 ' Parent component in the hierarchy Dim tempcomp As SldWorks.Component2 ' Temporary component for parent traversal Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set swmodel = swApp.ActiveDoc ' Get the selection manager for the active document Set swselmgr = swmodel.SelectionManager ' Get the first selected object as an entity Set swent = swselmgr.GetSelectedObject(1) ' Retrieve the component associated with the selected entity Set selcomp = swent.GetComponent ' Get the parent component of the selected component Set tempcomp = selcomp.GetParent ' Check if the selected component has no parent (it is a standalone part) If tempcomp Is Nothing Then ' Open the document associated with the selected component Set swmodel = swApp.OpenDoc(selcomp.GetPathName, 2) ' Open as a part document ' Activate the document to display it in the SolidWorks interface Set swmodel = swApp.ActivateDoc(selcomp.Name) Exit Sub End If ' Initialize parent component as the immediate parent Set parcomp = tempcomp ' Traverse the hierarchy to find the topmost parent component Do While Not tempcomp Is Nothing ' Get the parent of the current component Set tempcomp = tempcomp.GetParent ' Update the parent component to the current one if valid If Not tempcomp Is Nothing Then Set parcomp = tempcomp End If Loop ' Get the assembly document associated with the topmost parent component Set assemdoc = parcomp.GetModelDoc2 ' Open the assembly document Set swmodel = swApp.OpenDoc(assemdoc.GetPathName, 2) ' Open as an assembly document ' Activate the assembly document to display it Set swmodel = swApp.ActivateDoc(assemdoc.GetTitle) End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ParallelMate.html": {
    "href": "src/ParallelMate.html",
    "title": "Mate Addition and Rebuild Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Mate Addition and Rebuild Macro for SolidWorks Description This macro automates the addition of a specific type of mate (e.g., coincident mate) to a selected component in an assembly document. After adding the mate, it forces a rebuild of the assembly to ensure that all changes take effect. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The component to which the mate is to be applied must be selected prior to running the macro. Results Note Adds a specified mate to the selected component. Forces a rebuild of the assembly to reflect the new mate addition. Clears any selections to tidy up the workspace post-operation. Steps to Setup the Macro Prepare the Assembly Document: Open the assembly document in SolidWorks. Select the component to which you want to apply the mate. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code into this module. Run the macro directly from the VBA editor or save and run it from within SolidWorks under Tools > Macro > Run. Using the Macro: The macro will automatically add the specified mate to the selected component. After execution, the assembly is rebuilt to apply the changes, and the selection is cleared. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to add a coincident mate to the selected component in an assembly Sub main() ' Declare and set SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Set swApp = Application.SldWorks Dim Part As SldWorks.ModelDoc2 ' Active document object Set Part = swApp.ActiveDoc ' Validate if a document is loaded If Part Is Nothing Then MsgBox \"No document is open.\", vbExclamation, \"Error\" Exit Sub ' Exit if no document is loaded End If ' Declare variables for operations Dim boolstatus As Boolean ' Status of the operation (not used directly here) Dim longstatus As Long ' Long status to capture errors or warnings Dim longwarnings As Long ' Long warnings (not used directly here) Dim Feature As Object ' Object for the newly added mate ' Add a coincident mate to the selected component ' Parameters: ' - Mate type: 3 (Coincident) ' - Alignment: 2 (Aligned) ' - Flip flag: False (No flipping) ' - Distance/Angle: All set to 0 for this mate type ' - Long status: Captures the success or failure of the mate addition Set Feature = Part.AddMate2(3, 2, False, 0, 0, 0, 1, 1, 0, 0, 0, longstatus) ' Check if the mate was successfully added If longstatus <> 0 Then MsgBox \"Failed to add mate. Status code: \" & longstatus, vbCritical, \"Error\" Exit Sub End If ' Force a rebuild to update the assembly with the new mate Part.ForceRebuild ' Clear any remaining selections to ensure a clean state Part.ClearSelection2 True ' Notify the user of successful operation MsgBox \"Coincident mate added successfully.\", vbInformation, \"Success\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ParentSelect.html": {
    "href": "src/ParentSelect.html",
    "title": "Parent Assembly Selector Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Parent Assembly Selector Macro for SolidWorks Description This macro selects the parent assembly of the currently selected assembly component in SolidWorks. It is particularly useful for navigating assembly hierarchies and understanding component relationships within complex assemblies. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open. At least one component must be selected within the assembly. Results Note The selection in the assembly will be replaced with its parent assembly component. Steps to Setup the Macro Create the VBA Modules: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module into your project and copy the provided macro code into this module. Run the Macro: Ensure that an assembly with selectable components is open. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro will automatically replace the last selected item with its parent assembly, making it the active selection. If the selected item has no parent assembly or is already a top-level component, no changes will be made to the selection. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). ' SolidWorks VBA macro to select the parent assembly of a selected component Option Explicit ' Main subroutine Sub main() ' Declare variables for SolidWorks objects and operations Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swSelMgr As SldWorks.SelectionMgr ' Selection manager object Dim swSelComp As SldWorks.Component2 ' Selected assembly component object Dim bRet As Boolean ' Boolean for operation success Dim i As Integer ' Loop counter (unused in this version) Dim CurSelCount As Long ' Number of selected objects Dim NewObjToSelect As Object ' Object to select (parent assembly) Dim DwgDocComp As DrawingComponent ' Drawing component object for drawings Dim OldToggleVal As Long ' Stores the previous toggle state of a user preference ' Initialize the SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is open If swModel Is Nothing Then Exit Sub ' Validate the document type (must be assembly or assembly drawing) If swModel.GetType = swDocPART Then Exit Sub ' Exit if the document is a part ElseIf swModel.GetType = swDocDRAWING Then ' Check if the drawing references a part document If swModel.ActiveDrawingView.ReferencedDocument.GetType = swDocPART Then Exit Sub ' Exit if the referenced document is a part End If End If ' Get the selection manager Set swSelMgr = swModel.SelectionManager ' Get the number of selected objects CurSelCount = swSelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Nothing was selected\" Exit Sub End If ' Get the selected object (component or drawing component) If swModel.GetType = swDocDRAWING Then ' For drawings, retrieve the component associated with the drawing view Set DwgDocComp = swSelMgr.GetSelectedObjectsComponent2(CurSelCount) Set swSelComp = DwgDocComp.Component Else ' For assemblies, get the selected assembly component Set swSelComp = swSelMgr.GetSelectedObjectsComponent(CurSelCount) End If ' Get the parent assembly of the selected component Set NewObjToSelect = swSelComp.GetParent If Not NewObjToSelect Is Nothing Then ' Deselect the current selection swSelMgr.DeSelect CurSelCount If swModel.GetType = swDocDRAWING Then ' For drawings, adjust selection to the drawing context Set NewObjToSelect = NewObjToSelect.GetDrawingComponent(swSelMgr.GetSelectedObject6(swSelMgr.GetSelectedObjectCount2(-1), -1)) swModel.ClearSelection2 True ' Temporarily disable the property manager auto-show preference OldToggleVal = swApp.GetUserPreferenceToggle(swAutoShowPropertyManager) swApp.SetUserPreferenceToggle swAutoShowPropertyManager, False ' Select the new object (parent assembly) bRet = NewObjToSelect.Select(True, Nothing) ' Restore the original preference toggle value swApp.SetUserPreferenceToggle swAutoShowPropertyManager, OldToggleVal Else ' For assemblies, directly select the parent assembly bRet = NewObjToSelect.Select(True) End If End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Referenced_File.html": {
    "href": "src/Rebuild_Referenced_File.html",
    "title": "Rebuild Referenced Models in All Drawing Sheets | SOLIDWORKS Macros Lib",
    "keywords": "Rebuild Referenced Models in All Drawing Sheets Description This macro rebuilds all referenced models for each sheet in an active SOLIDWORKS drawing document.It validates the active document, iterates through all sheets, and for each sheet, rebuilds the models referenced by the views. After rebuilding, it closes the models to free up memory. System Requirements SOLIDWORKS Version: SOLIDWORKS 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SOLIDWORKS must be installed and running on the machine. An active drawing with multiple sheets and views is open. Post-Conditions Note The referenced files will be opened, rebuilt, and closed. The original drawing views will update. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDrawModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swView As SldWorks.View Dim swSheet As SldWorks.Sheet Dim vSheetNameArr As Variant Dim vSheetName As Variant Dim bRet As Boolean Dim sFileName As String Dim nErrors As Long Sub main() ' Initialize SOLIDWORKS application object Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a drawing document is active If swModel Is Nothing Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Verify the document is a drawing If swModel.GetType <> SwConst.swDocDRAWING Then swApp.SendMsgToUser2 \"A drawing document must be open and the active document.\", swMbWarning, swMbOk Exit Sub End If ' Cast the active document as a drawing Set swDraw = swModel ' Get the current sheet and sheet names Set swSheet = swDraw.GetCurrentSheet vSheetNameArr = swDraw.GetSheetNames ' Loop through each sheet For Each vSheetName In vSheetNameArr ' Activate each sheet bRet = swDraw.ActivateSheet(vSheetName) Set swView = swDraw.GetFirstView Set swView = swView.GetNextView ' Skip the sheet's overall view ' Loop through all views in the sheet Do While Not swView Is Nothing ' Get the referenced model for the view Set swDrawModel = swView.ReferencedDocument sFileName = swDrawModel.GetPathName ' Open and rebuild the referenced model Set swDrawModel = swApp.ActivateDoc3(sFileName, True, swRebuildActiveDoc, nErrors) ' Rebuild the referenced model swDrawModel.EditRebuild3 ' Close the referenced model after rebuild swApp.CloseDoc swDrawModel.GetTitle ' Move to the next view Set swView = swView.GetNextView Loop Next vSheetName ' Notify the user that the rebuild is complete MsgBox \"Rebuild is done.\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html": {
    "href": "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | SOLIDWORKS Macros Lib",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Post-Conditions Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Reload_All_Sheet_Formats.html": {
    "href": "src/Reload_All_Sheet_Formats.html",
    "title": "Reloading Sheet Formats in Drawing Documents | SOLIDWORKS Macros Lib",
    "keywords": "Reloading Sheet Formats in Drawing Documents Description This macro automates the process of reloading sheet formats across all sheets in a SolidWorks drawing document. It iterates through each sheet, temporarily removes the current format, and then reloads the original template. The macro ensures that all drawing sheets are updated with their default formats and concludes by rebuilding and saving the document, improving efficiency in drawing maintenance and formatting updates. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Post-Conditions Note The macro will first remove the existing sheet format and then reload the previous format from the specified location for each sheet. Note: This may remove all content contained within the old/existing format. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() Dim swApp As SldWorks.SldWorks Dim swModel As SldWorks.ModelDoc2 Dim swDraw As SldWorks.DrawingDoc Dim swSheet As SldWorks.Sheet Dim vSheetProps As Variant Dim vSheetName As Variant Dim vTemplateName As Variant Dim longstatus As Long Dim longwarnings As Long Dim nErrors As Long Dim nWarnings As Long Dim i As Long ' Initialize SolidWorks application Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if an active drawing is open If swModel Is Nothing Then MsgBox \"There is no active drawing document.\" Exit Sub End If ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"Open a drawing first and then try again!\" Exit Sub End If Set swDraw = swModel vSheetName = swDraw.GetSheetNames ' Traverse and update each sheet in the drawing For i = 0 To UBound(vSheetName) swDraw.ActivateSheet vSheetName(i) Set swSheet = swDraw.GetCurrentSheet ' Retrieve sheet properties and format template vTemplateName = swSheet.GetTemplateName vSheetProps = swSheet.GetProperties ' Remove the current sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateNone, _ vSheetProps(2), vSheetProps(3), False, \"\", _ vSheetProps(5), vSheetProps(6), \"Default\", True ' Reload the original sheet format swModel.SetupSheet5 swSheet.GetName, swDwgPapersUserDefined, swDwgTemplateCustom, _ vSheetProps(2), vSheetProps(3), False, vTemplateName, _ vSheetProps(5), vSheetProps(6), \"Default\", True swDraw.ViewZoomtofit2 Next i ' Activate the first sheet and force rebuild swDraw.ActivateSheet vSheetName(0) swDraw.ForceRebuild3 False ' Save the drawing swDraw.Save3 1, nErrors, nWarnings ' Clean up Set swDraw = Nothing Set swModel = Nothing Set swApp = Nothing MsgBox \"Sheet format reloaded!\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Return_A_Axis_to_HOME1.html": {
    "href": "src/Return_A_Axis_to_HOME1.html",
    "title": "Mate Toggling Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Mate Toggling Macro for SolidWorks Description This macro toggles the suppression state of a specified mate named \"Angle 0 Deg\" in a SolidWorks document. It first unsuppresses the mate if it is suppressed, then suppresses it again. This can be useful for automating the testing of assembly constraints. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The macro is run within an open SolidWorks assembly that contains a mate named \"Angle 0 Deg.\" Results The mate \"Angle 0 Deg\" is toggled between suppressed and unsuppressed states. The assembly view is maximized before the operations (optional and can be enabled by uncommenting certain code lines). Steps to Setup the Macro Open SolidWorks: Ensure SolidWorks is open and an assembly with the specified mate is active. Access VBA Editor: Press (Alt + F11) to open the VBA editor in SolidWorks. Create a New Macro: Insert a new module and paste the provided VBA code. Run the Macro: Run the macro directly from the VBA editor or save it and run it from the SolidWorks Macro toolbar. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare variables for the SolidWorks application and active document Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object (part or assembly) Dim boolstatus As Boolean ' Boolean to capture operation success Dim longstatus As Long, longwarnings As Long ' Longs to capture detailed operation statuses Sub main() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the currently active document Set Part = swApp.ActiveDoc ' Optional: Declare and set the active model view Dim myModelView As Object ' Object for controlling the model view Set myModelView = Part.ActiveView ' Optional: Maximize the SolidWorks window (uncomment to enable functionality) ' myModelView.FrameState = swWindowState_e.swWindowMaximized ' Step 1: Select the mate named \"Angle 0 Deg\" boolstatus = Part.Extension.SelectByID2(\"Angle 0 Deg\", \"MATE\", 0, 0, 0, False, 0, Nothing, 0) ' Step 2: Unsuppress the selected mate to activate it Part.EditUnsuppress2 ' Step 3: Clear the current selection to reset the environment Part.ClearSelection2 True ' Step 4: Re-select the mate named \"Angle 0 Deg\" boolstatus = Part.Extension.SelectByID2(\"Angle 0 Deg\", \"MATE\", 0, 0, 0, False, 0, Nothing, 0) ' Step 5: Suppress the selected mate to deactivate it Part.EditSuppress2 ' Step 6: Clear the selection again to clean up the selection state Part.ClearSelection2 True End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save Assy As Part (Exterior Components).html": {
    "href": "src/Save Assy As Part (Exterior Components).html",
    "title": "Save Assembly as Part (Exterior Components) Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Save Assembly as Part (Exterior Components) Macro for SolidWorks Description This macro converts an active SolidWorks assembly into a part file that contains only the exterior components. This feature is useful for reducing the complexity of the assembly when sharing with external stakeholders or for performance improvements in visualization and analysis. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document (.SLDASM) must be actively open in SolidWorks. The assembly should include at least one part to be processed. Results Note The macro saves the active assembly as a new part (.SLDPRT) file that includes only the exterior components. The new part file is saved in the same directory as the original assembly with the same base file name followed by \"SLDPRT\". Steps to Setup the Macro Prepare SolidWorks: Open SolidWorks with the target assembly document loaded. Ensure that the assembly contains at least one part component. Configure and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and copy the provided macro code into this module. Run the macro from within SolidWorks by navigating to Tools > Macro > Run, then select your saved macro file. Using the Macro: The macro will automatically save the active document as a new part file with only the exterior components. The original assembly remains unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' SolidWorks application and document variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active SolidWorks document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Extension object for advanced file operations Dim FilePath As String ' Full file path of the current document Dim PathSize As Long ' Length of the file path Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' File path for the new part file Dim nErrors As Long ' Counter for errors during the save operation Dim nWarnings As Long ' Counter for warnings during the save operation ' Main subroutine Sub main() ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is open If swModel Is Nothing Then MsgBox \"No active document found. Please open a file.\" Exit Sub End If ' Get the ModelDocExtension object for advanced operations Set swModelDocExt = swModel.Extension ' Extract the file path and prepare the new file path FilePath = swModel.GetPathName ' Get the full file path of the active document PathSize = Strings.Len(FilePath) ' Get the length of the file path PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Remove the last 6 characters (e.g., \".SLDASM\") NewFilePath = PathNoExtension & \"SLDPRT\" ' Append \"SLDPRT\" to create the new file path ' Set options to save only the exterior components swApp.SetUserPreferenceIntegerValue swSaveAssemblyAsPartOptions, swSaveAsmAsPart_ExteriorComponents ' Save the assembly as a new part file swModelDocExt.SaveAs NewFilePath, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Nothing, nErrors, nWarnings ' Check for errors and warnings during the save operation If nErrors = 0 And nWarnings = 0 Then ' Success: Notify the user that the save operation was successful MsgBox \"Assembly saved as part file successfully at: \" & NewFilePath Else ' Failure: Notify the user about errors and warnings MsgBox \"Failed to save assembly as part file. Errors: \" & nErrors & \", Warnings: \" & nWarnings End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save Drawing To Pdf Automatically.html": {
    "href": "src/Save Drawing To Pdf Automatically.html",
    "title": "Save Drawing as PDF in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Save Drawing as PDF in SolidWorks Description This macro instantly saves the active part or assembly drawing as a PDF file. The PDF document is saved in the same folder as the drawing with the same name. This macro works best when assigned to a keyboard shortcut, making it easy to quickly export drawings to PDF format without manually navigating through the menus. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a saved drawing file. The drawing should have at least one sheet. Ensure the drawing is open and active before running the macro. Results Note All sheets of the active drawing are exported as a single PDF file. The PDF is saved in the same location as the drawing file with the same name. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Model document extension object Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Status of export operation Dim filename As String ' Filename of the PDF to be saved Dim lErrors As Long ' Variable to capture errors during save Dim lWarnings As Long ' Variable to capture warnings during save ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently open in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a drawing and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works with drawing files. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the extension object of the active drawing document Set swModelDocExt = swModel.Extension ' Initialize the PDF export data object Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved If filename = \"\" Then MsgBox \"The drawing must be saved before exporting to PDF. Please save the drawing and try again.\", vbCritical, \"Save Required\" Exit Sub End If ' Modify the file path to save as PDF (replace extension with .PDF) filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the drawing boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF using the specified filename and export data boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the export was successful and display appropriate message If boolstatus Then MsgBox \"Drawing successfully saved as PDF:\" & vbNewLine & filename, vbInformation, \"Export Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Export Failed\" End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveAssyAsPart(All Parts).html": {
    "href": "src/SaveAssyAsPart(All Parts).html",
    "title": "Save Assembly as Part (All Components) Macro | SOLIDWORKS Macros Lib",
    "keywords": "Save Assembly as Part (All Components) Macro Description This macro automates the process of saving a SolidWorks assembly as a single part file that includes all components. It is particularly useful for simplifying assemblies for external use or reducing file size. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly document must be open in SolidWorks. The assembly must contain at least one part. Results Note The assembly will be saved as a single part file with all components included. Steps to Setup the Macro 1. Prepare the Assembly: Open the desired assembly in SolidWorks. 2. Run the Macro: Execute the macro. The assembly will be saved as a part file with all components included. The new file will be created in the same directory as the original assembly with the .SLDPRT extension. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Declare SolidWorks objects and variables Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Extension object for model operations Dim FilePath As String ' Full file path of the active document Dim PathSize As Long ' Length of the file path string Dim PathNoExtension As String ' File path without extension Dim NewFilePath As String ' Path for the new part file Dim nErrors As Long ' Variable to store errors during save operation Dim nWarnings As Long ' Variable to store warnings during save operation ' Main subroutine to perform the save operation Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc Set swModelDocExt = swModel.Extension ' Get the full path of the active assembly file FilePath = swModel.GetPathName PathSize = Strings.Len(FilePath) ' Remove the extension from the file path to prepare for the new part file PathNoExtension = Strings.Left(FilePath, PathSize - 6) ' Create the new file path with \".SLDPRT\" extension NewFilePath = PathNoExtension & \"SLDPRT\" ' Set the user preference to save the assembly as a part with all components included swApp.SetUserPreferenceIntegerValue swSaveAssemblyAsPartOptions, swSaveAsmAsPart_AllComponents ' Save the assembly as a part file swModelDocExt.SaveAs NewFilePath, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Nothing, nErrors, nWarnings ' Provide feedback to the user If nErrors = 0 And nWarnings = 0 Then MsgBox \"Assembly successfully saved as part: \" & NewFilePath, vbInformation, \"Success\" Else MsgBox \"Save operation completed with errors or warnings.\" & vbCrLf & _ \"Errors: \" & nErrors & vbCrLf & \"Warnings: \" & nWarnings, vbExclamation, \"Attention\" End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveConfigurationsAsSeparateStepFiles.html": {
    "href": "src/SaveConfigurationsAsSeparateStepFiles.html",
    "title": "Batch Export Configurations to STEP Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Batch Export Configurations to STEP Macro for SolidWorks Description This SolidWorks macro facilitates the batch export of each configuration within an active document to the STEP file format, specifically using the AP214 standard. It is especially useful for efficiently managing multiple configurations in projects where external compatibility is necessary. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note An assembly or part document with one or more configurations must be open. The macro should be executed within the SolidWorks environment. Results Note Each configuration of the active document is saved as a separate STEP file in a specified directory. The user is prompted to specify a file prefix and output directory to organize the exported files. A progress bar is displayed during the export process, providing feedback on the operation's progress. Steps to Setup the Macro Open SolidWorks: Launch SolidWorks and open the document you wish to export configurations from. Load and Run the Macro: Open the SolidWorks VBA editor by pressing (Alt + F11). Insert a new module and paste the provided macro code. Run the macro from the VBA editor or save it and run it from Tools > Macro > Run. Using the Macro: Follow the prompts to specify the file prefix and output directory. Monitor the progress bar that appears to track the export process. Upon completion, a message will confirm the number of files saved. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Initialize SolidWorks application and document Dim swApp As SldWorks.SldWorks Set swApp = Application.SldWorks Dim swModel As SldWorks.ModelDoc2 Set swModel = swApp.ActiveDoc ' Verify an active document is open If swModel Is Nothing Then MsgBox \"No active document found. Please open a model.\", vbCritical, \"Error\" Exit Sub End If ' Declare configuration management objects Dim swConfigMgr As SldWorks.ConfigurationManager Set swConfigMgr = swModel.ConfigurationManager Dim swConfig As SldWorks.Configuration Set swConfig = swModel.GetActiveConfiguration ' Prepare file path and name variables Dim path As String, fname As String, current As String, prefix As String, dirName As String path = swModel.GetPathName fname = Mid(path, InStrRev(path, \"\\\") + 1, Len(path) - InStr(path, \".\") - 1) path = Left(path, InStrRev(path, \"\\\") - 1) current = swModel.GetActiveConfiguration.Name Dim configs As Variant configs = swModel.GetConfigurationNames ' User input for file prefix and output directory prefix = InputBox(\"Enter the prefix:\", \"Names\", fname) If prefix = \"\" Then MsgBox \"Prefix cannot be empty.\", vbCritical, \"Error\" Exit Sub End If dirName = InputBox(\"Enter the directory name for saving:\", \"Directory Name\", \"STEP\") If dirName = \"\" Then MsgBox \"Directory name cannot be empty.\", vbCritical, \"Error\" Exit Sub End If ' Ensure output directory exists If Dir(dirName, vbDirectory) = \"\" Then MkDir dirName ChDir dirName ' Progress bar setup and configuration iteration Dim i As Long For i = 0 To UBound(configs) Dim name As String name = prefix & configs(i) & \".STEP\" swModel.ShowConfiguration2 configs(i) Call swModel.SaveAs3(name, 0, 0) Next i ' Confirmation message and cleanup MsgBox \"Saved \" & CStr(i) & \" files!\", vbInformation, \"Done\" swModel.ShowConfiguration2 current ChDir path End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveDrawingAsPdf.html": {
    "href": "src/SaveDrawingAsPdf.html",
    "title": "Save Drawing as PDF Using Toolbar Button | SOLIDWORKS Macros Lib",
    "keywords": "Save Drawing as PDF Using Toolbar Button Description This macro saves the active drawing as a PDF file, exporting all the sheets of the drawing document into a single PDF. It is intended to be used in conjunction with a custom toolbar button, making it easy for users to quickly save the active drawing as a PDF with just one click. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing that has been saved. The drawing should not be read-only, and it should have a valid file path. The macro will not work for parts or assemblies. Results Note All sheets of the active drawing are exported to a PDF file. The PDF file is saved in the same location as the drawing, with the same name but with a .PDF extension. A message box will display the save status, indicating whether the operation was successful or failed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to save the active drawing as a PDF file ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (drawing) Dim swModelDocExt As SldWorks.ModelDocExtension ' Document extension object for saving operations Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Boolean status to capture operation results Dim filename As String ' String to hold the file path of the drawing Dim lErrors As Long ' Error variable for save operation Dim lWarnings As Long ' Warning variable for save operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No current document. Please open a drawing and try again.\", vbCritical, \"No Active Document\" End End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" End End If ' Get the document extension object for saving operations Set swModelDocExt = swModel.Extension ' Get the export PDF data object to specify PDF export options Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved previously (it must have a valid file path) If filename = \"\" Then MsgBox \"Please save the file first and try again.\", vbCritical, \"File Not Saved\" End End If ' Generate the PDF file path by changing the file extension to .PDF filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the PDF file boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF file using the specified filename and options boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the save operation was successful and display a message box If boolstatus Then MsgBox \"Save as PDF successful!\" & vbNewLine & filename, vbInformation, \"Save Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Save Failed\" End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveDrawingToPDF.html": {
    "href": "src/SaveDrawingToPDF.html",
    "title": "Save Drawing as PDF in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Save Drawing as PDF in SolidWorks Description This macro instantly saves the active part or assembly drawing as a PDF file. The PDF document is saved in the same folder as the drawing with the same name. This macro works best when assigned to a keyboard shortcut, making it easy to quickly export drawings to PDF format without manually navigating through the menus. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a saved drawing file. The drawing should have at least one sheet. Ensure the drawing is open and active before running the macro. Results Note All sheets of the active drawing are exported as a single PDF file. The PDF is saved in the same location as the drawing file with the same name. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object Dim swModelDocExt As SldWorks.ModelDocExtension ' Model document extension object Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Status of export operation Dim filename As String ' Filename of the PDF to be saved Dim lErrors As Long ' Variable to capture errors during save Dim lWarnings As Long ' Variable to capture warnings during save ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if a document is currently open in SolidWorks If swModel Is Nothing Then MsgBox \"No active document found. Please open a drawing and try again.\", vbCritical, \"No Active Document\" Exit Sub End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works with drawing files. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" Exit Sub End If ' Get the extension object of the active drawing document Set swModelDocExt = swModel.Extension ' Initialize the PDF export data object Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved If filename = \"\" Then MsgBox \"The drawing must be saved before exporting to PDF. Please save the drawing and try again.\", vbCritical, \"Save Required\" Exit Sub End If ' Modify the file path to save as PDF (replace extension with .PDF) filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the drawing boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF using the specified filename and export data boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the export was successful and display appropriate message If boolstatus Then MsgBox \"Drawing successfully saved as PDF:\" & vbNewLine & filename, vbInformation, \"Export Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Export Failed\" End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SaveSTEP.html": {
    "href": "src/SaveSTEP.html",
    "title": "Export Active Document as STEP File | SOLIDWORKS Macros Lib",
    "keywords": "Export Active Document as STEP File Description This macro exports the active SolidWorks document (part or assembly) as a STEP file to the same directory where the original file is saved. It automatically names the STEP file with the same name as the active document but with the .step extension. This macro is convenient for quickly exporting parts and assemblies as STEP files. You can also download an icon for the macro from this link to use when adding it as a toolbar button. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part or assembly. This macro does not work for drawing files. Ensure the document is saved before running the macro, as the file will be exported in the same directory. Results Note The macro will save the active document as a .step file in the same directory. A message box will appear confirming the location of the saved file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim Part As ModelDoc2 Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Exit if no document is active If Part Is Nothing Then Exit Sub ' Get the path of the active document Dim Path As String Path = Part.GetPathName ' Exit if the active document is a drawing (since STEP export is not supported for drawings) If Part.GetType = swDocDRAWING Then Exit Sub End If ' Prepare the path for the STEP file by replacing the extension Dim Extension As String Extension = Mid(Path, InStrRev(Path, \".\")) Path = Replace(Path, Extension, \".step\") Extension = \".step\" ' Export the file as STEP longstatus = Part.SaveAs3(Path, 0, 0) ' Notify the user about the saved file location MsgBox \"Saved \" & Path, vbInformation End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_Drawing_As_Pdf_2.html": {
    "href": "src/Save_Drawing_As_Pdf_2.html",
    "title": "Save Drawing as PDF Using Toolbar Button | SOLIDWORKS Macros Lib",
    "keywords": "Save Drawing as PDF Using Toolbar Button Description This macro saves the active drawing as a PDF file, exporting all the sheets of the drawing document into a single PDF. It is intended to be used in conjunction with a custom toolbar button, making it easy for users to quickly save the active drawing as a PDF with just one click. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing that has been saved. The drawing should not be read-only, and it should have a valid file path. The macro will not work for parts or assemblies. Results Note All sheets of the active drawing are exported to a PDF file. The PDF file is saved in the same location as the drawing, with the same name but with a .PDF extension. A message box will display the save status, indicating whether the operation was successful or failed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' -------------------------------------------------------------------------- ' Main subroutine to save the active drawing as a PDF file ' -------------------------------------------------------------------------- Sub main() ' Declare and initialize necessary SolidWorks objects Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swModel As SldWorks.ModelDoc2 ' Active document object (drawing) Dim swModelDocExt As SldWorks.ModelDocExtension ' Document extension object for saving operations Dim swExportData As SldWorks.ExportPdfData ' PDF export data object Dim boolstatus As Boolean ' Boolean status to capture operation results Dim filename As String ' String to hold the file path of the drawing Dim lErrors As Long ' Error variable for save operation Dim lWarnings As Long ' Warning variable for save operation ' Initialize SolidWorks application and get the active document Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Check if there is an active document open If swModel Is Nothing Then MsgBox \"No current document. Please open a drawing and try again.\", vbCritical, \"No Active Document\" End End If ' Check if the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings. Please open a drawing and try again.\", vbCritical, \"Invalid Document Type\" End End If ' Get the document extension object for saving operations Set swModelDocExt = swModel.Extension ' Get the export PDF data object to specify PDF export options Set swExportData = swApp.GetExportFileData(swExportPDFData) ' Get the file path of the active drawing filename = swModel.GetPathName ' Check if the drawing has been saved previously (it must have a valid file path) If filename = \"\" Then MsgBox \"Please save the file first and try again.\", vbCritical, \"File Not Saved\" End End If ' Generate the PDF file path by changing the file extension to .PDF filename = Strings.Left(filename, Len(filename) - 6) & \"PDF\" ' Set the export option to include all sheets in the PDF file boolstatus = swExportData.SetSheets(swExportData_ExportAllSheets, 1) ' Save the drawing as a PDF file using the specified filename and options boolstatus = swModelDocExt.SaveAs(filename, 0, 0, swExportData, lErrors, lWarnings) ' Check if the save operation was successful and display a message box If boolstatus Then MsgBox \"Save as PDF successful!\" & vbNewLine & filename, vbInformation, \"Save Successful\" Else MsgBox \"Save as PDF failed. Error code: \" & lErrors, vbExclamation, \"Save Failed\" End If End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_Each_Sheet_As_PDF.html": {
    "href": "src/Save_Each_Sheet_As_PDF.html",
    "title": "Export Sheets to PDF Automatically | SOLIDWORKS Macros Lib",
    "keywords": "Export Sheets to PDF Automatically Description This VBA macro automates the process of exporting all sheets in a SOLIDWORKS drawing to individual PDF files. The macro loops through all the sheets in the active drawing and exports each one as a PDFs into the folder that the drawing file is in. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Dim swApp As SldWorks.SldWorks Sub ExportSheetsToPDF() ' Set the SOLIDWORKS application object Set swApp = Application.SldWorks ' Check if SOLIDWORKS is running If swApp Is Nothing Then MsgBox \"Error Connecting to SOLIDWORKS. Please Try Again.\", vbCritical Exit Sub End If ' Set the active document object Dim swDoc As ModelDoc2 Set swDoc = swApp.ActiveDoc ' Check if the active document is valid If swDoc Is Nothing Then MsgBox \"Unable to Connect to a Valid SOLIDWORKS Drawing.\", vbCritical Exit Sub End If ' Ensure the active document is a drawing If swDoc.GetType <> SwConst.swDocumentTypes_e.swDocDRAWING Then MsgBox \"The active document is not a SOLIDWORKS drawing.\", vbCritical Exit Sub End If ' Set the drawing document object Dim swDwgDoc As DrawingDoc Set swDwgDoc = swDoc ' Set the PDF export data object Dim swExportPdfData As SldWorks.ExportPdfData Set swExportPdfData = swApp.GetExportFileData(SwConst.swExportDataFileType_e.swExportPdfData) ' Get the output directory from the drawing's path Dim outputPath As String outputPath = GetFolderFromPath(swDoc.GetPathName) ' Get the list of sheet names in the drawing Dim sheetNames As Variant sheetNames = swDwgDoc.GetSheetNames ' Set the current sheet object Dim swSheet As Sheet Set swSheet = swDwgDoc.GetCurrentSheet ' Generate the base output file name Dim outputFileName As String outputFileName = GetFileNameFromTitle(swDoc.GetTitle, swSheet.GetName) ' Initialize variables for error handling Dim lErrors As Long Dim lWarnings As Long Dim i As Integer Dim exportSuccess As Boolean ' Display the export status in the SOLIDWORKS status bar Dim statusBarPane As StatusBarPane Dim swFrame As SldWorks.Frame Set swFrame = swApp.Frame Set statusBarPane = swFrame.GetStatusBarPane statusBarPane.Visible = True ' Loop through each sheet and export to PDF For i = 0 To UBound(sheetNames) ' Update the status bar with the current sheet being exported statusBarPane.Text = \"Exporting sheet: \" & sheetNames(i) ' Set the current sheet for PDF export exportSuccess = swExportPdfData.SetSheets(SwConst.swExportDataSheetsToExport_e.swExportData_ExportSpecifiedSheets, sheetNames(i)) ' Check for errors in setting the sheet If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical Exit Sub End If ' Export the current sheet as PDF exportSuccess = swDoc.Extension.SaveAs(sheetNames(i) & \".pdf\", SwConst.swSaveAsVersion_e.swSaveAsCurrentVersion, _ SwConst.swSaveAsOptions_e.swSaveAsOptions_Silent, swExportPdfData, lErrors, lWarnings) ' Check for errors during the export If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical HandleErrors lErrors Exit Sub End If Next i End Sub ' Function to get the folder path from the full file path Private Function GetFolderFromPath(fullPath As String) As String GetFolderFromPath = Left(fullPath, InStrRev(fullPath, \"\\\")) End Function ' Function to get the file name without the sheet name Private Function GetFileNameFromTitle(fullTitle As String, sheetName As String) As String GetFileNameFromTitle = Left(fullTitle, InStrRev(fullTitle, sheetName) - 1) End Function ' Sub to handle errors based on error codes Private Sub HandleErrors(errorCode As Long) Select Case errorCode Case SwConst.swFileSaveError_e.swGenericSaveError MsgBox \"File Saving Error\", vbExclamation Case SwConst.swFileSaveError_e.swReadOnlySaveError MsgBox \"File Saving Error: Read-Only Rights\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameEmpty MsgBox \"File Saving Error: Empty Filename\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameContainsAtSign MsgBox \"File Saving Error: Invalid FileName Character\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveFormatNotAvailable MsgBox \"File Saving Error: Invalid File Format\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveAsNameExceedsMaxPathLength MsgBox \"File Saving Error: Filename Exceeds Maximum Path Length\", vbExclamation End Select End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_as_eDRAWING.html": {
    "href": "src/Save_as_eDRAWING.html",
    "title": "Save Part as eDrawings File (.eprt) Macro | SOLIDWORKS Macros Lib",
    "keywords": "Save Part as eDrawings File (.eprt) Macro Description This macro saves the active SolidWorks part as an eDrawings Part (.eprt) file in the same directory as the original part file. If a file with the same name already exists, the macro increments a counter to avoid overwriting, creating a unique file name as necessary. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file. Ensure that SolidWorks is open with a part file loaded before running this macro. Results Note The part will be saved as a .eprt file in the same directory as the original part file. If a file with the same name already exists, the macro will increment a counter to avoid overwriting the existing file. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swModel As SldWorks.ModelDoc2 Dim Dateiname As String Dim Error As Long Dim Warnung As Long Dim nRetval As Long Dim reurn_value As Boolean Dim OpenDoc As Object Dim ZählerInt As Integer Dim ZählerStr As String Dim fertig As Boolean Dim Pfad As String Dim Originalname As String Dim Speicherort As String Sub main() ' Initialize SolidWorks application and active document Set swApp = CreateObject(\"SldWorks.Application\") Set swModel = swApp.ActiveDoc Set OpenDoc = swApp.ActiveDoc() ' Set initial variables ZählerInt = 1 fertig = False Originalname = OpenDoc.GetTitle ' Start loop to check for existing files and increment file name if needed Do Speicherort = OpenDoc.GetPathName Name = OpenDoc.GetTitle Name = Left(Name, (Len(Name) - 7)) ' Remove file extension from original name ZählerStr = Str(ZählerInt) ZählerStr = Right(ZählerStr, (Len(ZählerStr) - 1)) Pfad = Name + \".eprt\" Speicherort = Left(Speicherort, Len(Speicherort) - Len(Originalname)) + Pfad Pfad = Dir(Speicherort, vbNormal) ' If no file exists with this name, exit loop If Pfad = \"\" Then fertig = True Else ZählerInt = ZählerInt + 1 ' Increment counter for file name End If Loop Until fertig = True ' Save the file as eDrawings Part (.eprt) return_value = swModel.SaveAs4(Speicherort, swSaveAsCurrentVersion, swSaveAsOptions_Silent, Error, Warnung) ' Display message if there was a problem saving the file If reurn_value = True Then nRetval = swApp.SendMsgToUser2(\"Problems saving file.\", swMbWarning, swMbOk) End If End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/SetLayersAndDrawLine.html": {
    "href": "src/SetLayersAndDrawLine.html",
    "title": "Set Layer & Draw Line in SolidWorks Drawing | SOLIDWORKS Macros Lib",
    "keywords": "Set Layer & Draw Line in SolidWorks Drawing Description This macro sets the specified layer as the current layer in the active SolidWorks drawing document and adds a sketched line on that layer. It automates the process of layer management and drawing creation, ensuring that all subsequent sketched entities are added to the specified layer. This is particularly useful for organizing different sketch entities in separate layers. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a drawing document. The specified layer (Grain) must already exist in the active drawing. Results Note The specified layer (Grain) will be set as the active layer. A new sketch line will be created on the specified layer at the given coordinates. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define necessary variables for SolidWorks application, drawing, and layer manager Dim swApp As Object ' Application object (SldWorks) Dim pDrawing As Object ' Active drawing document object Dim pLayerMgr As Object ' Layer manager object Dim pSketchSegment1 As Object ' Sketch segment object (line) Sub main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Get the active drawing document Set pDrawing = swApp.ActiveDoc ' Check if the active document is a drawing If pDrawing Is Nothing Then swApp.SendMsgToUser \"No active drawing document found. Please open a drawing and try again.\" Exit Sub End If ' Get LayerMgr object from the active drawing document Set pLayerMgr = pDrawing.GetLayerManager ' Check if LayerMgr was obtained successfully If pLayerMgr Is Nothing Then swApp.SendMsgToUser \"Failed to get Layer Manager. Make sure you are in a drawing document.\" Exit Sub End If ' Set \"Grain\" as the current layer Dim res As Boolean res = pLayerMgr.SetCurrentLayer(\"Grain\") ' Check if the layer activation was successful If res = False Then swApp.SendMsgToUser \"Error activating the layer 'Grain'. Please ensure the layer exists in the drawing.\" Exit Sub End If ' Enable adding objects to the database without displaying them pDrawing.SetAddToDB True ' Create a line sketch on the active layer Set pSketchSegment1 = pDrawing.CreateLine2(0.15, 0.25, 0, 0.45, 0.25, 0) ' Check if the line was created successfully If pSketchSegment1 Is Nothing Then swApp.SendMsgToUser \"Failed to create the sketch line. Please check the sketch coordinates.\" pDrawing.SetAddToDB False Exit Sub End If ' Disable adding objects to the database pDrawing.SetAddToDB False ' Clear all selections in the drawing pDrawing.ClearSelection ' Notify user of successful operation swApp.SendMsgToUser \"Layer set and line created successfully on the active layer.\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/ShowHideBodies.html": {
    "href": "src/ShowHideBodies.html",
    "title": "Show and Hide Solid Bodies in SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "Show and Hide Solid Bodies in SolidWorks Description This macro toggles the visibility of solid bodies in a SolidWorks model by selecting the \"Solid Bodies\" folder (named \"Corps volumiques\" in French) and using the HideBodies and ShowBodies methods. This macro is useful for quickly hiding and then showing all solid bodies in a part document. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a part file with solid bodies. The \"Solid Bodies\" folder must be named \"Corps volumiques\" (French localization) for the macro to work as-is. Results Note All solid bodies in the model are first hidden, then shown. The macro clears selections and selects the \"Solid Bodies\" folder as needed. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Main subroutine to toggle visibility of solid bodies Dim swApp As Object Dim Part As Object Dim boolstatus As Boolean Dim longstatus As Long, longwarnings As Long Sub main() ' Initialize the SolidWorks application object Set swApp = Application.SldWorks ' Get the active document (must be a part) Set Part = swApp.ActiveDoc ' Select the \"Solid Bodies\" folder (localized as \"Corps volumiques\") boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) ' Hide all solid bodies in the folder Part.FeatureManager.HideBodies ' Clear selection to reset Part.ClearSelection2 True ' Re-select the \"Solid Bodies\" folder to toggle visibility back boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) boolstatus = Part.Extension.SelectByID2(\"Corps volumiques\", \"BDYFOLDER\", 0, 0, 0, False, 0, Nothing, 0) ' Show all solid bodies in the folder Part.FeatureManager.ShowBodies End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Template.html": {
    "href": "src/Template.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | SOLIDWORKS Macros Lib",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Results Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/TessBox-EN-MM-INCH.html": {
    "href": "src/TessBox-EN-MM-INCH.html",
    "title": "Precise Bounding Box and Sketch Creation | SOLIDWORKS Macros Lib",
    "keywords": "Precise Bounding Box and Sketch Creation Description This macro computes precise bounding box values based on the part's geometry. Additionally, it can draw a 3D sketch representing the bounding box dimensions, allowing users to visualize the bounding box directly in the part. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note The active document must be a SolidWorks part file (*.sldprt). Results Note Calculates and displays the part's bounding box dimensions (length, width, height). Adds custom properties for bounding box dimensions. Creates a 3D sketch displaying the bounding box dimensions around the part. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks Sub Main() ' Get SOLIDWORKS application Set swApp = Application.SldWorks ' Get active part document Dim swDoc As SldWorks.partDoc Set swDoc = swApp.ActiveDoc If Not swDoc Is Nothing Then ' Get precise bounding box using extreme points Dim boundingBox As Variant boundingBox = GetBoundingBox(swDoc) ' Draw 3D sketch of bounding box CreateBoundingBoxSketch swDoc, boundingBox ' Calculate bounding box dimensions Dim boxWidth As Double Dim boxHeight As Double Dim boxDepth As Double boxWidth = CDbl(boundingBox(3)) - CDbl(boundingBox(0)) boxHeight = CDbl(boundingBox(4)) - CDbl(boundingBox(1)) boxDepth = CDbl(boundingBox(5)) - CDbl(boundingBox(2)) ' Update custom properties UpdateCustomProperties swDoc, boxWidth, boxHeight, boxDepth Else Debug.Print \"Error: No active part document.\" End If End Sub ' Function to Get Bounding Box Using Extreme Points Function GetBoundingBox(partDoc As SldWorks.partDoc) As Variant Dim boundingData(5) As Double Dim solidBodies As Variant solidBodies = partDoc.GetBodies2(swBodyType_e.swSolidBody, True) Dim minX As Double, minY As Double, minZ As Double Dim maxX As Double, maxY As Double, maxZ As Double If Not IsEmpty(solidBodies) Then Dim i As Integer For i = 0 To UBound(solidBodies) Dim bodyObj As SldWorks.Body2 Set bodyObj = solidBodies(i) Dim coordX As Double, coordY As Double, coordZ As Double ' Get extreme points bodyObj.GetExtremePoint 1, 0, 0, coordX, coordY, coordZ: If i = 0 Or coordX > maxX Then maxX = coordX bodyObj.GetExtremePoint -1, 0, 0, coordX, coordY, coordZ: If i = 0 Or coordX < minX Then minX = coordX bodyObj.GetExtremePoint 0, 1, 0, coordX, coordY, coordZ: If i = 0 Or coordY > maxY Then maxY = coordY bodyObj.GetExtremePoint 0, -1, 0, coordX, coordY, coordZ: If i = 0 Or coordY < minY Then minY = coordY bodyObj.GetExtremePoint 0, 0, 1, coordX, coordY, coordZ: If i = 0 Or coordZ > maxZ Then maxZ = coordZ bodyObj.GetExtremePoint 0, 0, -1, coordX, coordY, coordZ: If i = 0 Or coordZ < minZ Then minZ = coordZ Next End If ' Store bounding box coordinates boundingData(0) = minX: boundingData(1) = minY: boundingData(2) = minZ boundingData(3) = maxX: boundingData(4) = maxY: boundingData(5) = maxZ GetBoundingBox = boundingData End Function ' Subroutine to Draw 3D Sketch Bounding Box Sub CreateBoundingBoxSketch(modelDoc As SldWorks.ModelDoc2, boundingBox As Variant) Dim sketchMgr As SldWorks.SketchManager Dim minX As Double, minY As Double, minZ As Double Dim maxX As Double, maxY As Double, maxZ As Double ' Extract bounding box coordinates minX = CDbl(boundingBox(0)): minY = CDbl(boundingBox(1)): minZ = CDbl(boundingBox(2)) maxX = CDbl(boundingBox(3)): maxY = CDbl(boundingBox(4)): maxZ = CDbl(boundingBox(5)) ' Start 3D sketch Set sketchMgr = modelDoc.SketchManager sketchMgr.Insert3DSketch True sketchMgr.AddToDB = True ' Draw bounding box edges Create3DSketchLine sketchMgr, maxX, minY, minZ, maxX, minY, maxZ Create3DSketchLine sketchMgr, maxX, minY, maxZ, minX, minY, maxZ Create3DSketchLine sketchMgr, minX, minY, maxZ, minX, minY, minZ Create3DSketchLine sketchMgr, minX, minY, minZ, maxX, minY, minZ Create3DSketchLine sketchMgr, maxX, maxY, minZ, maxX, maxY, maxZ Create3DSketchLine sketchMgr, maxX, maxY, maxZ, minX, maxY, maxZ Create3DSketchLine sketchMgr, minX, maxY, maxZ, minX, maxY, minZ Create3DSketchLine sketchMgr, minX, maxY, minZ, maxX, maxY, minZ Create3DSketchLine sketchMgr, minX, minY, minZ, minX, maxY, minZ Create3DSketchLine sketchMgr, minX, minY, maxZ, minX, maxY, maxZ Create3DSketchLine sketchMgr, maxX, minY, minZ, maxX, maxY, minZ Create3DSketchLine sketchMgr, maxX, minY, maxZ, maxX, maxY, maxZ ' Finish 3D sketch sketchMgr.AddToDB = False sketchMgr.Insert3DSketch True ' Update Model modelDoc.ForceRebuild3 True modelDoc.GraphicsRedraw2 End Sub ' Helper Function to Create a 3D Sketch Line Sub Create3DSketchLine(sketchMgr As SldWorks.SketchManager, x1 As Double, y1 As Double, z1 As Double, x2 As Double, y2 As Double, z2 As Double) sketchMgr.CreateLine x1, y1, z1, x2, y2, z2 End Sub ' Subroutine to Update Custom Properties Sub UpdateCustomProperties(modelDoc As SldWorks.ModelDoc2, width As Double, height As Double, depth As Double) Dim customPropMgr As SldWorks.CustomPropertyManager Set customPropMgr = modelDoc.Extension.CustomPropertyManager(\"\") ' Convert dimensions to string format for properties Dim widthStr As String Dim heightStr As String Dim depthStr As String widthStr = Format(width * 1000, \"0.000\") ' Convert to mm heightStr = Format(height * 1000, \"0.000\") depthStr = Format(depth * 1000, \"0.000\") ' Set or update custom properties customPropMgr.Add3 \"BoundingBoxWidth\", swCustomInfoText, widthStr & \" mm\", swCustomPropertyDeleteAndAdd customPropMgr.Add3 \"BoundingBoxHeight\", swCustomInfoText, heightStr & \" mm\", swCustomPropertyDeleteAndAdd customPropMgr.Add3 \"BoundingBoxDepth\", swCustomInfoText, depthStr & \" mm\", swCustomPropertyDeleteAndAdd End Sub You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/addmasscenter.html": {
    "href": "src/addmasscenter.html",
    "title": "Add Center of Mass to a Part in SOLIDWORKS | SOLIDWORKS Macros Lib",
    "keywords": "Add Center of Mass to a Part in SOLIDWORKS Macro Description This VBA macro is designed to automatically add a center of mass (COM) point to a part in SOLIDWORKS. The macro calculates the center of mass of the part and inserts a point at that location, making it easier to analyze the balance and mass distribution of the part. This functionality is especially useful for engineers and designers who frequently work with parts requiring balance and stability assessments. VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim swModelDoc As SldWorks.ModelDoc2 Dim swCenterMass As SldWorks.Feature Dim swCenterMassReferencePoint As SldWorks.Feature Option Explicit Sub main() Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swCenterMass = swModelDoc.FeatureManager.InsertCenterOfMass Set swCenterMassReferencePoint = swModelDoc.FeatureManager.InsertCenterOfMassReferencePoint End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: None required (uses standard SOLIDWORKS API references) Note Pre-conditions The active document must be a part (.sldprt) in SOLIDWORKS. The part should have a valid material assigned to ensure the correct center of mass is calculated. The part must not be empty (should contain geometry). Note Post-conditions A center of mass point will be inserted into the part. Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/assembly_export_dxf.html": {
    "href": "src/assembly_export_dxf.html",
    "title": "Export Sheet Metal to DXF in SOLIDWORKS | SOLIDWORKS Macros Lib",
    "keywords": "Export Sheet Metal to DXF in SOLIDWORKS Macro Description This VBA macro automates the process of exporting all sheet metal parts from a SOLIDWORKS assembly to DXF files. The macro loops through each component in the assembly, checks if it's a sheet metal part, and exports the flat pattern of the part to a DXF file. The macro ensures that duplicate parts are not processed more than once, preventing redundant exports. VBA Macro Code Option Explicit ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** ' Enum for Sheet Metal export options Enum SheetMetalOptions_e ExportFlatPatternGeometry = 1 IncludeHiddenEdges = 2 ExportBendLines = 4 IncludeSketches = 8 MergeCoplanarFaces = 16 ExportLibraryFeatures = 32 ExportFormingTools = 64 ExportBoundingBox = 2048 End Enum ' solidworks app variable Dim swApp As SldWorks.SldWorks Dim swModelDoc As ModelDoc2 Dim swAssemblyDoc As AssemblyDoc Dim swComponents As Variant Dim swComponent As Component2 Dim swComponentIterator Dim processedFiles() As String Sub Main() ReDim processedFiles(0) processedFiles(0) = \"\" Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swAssemblyDoc = swModelDoc swComponents = swAssemblyDoc.GetComponents(False) For Each swComponentIterator In swComponents Set swComponent = swComponentIterator Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then If ExistsInProcessedFiles(processedFiles, swComponentModelDoc.GetPathName()) = False Then addItemToProcessedFiles processedFiles, swComponentModelDoc.GetPathName() PrintDXF swComponentModelDoc End If End If Next swComponentIterator End Sub Function ExistsInProcessedFiles(ByRef arr() As String, fileName As Variant) As Boolean Dim i As Long For i = LBound(arr) To UBound(arr) If arr(i) = fileName Then ExistsInProcessedFiles = True Exit Function End If Next i ExistsInProcessedFiles = False End Function Sub PrintDXF(ByRef swmodel As ModelDoc2) If swmodel.GetType() = swDocumentTypes_e.swDocPART Then Dim swPart As PartDoc Set swPart = swmodel Dim modelPath As String modelPath = swmodel.GetPathName Dim outPath As String outPath = Left(modelPath, Len(modelPath) - 6) outPath = outPath + \"dxf\" swmodel.Visible = True Dim saveDXF As Boolean saveDXF = swPart.ExportToDWG2(outPath, modelPath, swConst.swExportToDWG_e.swExportToDWG_ExportSheetMetal, True, vbEmpty, False, False, SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportFlatPatternGeometry + SheetMetalOptions_e.ExportBendLines, vbEmpty) If saveDXF Then Debug.Print swmodel.GetTitle() & \" saved\" Else Debug.Print swmodel.GetTitle() & \" failed to save\" End If swmodel.Visible = False End If End Sub Public Sub addItemToProcessedFiles(ByRef arr() As String, ByVal processedFile As String) Dim arrLength As Long arrLength = UBound(arr) If arrLength < 0 Then ReDim arr(0) arr(0) = processedFile Else ReDim Preserve arr(arrLength + 1) arr(arrLength + 1) = processedFile End If End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Note Pre-conditions The active document must be an assembly (.sldasm) in SOLIDWORKS. Ensure that the components contain valid sheet metal parts for export. Note Post-conditions The flat pattern of each sheet metal part will be exported as a DXF file. Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/fract_dec_toggle1.html": {
    "href": "src/fract_dec_toggle1.html",
    "title": "Toggle Dimension Style Between Fraction and Decimal | SOLIDWORKS Macros Lib",
    "keywords": "Toggle Dimension Style Between Fraction and Decimal Description This macro automates the process of switching between decimal and fractional units in a SolidWorks document. It first checks whether the current unit system is set to decimal. If it is, the macro changes the unit system to fractional, sets the fractional denominator to 1/32, and enables rounding to the nearest fraction. If the current units are fractional, the macro changes the system back to decimal. The macro ensures that users can quickly toggle between these two unit types without manually adjusting the settings. Additionally, it includes error handling to terminate gracefully if any issues arise. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Pre-Conditions Note SolidWorks must be installed and running on the machine. An active drawing is open. Drawing views with dimensions. Post-Conditions Note The macro will switch the dimension style between fractional and decimal, and vice versa. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As SldWorks.SldWorks ' SolidWorks application object Dim swDraw As SldWorks.DrawingDoc ' Active drawing document Dim boolstatus As Boolean ' Status flag for checking if operations were successful Sub main() ' Error handling: jump to ErrorHandler if an error occurs On Error GoTo ErrorHandler ' Get the SolidWorks application instance Set swApp = Application.SldWorks ' Get the active document (drawing) in SolidWorks Set swDraw = swApp.ActiveDoc ' Check if the current unit system is set to Decimal If swDraw.GetUserPreferenceIntegerValue(swUnitsLinearDecimalDisplay) = swDECIMAL Then ' If Decimal, change the unit system to Fractional boolstatus = swDraw.Extension.SetUserPreferenceToggle(swUserPreferenceToggle_e.swUnitsLinearRoundToNearestFraction, 0, True) ' Set linear display to fractional units swDraw.SetUserPreferenceIntegerValue swUnitsLinearDecimalDisplay, swFRACTION ' Set the fractional denominator to 32 (1/32 increments) swDraw.SetUserPreferenceIntegerValue swUnitsLinearFractionDenominator, 32 ' Enable rounding to the nearest fraction swDraw.SetUserPreferenceToggle swUnitsLinearRoundToNearestFraction, True Else ' If the current unit system is not Decimal (i.e., it's Fractional), change it to Decimal boolstatus = swDraw.Extension.SetUserPreferenceInteger(swUserPreferenceIntegerValue_e.swUnitsLinearDecimalDisplay, 0, swFractionDisplay_e.swDECIMAL) ' Set linear display to decimal units swDraw.SetUserPreferenceIntegerValue swUnitsLinearDecimalDisplay, swDECIMAL End If ' End the macro execution End Exit Sub ErrorHandler: ' End the macro execution in case of an error End End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "| SOLIDWORKS Macros Lib",
    "keywords": "Introduction to VBA Macros in SOLIDWORKS What is a VBA Macro? A VBA (Visual Basic for Applications) macro is a small program written using the VBA programming language, designed to automate repetitive tasks within software applications. In the context of SOLIDWORKS, VBA macros allow users to streamline their workflows by automating design tasks, reducing manual input, and increasing overall productivity. Instead of performing the same actions manually, a macro can execute them in seconds, saving time and minimizing human error. Why Use VBA Macros in SOLIDWORKS? SOLIDWORKS is a powerful CAD software used by engineers and designers to create complex 3D models and assemblies. However, as with any software, there are tasks that are repetitive or prone to error when performed manually. This is where VBA macros come in handy—they enable users to automate tasks such as: Modifying properties or configurations across multiple files Generating drawings or BOMs (Bill of Materials) Editing or creating features in parts and assemblies Exporting data to various formats such as DXF, PDF, or Excel Using VBA macros can significantly improve your efficiency, especially when dealing with large assemblies, multi-part projects, or standardized workflows. Instead of spending time on repetitive actions, users can focus on innovation and improving their designs. Getting Started with SOLIDWORKS VBA Macros To use VBA macros in SOLIDWORKS, you can either write your own macros or use existing ones provided by various sources, such as Blue Byte Systems’ SOLIDWORKS VBA Macro Library. The library offers a collection of macros that automate common tasks, each categorized for easy access based on functionality (e.g., part creation, assembly management, drawing automation). How to Create or Run a VBA Macro in SOLIDWORKS Open the VBA Editor: Go to the Tools menu in SOLIDWORKS, then navigate to Macro and select New to create a new macro, or Run to execute an existing one. Write or Edit the Macro: If you’re creating a new macro, the VBA editor will open, allowing you to write your code. Macros consist of VBA code that interfaces with SOLIDWORKS' API (Application Programming Interface) to control different aspects of the application. Execute the Macro: Once the macro is written or selected, you can run it directly within SOLIDWORKS. The macro will perform the tasks it's programmed for, interacting with the current part, assembly, or drawing. Test and Debug: Always test macros on sample files to ensure they work as expected, and make necessary adjustments to the code if any issues arise. Free VBA Macro Library by Blue Byte Systems Blue Byte Systems provides a comprehensive VBA macro library tailored for SOLIDWORKS users. These macros are designed to help users automate tasks in various areas, including part modeling, assembly management, and sketching. The library is completely free, making it accessible to all SOLIDWORKS users, from beginners to advanced engineers. The macros are organized into categories for easy navigation: Part Automation: Macros related to modifying or creating parts. Assembly Automation: Macros to streamline assembly management. Drawing Automation: Macros focused on automating drawing creation and export. Sketch Automation: Macros for working with sketches more efficiently. Whether you're looking to automate repetitive tasks, modify part properties, or generate drawings quickly, the library offers solutions that save you time and enhance your productivity."
  },
  "src/sketchbox.html": {
    "href": "src/sketchbox.html",
    "title": "SketchBox Macro for SolidWorks | SOLIDWORKS Macros Lib",
    "keywords": "SketchBox Macro for SolidWorks Description This macro creates a rectangle centered about the origin on a preselected plane in SolidWorks. It automates the process of sketching a rectangle and ensures that dimensions are appropriately assigned. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 7 or later Pre-Conditions Note A plane or face must be preselected before running the macro. SolidWorks must have an active document. Results Note A centered rectangle will be drawn on the selected plane or face. A construction line connecting opposite corners of the rectangle will be added and constrained to the origin. Dimensions for the width and height of the rectangle will be created. Steps to Setup the Macro 1. Select a Plane or Face: In SolidWorks, preselect the plane or face where the rectangle will be sketched. 2. Run the Macro: Execute the macro. The rectangle and associated features will be created automatically. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit Dim swApp As Object ' SolidWorks application object Dim Part As Object ' Active document object Dim SelMgr As Object ' Selection manager for the active document Dim boolstatus As Boolean ' Boolean status for operations Dim longstatus As Long, longwarnings As Long ' Long status for warnings/errors Dim Feature As Object ' Feature object Dim CurSelCount As Long ' Count of selected items Sub main() ' Initialize SolidWorks application and active document Set swApp = Application.SldWorks Set Part = swApp.ActiveDoc ' Ensure there is an active document If Part Is Nothing Then MsgBox \"No active document found. Please open a part or assembly and try again.\", vbCritical, \"Error\" Exit Sub End If ' Initialize the selection manager Set SelMgr = Part.SelectionManager ' Disable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, False ' Check if a plane or face is preselected CurSelCount = SelMgr.GetSelectedObjectCount If CurSelCount = 0 Then MsgBox \"Please preselect a plane or face before running the macro.\", vbExclamation, \"No Selection\" Exit Sub End If ' Insert a new sketch on the selected plane or face boolstatus = Part.Extension.SelectByID2(\"\", \"PLANE\", 0, 0, 0, False, 0, Nothing, 0) Part.InsertSketch2 True Part.ClearSelection2 True ' Create a rectangle centered about the origin Part.SketchRectangle -0.037, 0.028, 0, 0.015, -0.019, 0, True ' Clear selection and add a diagonal construction line Part.ClearSelection2 True Dim Line As Object Set Line = Part.CreateLine2(-0.037, -0.019, 0, 0.015, 0.028, 0) Line.ConstructionGeometry = True ' Add midpoint constraints to ensure the rectangle is centered boolstatus = Part.Extension.SelectByID2(\"Point1@Origin\", \"EXTSKETCHPOINT\", 0, 0, 0, True, 0, Nothing, 0) Part.SketchAddConstraints \"sgATMIDDLE\" Part.ClearSelection2 True ' Add dimensions to the rectangle boolstatus = Part.Extension.SelectByID2(\"Line1\", \"SKETCHSEGMENT\", -0.001, 0.027, 0, False, 0, Nothing, 0) Dim Annotation As Object Set Annotation = Part.AddDimension2(-0.0004, 0.045, 0) ' Horizontal dimension Part.ClearSelection2 True boolstatus = Part.Extension.SelectByID2(\"Line2\", \"SKETCHSEGMENT\", -0.030, 0.001, 0, False, 0, Nothing, 0) Set Annotation = Part.AddDimension2(-0.061, -0.001, 0) ' Vertical dimension Part.ClearSelection2 True ' Re-enable input dimensions on creation swApp.SetUserPreferenceToggle swInputDimValOnCreate, True ' Inform the user that the macro is complete MsgBox \"Rectangle sketch created successfully.\", vbInformation, \"Success\" End Sub Macro You can download the macro from here Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  }
}