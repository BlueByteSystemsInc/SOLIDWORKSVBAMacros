{
  "README.html": {
    "href": "README.html",
    "title": "| ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Liability Disclaimer Blue Byte Systems Inc. provides the SOLIDWORKS VBA Macro Library as a free resource intended to assist users in automating repetitive tasks within SOLIDWORKS. While we strive to ensure that the macros are efficient, accurate, and beneficial, they are provided as-is, without any guarantees or warranties, either expressed or implied, including but not limited to the accuracy, reliability, or fitness for a particular purpose. By using any of the macros from this library, you acknowledge and agree to the following: Use at Your Own Risk: The use of these macros is entirely at your own risk. Blue Byte Systems Inc. assumes no responsibility or liability for any direct, indirect, incidental, or consequential damages, including but not limited to loss of data, disruption of workflow, damage to hardware or software, or loss of business profits arising out of or in connection with the use of the macros provided. No Warranty: The macros are provided without any warranty, either expressed or implied, including but not limited to warranties of performance, merchantability, non-infringement, or fitness for a particular purpose. We do not guarantee that the macros will meet your specific requirements or that they will be error-free, bug-free, or free of unintended consequences. Modifications: Any modifications made to the macros are done at your own discretion and risk. Blue Byte Systems Inc. is not liable for any issues arising from user modifications to the original code. We recommend testing any macros thoroughly before implementing them into a production environment. Backup and Testing: It is strongly recommended that users create appropriate backups of all important files before using any macro from this library. Furthermore, users should conduct extensive testing of any macro in a non-production environment before applying it to live data or systems. No Support Obligations: Blue Byte Systems Inc. is not obligated to provide any form of technical support, bug fixes, or updates to the macros. Users may submit inquiries, but there is no guarantee of response or resolution. Legal Limitations: In jurisdictions that do not allow the exclusion of implied warranties or limitation of liability for incidental or consequential damages, the liability of Blue Byte Systems Inc. will be limited to the greatest extent permitted by law. By downloading, modifying, or using any VBA macro from this library, you agree that Blue Byte Systems Inc., its employees, affiliates, and partners will not be held liable for any damages or issues resulting from the use or misuse of these macros. In Summary: You use the VBA Macro Library at your own risk. Blue Byte Systems Inc. is not responsible for any adverse outcomes that may arise from using the provided macros, and it is solely your responsibility to ensure that the macros are suitable for your specific use case. If you do not agree to these terms, do not use the macros provided by Blue Byte Systems Inc."
  },
  "index.html": {
    "href": "index.html",
    "title": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Blue Byte Systems Inc. SOLIDWORKS VBA Macro Library A macro is a small, self-contained program that automates repetitive tasks in SOLIDWORKS. Our VBA Macro Library is designed to streamline your workflow by providing a collection of pre-written macros that help automate common tasks in SOLIDWORKS such as part creation, assembly management, and sketching. Getting Started Explore the VBA Macro Library to find pre-built automation solutions for your SOLIDWORKS projects. Free and Organized by Category All of our VBA macros are free to use and are carefully organized into the following categories: Parts: Automate tasks related to part creation, modifications, and features. Assemblies: Manage assemblies, components, and mates efficiently. Sketching: Simplify sketch-related tasks, including constraints, dimensions, and geometry creation. Drawings: Generate or modify drawing views and annotations quickly. Bill Of Materials: Macros that manage Bill Of Materials. Each macro is designed to save you time and reduce repetitive tasks, helping you work more efficiently with SOLIDWORKS. Contact Us For more information or to contact us about our VBA Macro Library, please visit our Contact Us page."
  },
  "src/Align_All_Dimensions_Automatically.html": {
    "href": "src/Align_All_Dimensions_Automatically.html",
    "title": "Align All Dimensions Automatically | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Align All Dimensions Automatically Description This VBA macro automates selecting and arranging dimensions in SOLIDWORKS drawings. It loops through views, selects display dimensions, and auto-arranges them. System Requirements SOLIDWORKS 2014 or newer Active drawing document open in SOLIDWORKS VBA Code: ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Option Explicit Public swApp As SldWorks.SldWorks Public swModel As SldWorks.ModelDoc2 Public swDraw As SldWorks.DrawingDoc Public swView As SldWorks.View Public swDispDim As SldWorks.DisplayDimension Public swAnn As SldWorks.Annotation Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is a drawing If swModel.GetType <> swDocDRAWING Then MsgBox \"This macro only works on drawings!\", vbCritical, \"Error\" Exit Sub End If Set swDraw = swModel Set swView = swDraw.GetFirstView swModel.ClearSelection2 True ' Loop through all views and select display dimensions Do While Not swView Is Nothing Set swDispDim = swView.GetFirstDisplayDimension5 Do While Not swDispDim Is Nothing Set swAnn = swDispDim.GetAnnotation swAnn.Select True Set swDispDim = swDispDim.GetNext5 Loop Set swView = swView.GetNextView Loop ' Auto-arrange dimensions swModel.Extension.AlignDimensions swAlignDimensionType_AutoArrange, 0.06 swModel.ClearSelection2 True End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html": {
    "href": "src/Rebuild_Save_All_Drawings_in_a_Directory_as_PDF.html",
    "title": "Rebuild & Save All Drawings in a Directory as PDF | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Rebuild & Save All Drawings in a Directory as PDF Description This macro rebuilds all SolidWorks drawing files (.SLDDRW) in a specified directory and saves them as PDF files in the same location. It automates the process of batch exporting drawings to PDFs, making it ideal for users who need to handle large quantities of files efficiently. System Requirements SolidWorks Version: SolidWorks 2014 or newer Operating System: Windows 10 or later Excel Version: Microsoft Excel 2010 or later (for Excel integration features) Pre-Conditions Note The folder containing the SolidWorks drawings must be specified in the code. SolidWorks must be installed and running on the machine. Post-Conditions Note PDF files will be saved in the same location as the SolidWorks drawings. The original drawing files will remain unchanged. VBA Macro Code ' Disclaimer: ' The code provided should be used at your own risk. ' Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. ' For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Option Explicit ' Define the main variables for SolidWorks application and model Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swFilename As String Dim swRet As Boolean Dim swErrors As Long Dim swWarnings As Long Dim swResponse As String ' Main subroutine Sub Main() ' Initialize SolidWorks application Set swApp = Application.SldWorks ' Specify the folder location containing the SolidWorks drawings RebuildAndSaveAllDrawingsAsPDF \"C:\\SOLIDWORKS\", \".SLDDRW\", True End Sub ' Subroutine to rebuild drawing and save as PDF Sub RebuildAndSaveAllDrawingsAsPDF(swFolder As String, swExt As String, swSilent As Boolean) Dim swDocTypeLong As Long ' Ensure the file extension is in uppercase swExt = UCase$(swExt) swDocTypeLong = Switch(swExt = \".SLDDRW\", swDocDRAWING, True, -1) ' If the file type is not supported, exit the subroutine If swDocTypeLong = -1 Then Exit Sub End If ' Change directory to the folder ChDir (swFolder) ' Get the first file in the folder swResponse = Dir(swFolder) Do Until swResponse = \"\" swFilename = swFolder & swResponse ' Check if the file extension matches If Right(UCase$(swResponse), 7) = swExt Then ' Open the SolidWorks document Set swModel = swApp.OpenDoc6(swFilename, swDocTypeLong, swOpenDocOptions_Silent, \"\", swErrors, swWarnings) ' Rebuild the drawing if it's a drawing file If swDocTypeLong <> swDocDRAWING Then swModel.ShowNamedView2 \"*Isometric\", -1 End If ' Define file path variables Dim swFilePath As String Dim swPathSize As Long Dim swPathNoExtension As String Dim swNewFilePath As String swFilePath = swModel.GetPathName swPathSize = Strings.Len(swFilePath) swPathNoExtension = Strings.Left(swFilePath, swPathSize - 6) swNewFilePath = swPathNoExtension & \"PDF\" ' Save the document as PDF swRet = swModel.SaveAs3(swNewFilePath, 0, 0) ' Close the document swApp.CloseDoc swModel.GetTitle End If ' Get the next file in the folder swResponse = Dir Loop End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/Save_Each_Sheet_As_PDF.html": {
    "href": "src/Save_Each_Sheet_As_PDF.html",
    "title": "Export Sheets to PDF Automatically | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheets to PDF Automatically Description This VBA macro automates the process of exporting all sheets in a SOLIDWORKS drawing to individual PDF files. The macro loops through all the sheets in the active drawing and exports each one as a PDFs into the folder that the drawing file is in. System Requirements SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later VBA Code: Option Explicit ' DISCLAIMER: ' This macro is provided \"as is\" without any warranty. Blue Byte Systems Inc. is not liable for any issues that arise ' from its use. Always test the macro in a safe environment before applying it to production data. Dim swApp As SldWorks.SldWorks Sub ExportSheetsToPDF() ' Set the SOLIDWORKS application object Set swApp = Application.SldWorks ' Check if SOLIDWORKS is running If swApp Is Nothing Then MsgBox \"Error Connecting to SOLIDWORKS. Please Try Again.\", vbCritical Exit Sub End If ' Set the active document object Dim swDoc As ModelDoc2 Set swDoc = swApp.ActiveDoc ' Check if the active document is valid If swDoc Is Nothing Then MsgBox \"Unable to Connect to a Valid SOLIDWORKS Drawing.\", vbCritical Exit Sub End If ' Ensure the active document is a drawing If swDoc.GetType <> SwConst.swDocumentTypes_e.swDocDRAWING Then MsgBox \"The active document is not a SOLIDWORKS drawing.\", vbCritical Exit Sub End If ' Set the drawing document object Dim swDwgDoc As DrawingDoc Set swDwgDoc = swDoc ' Set the PDF export data object Dim swExportPdfData As SldWorks.ExportPdfData Set swExportPdfData = swApp.GetExportFileData(SwConst.swExportDataFileType_e.swExportPdfData) ' Get the output directory from the drawing's path Dim outputPath As String outputPath = GetFolderFromPath(swDoc.GetPathName) ' Get the list of sheet names in the drawing Dim sheetNames As Variant sheetNames = swDwgDoc.GetSheetNames ' Set the current sheet object Dim swSheet As Sheet Set swSheet = swDwgDoc.GetCurrentSheet ' Generate the base output file name Dim outputFileName As String outputFileName = GetFileNameFromTitle(swDoc.GetTitle, swSheet.GetName) ' Initialize variables for error handling Dim lErrors As Long Dim lWarnings As Long Dim i As Integer Dim exportSuccess As Boolean ' Display the export status in the SOLIDWORKS status bar Dim statusBarPane As StatusBarPane Dim swFrame As SldWorks.Frame Set swFrame = swApp.Frame Set statusBarPane = swFrame.GetStatusBarPane statusBarPane.Visible = True ' Loop through each sheet and export to PDF For i = 0 To UBound(sheetNames) ' Update the status bar with the current sheet being exported statusBarPane.Text = \"Exporting sheet: \" & sheetNames(i) ' Set the current sheet for PDF export exportSuccess = swExportPdfData.SetSheets(SwConst.swExportDataSheetsToExport_e.swExportData_ExportSpecifiedSheets, sheetNames(i)) ' Check for errors in setting the sheet If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical Exit Sub End If ' Export the current sheet as PDF exportSuccess = swDoc.Extension.SaveAs(sheetNames(i) & \".pdf\", SwConst.swSaveAsVersion_e.swSaveAsCurrentVersion, _ SwConst.swSaveAsOptions_e.swSaveAsOptions_Silent, swExportPdfData, lErrors, lWarnings) ' Check for errors during the export If Not exportSuccess Then MsgBox \"Error exporting sheet: \" & Str(i), vbCritical HandleErrors lErrors Exit Sub End If Next i End Sub ' Function to get the folder path from the full file path Private Function GetFolderFromPath(fullPath As String) As String GetFolderFromPath = Left(fullPath, InStrRev(fullPath, \"\\\")) End Function ' Function to get the file name without the sheet name Private Function GetFileNameFromTitle(fullTitle As String, sheetName As String) As String GetFileNameFromTitle = Left(fullTitle, InStrRev(fullTitle, sheetName) - 1) End Function ' Sub to handle errors based on error codes Private Sub HandleErrors(errorCode As Long) Select Case errorCode Case SwConst.swFileSaveError_e.swGenericSaveError MsgBox \"File Saving Error\", vbExclamation Case SwConst.swFileSaveError_e.swReadOnlySaveError MsgBox \"File Saving Error: Read-Only Rights\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameEmpty MsgBox \"File Saving Error: Empty Filename\", vbExclamation Case SwConst.swFileSaveError_e.swFileNameContainsAtSign MsgBox \"File Saving Error: Invalid FileName Character\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveFormatNotAvailable MsgBox \"File Saving Error: Invalid File Format\", vbExclamation Case SwConst.swFileSaveError_e.swFileSaveAsNameExceedsMaxPathLength MsgBox \"File Saving Error: Filename Exceeds Maximum Path Length\", vbExclamation End Select End Sub Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/addmasscenter.html": {
    "href": "src/addmasscenter.html",
    "title": "Add Center of Mass to a Part in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Add Center of Mass to a Part in SOLIDWORKS Macro Description This VBA macro is designed to automatically add a center of mass (COM) point to a part in SOLIDWORKS. The macro calculates the center of mass of the part and inserts a point at that location, making it easier to analyze the balance and mass distribution of the part. This functionality is especially useful for engineers and designers who frequently work with parts requiring balance and stability assessments. VBA Macro Code 'The code provided is for educational purposes only and should be used at your own risk. 'Blue Byte Systems Inc. assumes no responsibility for any issues or damages that may arise from using or modifying this code. 'For more information, visit [Blue Byte Systems Inc.](https://bluebyte.biz). Dim swApp As SldWorks.SldWorks Dim swModelDoc As SldWorks.ModelDoc2 Dim swCenterMass As SldWorks.Feature Dim swCenterMassReferencePoint As SldWorks.Feature Option Explicit Sub main() Set swApp = Application.SldWorks Set swModelDoc = swApp.ActiveDoc Set swCenterMass = swModelDoc.FeatureManager.InsertCenterOfMass Set swCenterMassReferencePoint = swModelDoc.FeatureManager.InsertCenterOfMassReferencePoint End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Additional Libraries: None required (uses standard SOLIDWORKS API references) Note Pre-conditions The active document must be a part (.sldprt) in SOLIDWORKS. The part should have a valid material assigned to ensure the correct center of mass is calculated. The part must not be empty (should contain geometry). Note Post-conditions A center of mass point will be inserted into the part. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/assembly_export_dxf.html": {
    "href": "src/assembly_export_dxf.html",
    "title": "Export Sheet Metal to DXF in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export Sheet Metal to DXF in SOLIDWORKS Macro Description This VBA macro automates the process of exporting all sheet metal parts from a SOLIDWORKS assembly to DXF files. The macro loops through each component in the assembly, checks if it's a sheet metal part, and exports the flat pattern of the part to a DXF file. The macro ensures that duplicate parts are not processed more than once, preventing redundant exports. VBA Macro Code ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** ' Enum for Sheet Metal export options Enum SheetMetalOptions_e ExportFlatPatternGeometry = 1 IncludeHiddenEdges = 2 ExportBendLines = 4 IncludeSketches = 8 MergeCoplanarFaces = 16 ExportLibraryFeatures = 32 ExportFormingTools = 64 ExportBoundingBox = 2048 End Enum ' Declare SolidWorks and component variables Dim swApp As SldWorks.SldWorks Dim swAssemblyDoc As AssemblyDoc Dim swcomponent As Component2 Dim vcomponents As Variant Dim processedFiles As New Collection Dim component Sub main() ' Get the active SolidWorks application Set swApp = Application.SldWorks ' Get the active document (assembly) Set swAssemblyDoc = swApp.ActiveDoc ' Ensure that the active document is an assembly If swAssemblyDoc Is Nothing Then MsgBox \"Please open an assembly document.\", vbExclamation Exit Sub End If ' Get all components of the assembly vcomponents = swAssemblyDoc.GetComponents(False) ' Loop through each component in the assembly For Each component In vcomponents ' Set the component Set swcomponent = component ' Get the ModelDoc2 (part or assembly) for the component Dim swmodel As ModelDoc2 Set swmodel = swcomponent.GetModelDoc2 ' Check if the model is valid If Not swmodel Is Nothing Then ' Check if the model has already been processed If ExistsInCollection(processedFiles, swmodel.GetTitle()) = False Then ' Export the sheet metal part to DXF PrintDXF swmodel ' Add the processed file to the collection to avoid duplicates processedFiles.Add swmodel.GetTitle(), swmodel.GetTitle() End If End If Next End Sub ' Function to export a sheet metal part to DXF Function PrintDXF(ByRef swmodel As ModelDoc2) As String ' Check if the document is a part file If swmodel.GetType() = SwConst.swDocumentTypes_e.swDocPART Then Dim swPart As PartDoc Set swPart = swmodel ' Get the model path Dim modelPath As String modelPath = swPart.GetPathName ' Define the output DXF path Dim OUT_PATH As String OUT_PATH = Left(modelPath, Len(modelPath) - 6) ' Remove \".SLDPRT\" extension OUT_PATH = OUT_PATH + \"dxf\" ' Make the model visible before exporting swmodel.Visible = True ' Export the sheet metal part to DXF using specified options If False = swPart.ExportToDWG2(OUT_PATH, modelPath, swExportToDWG_e.swExportToDWG_ExportSheetMetal, _ True, Empty, False, False, _ SheetMetalOptions_e.ExportFlatPatternGeometry + _ SheetMetalOptions_e.ExportBendLines, Empty) Then ' Raise error if export fails err.Raise vbError, \"\", \"Failed to export flat pattern\" End If ' Hide the model after exporting swmodel.Visible = False End If ' Print the model path to the debug console Debug.Print swmodel.GetPathName() End Function ' Function to check if an item exists in a collection Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) ' Check if the item exists in the collection Exit Function err: ExistsInCollection = False ' Return false if the item does not exist End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Note Pre-conditions The active document must be an assembly (.sldasm) in SOLIDWORKS. Ensure that the components contain valid sheet metal parts for export. Note Post-conditions The flat pattern of each sheet metal part will be exported as a DXF file. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/create_boundingbox_feature_for_all_components.html": {
    "href": "src/create_boundingbox_feature_for_all_components.html",
    "title": "Create Bounding Box for Assembly and Components | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Create Bounding Box for Assembly and Components Warning This macro creates the SOLIDWORKS bounding box feature and a not custom one. It requires SOLIDWORKS 2018 or newer. We have an alternative macro that uses sketch entities that create a tightest-fit bounding box. Macro Description This macro creates a bounding box for the main assembly and its components within the active document in SOLIDWORKS. It traverses each component in the assembly, checking if a bounding box has already been created for the component. If not, the bounding box is created, and the component is processed. VBA Macro Code Dim swApp As SldWorks.SldWorks Dim swModel As ModelDoc2 Dim swAssembly As AssemblyDoc Dim vComponents As Variant Dim ProcessedFiles As New Collection Sub main() Set swApp = Application.SldWorks Set swModel = swApp.ActiveDoc ' Ensure the active document is an assembly Set swAssembly = swModel ' Create bounding box for the main assembly CreateBoundingBox swModel ' Get all components of the assembly vComponents = swAssembly.GetComponents(False) Dim component For Each component In vComponents Dim swComponent As Component2 Set swComponent = component Dim swComponentModelDoc As ModelDoc2 Set swComponentModelDoc = swComponent.GetModelDoc2 If Not swComponentModelDoc Is Nothing Then ' Check if component already processed If ExistsInCollection(ProcessedFiles, swComponentModelDoc.GetTitle()) = False Then ' Create bounding box for the component CreateBoundingBox swComponentModelDoc ' Add component to processed list ProcessedFiles.Add swComponentModelDoc.GetTitle(), swComponentModelDoc.GetTitle() ' Output component path for debugging Debug.Print swComponentModelDoc.GetPathName() End If End If Next component End Sub Sub CreateBoundingBox(ByRef swComponentModelDoc As ModelDoc2) ' Make the document visible swComponentModelDoc.Visible = True Dim swFeatureManager As featureManager Dim swBoundingBoxFeatureDefinition As BoundingBoxFeatureData Dim swBoundingBoxFeature As Feature ' Access the FeatureManager Set swFeatureManager = swComponentModelDoc.featureManager ' Define the bounding box feature Set swBoundingBoxFeatureDefinition = swFeatureManager.CreateDefinition(swConst.swFmBoundingBox) ' Set options for bounding box creation swBoundingBoxFeatureDefinition.ReferenceFaceOrPlane = swConst.swGlobalBoundingBoxFitOptions_e.swBoundingBoxType_BestFit swBoundingBoxFeatureDefinition.IncludeHiddenBodies = False swBoundingBoxFeatureDefinition.IncludeSurfaces = False ' Create the bounding box feature Set swBoundingBoxFeature = swFeatureManager.CreateFeature(swBoundingBoxFeatureDefinition) ' Make the document invisible again swComponentModelDoc.Visible = False End Sub Public Function ExistsInCollection(col As Collection, key As Variant) As Boolean On Error GoTo err ExistsInCollection = True IsObject (col.Item(key)) Exit Function err: ExistsInCollection = False End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2018 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/exportbomtoexcelwiththumbnails.html": {
    "href": "src/exportbomtoexcelwiththumbnails.html",
    "title": "Export BOM with Thumbnail Preview in SOLIDWORKS | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Export BOM with Thumbnail Preview in SOLIDWORKS Macro Description This VBA macro automates the process of exporting a Bill of Materials (BOM) from a SOLIDWORKS drawing into an Excel sheet, while also adding a thumbnail image preview of the parts. The macro is designed to enhance the visualization of BOMs, allowing users to include part thumbnails directly in the Excel output. This can be extremely useful for teams needing a detailed and visual breakdown of the parts for purchasing, inventory, or assembly processes. VBA Macro Code ' All rights reserved to Blue Byte Systems Inc. ' Blue Byte Systems Inc. does not provide any warranties for macros. ' Pre-conditions: BOM pre-selected. ' Results: BOM created in Excel with thumbnail preview. ' Define the width and height of the thumbnail (in pixels) Dim Width As Long ' in pixels Dim Height As Long ' in pixels Dim swApp As Object Dim swModel As Object Dim swTableAnnotation As Object Dim exApp As Object Dim exWorkbook As Object Dim exWorkSheet As Object Dim swSelectionManager As Object ' Enums for SolidWorks document types, Excel alignment, and table header positions Public Enum swDocumentTypes_e swDocDRAWING = 3 End Enum Public Enum xlTextAlignment xlCenter = -4108 End Enum Public Enum swTableHeaderPosition_e swTableHeader_Top = 1 swTableHeader_Bottom = 2 swTableHeader_None = 0 End Enum Public Enum swSelectType_e swSelBOMS = 97 End Enum Sub Main() ' Set the thumbnail dimensions Width = 21 Height = 60 ' Get a pointer to the SolidWorks application Set swApp = Application.SldWorks ' Get the active document Set swModel = swApp.ActiveDoc If swModel Is Nothing Then swApp.SendMsgToUser \"There is no active document\" End End If ' Get the selection manager Set swSelectionManager = swModel.SelectionManager ' Get the count of selected objects Dim Count As Long Count = swSelectionManager.GetSelectedObjectCount2(-1) ' If no BOM is selected, exit the macro If Count = 0 Then swApp.SendMsgToUser \"You have not selected any bill of materials!\" Exit Sub End If ' Traverse the selection and process all selected bill of materials For i = 1 To Count If swSelectionManager.GetSelectedObjectType3(i, -1) = SwConst.swSelectType_e.swSelANNOTATIONTABLES Then Set swTableAnnotation = swSelectionManager.GetSelectedObject6(i, -1) Dim Ret As String Ret = SaveBOMInExcelWithThumbNail(swTableAnnotation) If Ret = \"\" Then Debug.Print \"Success: \" & swTableAnnotation.GetAnnotation.GetName swApp.SendMsgToUser \"The selected BOM has been exported with thumbnail preview to Excel.\" Else swApp.SendMsgToUser \"Macro failed to export!\" End If End If Next i End Sub ' Function to save BOM to Excel with thumbnail preview Public Function SaveBOMInExcelWithThumbNail(ByRef swTableAnnotation As Object) As String ' Initialize Excel application Set exApp = CreateObject(\"Excel.Application\") If exApp Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to initialize the Excel application\" Exit Function End If exApp.Visible = True ' Create a new workbook and worksheet Set exWorkbook = exApp.Workbooks.Add Set exWorkSheet = exWorkbook.ActiveSheet If exWorkSheet Is Nothing Then SaveBOMInExcelWithThumbNail = \"Unable to get the active sheet\" Exit Function End If ' If the BOM has no rows, return an error If swTableAnnotation.RowCount = 0 Then SaveBOMInExcelWithThumbNail = \"BOM has no rows!\" Exit Function End If Dim swBOMTableAnnotation As BomTableAnnotation Set swBOMTableAnnotation = swTableAnnotation ' Set the column width exWorkSheet.Columns(1).ColumnWidth = Width ' Set the header row index based on the BOM header position Dim HeaderRowIndex As Long Dim swHeaderIndex As Integer swHeaderTable = swTableAnnotation.GetHeaderStyle If swHeaderTable = swTableHeaderPosition_e.swTableHeader_Bottom Then swHeaderIndex = swTableAnnotation.RowCount Else swHeaderIndex = 1 End If ' Traverse through each row in the BOM table Skipper: For i = 0 To swTableAnnotation.RowCount - 1 ' Skip hidden rows If swTableAnnotation.RowHidden(i) Then GoTo Skipper ' Add preview image Dim swComponents As Variant swComponents = swBOMTableAnnotation.GetComponents(i) If Not IsEmpty(swComponents) Then Dim swComponent As Object Set swComponent2 = swComponents(0) Dim swComponentModel As Object Set swComponentModel = swComponent2.GetModelDoc2 If Not swComponentModel Is Nothing Then swComponentModel.Visible = True Dim imagePath As String imagePath = Environ(\"TEMP\") + \"\\tempBitmap.jpg\" swComponentModel.ViewZoomtofit2 Dim saveRet As Boolean Dim er As Long Dim wr As Long saveRet = swComponentModel.Extension.SaveAs(imagePath, 0, 0, Nothing, er, wr) If er + wr > 0 Then SaveBOMInExcelWithThumbNail = \"An error has occurred while trying to save the thumbnail of \" & swModel.GetTitle & \" to the local temp folder. The macro will exit now.\" Exit Function End If swComponentModel.Visible = False exWorkSheet.Rows(i + 1).RowHeight = Height InsertPictureInRange exWorkSheet, imagePath, exWorkSheet.Range(\"A\" & i + 1 & \":A\" & i + 1) End If End If ' Populate Excel sheet with BOM table data For j = 0 To swTableAnnotation.ColumnCount - 1 If swTableAnnotation.ColumnHidden(j) Then GoTo Skipper exWorkSheet.Cells(i + 1, j + 2).Value = swTableAnnotation.DisplayedText(i, j) Next j Next i ' Bold the header row For j = 2 To swTableAnnotation.ColumnCount + 1 exWorkSheet.Cells(swHeaderIndex, j).Font.Bold = True Next j ' Auto-fit the columns and center align the content Dim r As Object Set r = exWorkSheet.Range(exWorkSheet.Cells(1, 2), exWorkSheet.Cells(swTableAnnotation.RowCount + 1, swTableAnnotation.ColumnCount + 1)) r.Columns.AutoFit r.HorizontalAlignment = xlTextAlignment.xlCenter r.VerticalAlignment = xlTextAlignment.xlCenter End Function ' Subroutine to insert a picture in a specific range in Excel Sub InsertPictureInRange(ActiveSheet As Object, PictureFileName As String, TargetCells As Object) ' Inserts a picture and resizes it to fit the TargetCells range Dim p As Object, t As Double, l As Double, w As Double, h As Double If TypeName(ActiveSheet) > \"Worksheet\" Then Exit Sub If Dir(PictureFileName) = \"\" Then Exit Sub ' Import picture Set p = ActiveSheet.Pictures.Insert(PictureFileName) ' Determine positions With TargetCells t = .Top l = .Left w = .Offset(0, .Columns.Count).Left - .Left h = .Offset(.Rows.Count, 0).Top - .Top End With ' Position picture With p .Top = t .Left = l .Width = w .Height = h End With Set p = Nothing End Sub System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Microsoft Excel Note Pre-conditions A Bill of Materials (BOM) must be pre-selected in the SOLIDWORKS drawing. Excel must be installed on the machine. Note Post-conditions The BOM will be exported into an Excel file with a part thumbnail preview inserted for each row. Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  },
  "src/introduction.html": {
    "href": "src/introduction.html",
    "title": "| ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Introduction to VBA Macros in SOLIDWORKS What is a VBA Macro? A VBA (Visual Basic for Applications) macro is a small program written using the VBA programming language, designed to automate repetitive tasks within software applications. In the context of SOLIDWORKS, VBA macros allow users to streamline their workflows by automating design tasks, reducing manual input, and increasing overall productivity. Instead of performing the same actions manually, a macro can execute them in seconds, saving time and minimizing human error. Why Use VBA Macros in SOLIDWORKS? SOLIDWORKS is a powerful CAD software used by engineers and designers to create complex 3D models and assemblies. However, as with any software, there are tasks that are repetitive or prone to error when performed manually. This is where VBA macros come in handyâ€”they enable users to automate tasks such as: Modifying properties or configurations across multiple files Generating drawings or BOMs (Bill of Materials) Editing or creating features in parts and assemblies Exporting data to various formats such as DXF, PDF, or Excel Using VBA macros can significantly improve your efficiency, especially when dealing with large assemblies, multi-part projects, or standardized workflows. Instead of spending time on repetitive actions, users can focus on innovation and improving their designs. Getting Started with SOLIDWORKS VBA Macros To use VBA macros in SOLIDWORKS, you can either write your own macros or use existing ones provided by various sources, such as Blue Byte Systemsâ€™ SOLIDWORKS VBA Macro Library. The library offers a collection of macros that automate common tasks, each categorized for easy access based on functionality (e.g., part creation, assembly management, drawing automation). How to Create or Run a VBA Macro in SOLIDWORKS Open the VBA Editor: Go to the Tools menu in SOLIDWORKS, then navigate to Macro and select New to create a new macro, or Run to execute an existing one. Write or Edit the Macro: If youâ€™re creating a new macro, the VBA editor will open, allowing you to write your code. Macros consist of VBA code that interfaces with SOLIDWORKS' API (Application Programming Interface) to control different aspects of the application. Execute the Macro: Once the macro is written or selected, you can run it directly within SOLIDWORKS. The macro will perform the tasks it's programmed for, interacting with the current part, assembly, or drawing. Test and Debug: Always test macros on sample files to ensure they work as expected, and make necessary adjustments to the code if any issues arise. Free VBA Macro Library by Blue Byte Systems Blue Byte Systems provides a comprehensive VBA macro library tailored for SOLIDWORKS users. These macros are designed to help users automate tasks in various areas, including part modeling, assembly management, and sketching. The library is completely free, making it accessible to all SOLIDWORKS users, from beginners to advanced engineers. The macros are organized into categories for easy navigation: Part Automation: Macros related to modifying or creating parts. Assembly Automation: Macros to streamline assembly management. Drawing Automation: Macros focused on automating drawing creation and export. Sketch Automation: Macros for working with sketches more efficiently. Whether you're looking to automate repetitive tasks, modify part properties, or generate drawings quickly, the library offers solutions that save you time and enhance your productivity."
  },
  "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html": {
    "href": "src/traverse_assembly_component_tree_recursively_solidworks_vba_macro.html",
    "title": "Traverse Assembly Components in SOLIDWORKS Using VBA | ðŸ§© SOLIDWORKS VBA Macros Library",
    "keywords": "Traverse Assembly Components in SOLIDWORKS Using VBA Macro Description This article explains how to write a VBA macro in SOLIDWORKS to traverse through an assembly's components and list their hierarchy. The macro explores the assembly structure, identifies components, and logs their names with proper indentation to reflect their parent-child relationship within the assembly. VBA Macro Code ' ******************************************************************** ' DISCLAIMER: ' This code is provided as-is with no warranty or liability by ' Blue Byte Systems Inc. The company assumes no responsibility for ' any issues arising from the use of this code in production. ' ******************************************************************** Dim swApp As SldWorks.SldWorks Dim swRootAssemblyModelDoc As ModelDoc2 Sub main() Set swApp = Application.SldWorks swApp.CommandInProgress = True Set swRootAssemblyModelDoc = swApp.ActiveDoc Dim swFeature As Feature Set swFeature = swRootAssemblyModelDoc.FirstFeature While Not swFeature Is Nothing TraverseFeatureForComponents swFeature Set swFeature = swFeature.GetNextFeature Wend swApp.CommandInProgress = False End Sub Private Sub TraverseFeatureForComponents(ByVal swFeature As Feature) Dim swSubFeature As Feature Dim swComponent As Component2 Dim typeName As String typeName = swFeature.GetTypeName2 If typeName = \"Reference\" Then Set swComponent = swFeature.GetSpecificFeature2 If Not swComponent Is Nothing Then LogComponentName swComponent Set swSubFeature = swComponent.FirstFeature() While Not swSubFeature Is Nothing TraverseFeatureForComponents swSubFeature Set swSubFeature = swSubFeature.GetNextFeature() Wend End If End If End Sub Private Sub LogComponentName(ByVal swComponent As Component2) Dim parentCount As Long Dim swParentComponent As Component2 Set swParentComponent = swComponent.GetParent() While Not swParentComponent Is Nothing parentCount = parentCount + 1 Set swParentComponent = swParentComponent.GetParent() Wend Dim indentation As String indentation = Replicate(\" \", parentCount) Debug.Print indentation & Split(swComponent.GetPathName(), \"\\\")(UBound(Split(swComponent.GetPathName(), \"\\\"))) End Sub Public Function Replicate(RepeatString As String, ByVal NumOfTimes As Long) If NumOfTimes = 0 Then Replicate = \"\" Exit Function End If Dim s As String Dim c As Long Dim l As Long Dim i As Long l = Len(RepeatString) c = l * NumOfTimes s = Space$(c) For i = 1 To c Step l Mid(s, i, l) = RepeatString Next Replicate = s End Function System Requirements To run this VBA macro, ensure that your system meets the following requirements: SOLIDWORKS Version: SOLIDWORKS 2017 or later VBA Environment: Pre-installed with SOLIDWORKS (Access via Tools > Macro > New or Edit) Operating System: Windows 7, 8, 10, or later Customization Need to modify the macro to meet specific requirements or integrate it with other processes? We provide custom macro development tailored to your needs. Contact us."
  }
}